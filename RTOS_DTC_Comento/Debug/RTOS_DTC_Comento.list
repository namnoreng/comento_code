
RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a06c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a24c  0800a24c  0000b24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7a0  0800a7a0  0000c05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7a0  0800a7a0  0000b7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7a8  0800a7a8  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7a8  0800a7a8  0000b7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ac  0800a7ac  0000b7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800a7b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba8  2000005c  0800a80c  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c04  0800a80c  0000cc04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f4a  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb6  00000000  00000000  0001ffd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00022b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dff  00000000  00000000  00023d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035e5  00000000  00000000  00024b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015791  00000000  00000000  0002814c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de976  00000000  00000000  0003d8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c253  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000503c  00000000  00000000  0011c298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001212d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a234 	.word	0x0800a234

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	0800a234 	.word	0x0800a234

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <UART_Log>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// ---- UART ----
static void UART_Log(const char *s)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if (!s) return;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00a      	beq.n	8000620 <UART_Log+0x24>
  // Polling 방식으로 로그 송신 (요구사항 3)
  HAL_UART_Transmit(&huart4, (uint8_t*)s, (uint16_t)strlen(s), 100);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff fe08 	bl	8000220 <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	2364      	movs	r3, #100	@ 0x64
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <UART_Log+0x2c>)
 800061a:	f007 ff6e 	bl	80084fa <HAL_UART_Transmit>
 800061e:	e000      	b.n	8000622 <UART_Log+0x26>
  if (!s) return;
 8000620:	bf00      	nop
}
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000240 	.word	0x20000240

0800062c <PMIC_StartReadFaults_DMA_IT>:

// ---- PMIC (I2C DMA/IT) ----
static HAL_StatusTypeDef PMIC_StartReadFaults_DMA_IT(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af02      	add	r7, sp, #8
  if (g_pmic_state != PMIC_IDLE) {
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <PMIC_StartReadFaults_DMA_IT+0x38>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <PMIC_StartReadFaults_DMA_IT+0x14>
    return HAL_BUSY;
 800063c:	2302      	movs	r3, #2
 800063e:	e00d      	b.n	800065c <PMIC_StartReadFaults_DMA_IT+0x30>
  }

  // 1. REG_BUCK_UV_OV (0x07h) 읽기 요청 (1 바이트)
  g_pmic_state = PMIC_READING_FAULT_07;
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <PMIC_StartReadFaults_DMA_IT+0x38>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
  // 요구사항 3: I2C DMA 사용
  return HAL_I2C_Mem_Read_DMA(&hi2c1, PMIC_SLAVE_ADDR, REG_BUCK_UV_OV,
 8000646:	2301      	movs	r3, #1
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <PMIC_StartReadFaults_DMA_IT+0x3c>)
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	2207      	movs	r2, #7
 8000652:	21c0      	movs	r1, #192	@ 0xc0
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <PMIC_StartReadFaults_DMA_IT+0x40>)
 8000656:	f003 fe6f 	bl	8004338 <HAL_I2C_Mem_Read_DMA>
 800065a:	4603      	mov	r3, r0
                              I2C_MEMADD_SIZE_8BIT, g_pmic_rx_buf, 1);
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000612 	.word	0x20000612
 8000668:	20000610 	.word	0x20000610
 800066c:	200000e8 	.word	0x200000e8

08000670 <PMIC_SetVout_Async>:

static HAL_StatusTypeDef PMIC_SetVout_Async(uint16_t new_vcode) // 요구사항 5
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af02      	add	r7, sp, #8
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]
  if (g_pmic_state != PMIC_IDLE) {
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <PMIC_SetVout_Async+0x50>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <PMIC_SetVout_Async+0x18>
    return HAL_BUSY;
 8000684:	2302      	movs	r3, #2
 8000686:	e016      	b.n	80006b6 <PMIC_SetVout_Async+0x46>

  // MP5475: V_REF_HIGH (0x13h, 2비트)와 V_REF_LOW (0x14h, 8비트)로 Vout 설정
  // UDS 예시 ID F190의 16비트 코드를 V_REF_HIGH(상위 2비트)/LOW(하위 8비트)로 가정

  // 1. V_REFA_HIGH (0x13h) 쓰기 요청 (Interrupt 사용 - 1바이트 전송에 적합)
  g_pmic_tx_buf[0] = (uint8_t)(new_vcode >> 8) & 0x03; // 상위 2비트
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	0a1b      	lsrs	r3, r3, #8
 800068c:	b29b      	uxth	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0303 	and.w	r3, r3, #3
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <PMIC_SetVout_Async+0x54>)
 8000698:	701a      	strb	r2, [r3, #0]
  g_pmic_state = PMIC_SETTING_VOLTAGE_HIGH;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <PMIC_SetVout_Async+0x50>)
 800069c:	2203      	movs	r2, #3
 800069e:	701a      	strb	r2, [r3, #0]

  // 요구사항 3: I2C Interrupt 사용
  return HAL_I2C_Mem_Write_IT(&hi2c1, PMIC_SLAVE_ADDR, REG_VREFA_HIGH,
 80006a0:	2301      	movs	r3, #1
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <PMIC_SetVout_Async+0x54>)
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	2213      	movs	r2, #19
 80006ac:	21c0      	movs	r1, #192	@ 0xc0
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <PMIC_SetVout_Async+0x58>)
 80006b0:	f003 fd90 	bl	80041d4 <HAL_I2C_Mem_Write_IT>
 80006b4:	4603      	mov	r3, r0
                              I2C_MEMADD_SIZE_8BIT, g_pmic_tx_buf, 1);
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000612 	.word	0x20000612
 80006c4:	2000060c 	.word	0x2000060c
 80006c8:	200000e8 	.word	0x200000e8

080006cc <EEPROM_WriteEnable_Polling>:

// ---- EEPROM (SPI DMA/IT) ----
static void EEPROM_WriteEnable_Polling(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  uint8_t cmd = CMD_WREN;
 80006d2:	2306      	movs	r3, #6
 80006d4:	71fb      	strb	r3, [r7, #7]
  CS_LOW();
 80006d6:	2200      	movs	r2, #0
 80006d8:	2101      	movs	r1, #1
 80006da:	4809      	ldr	r0, [pc, #36]	@ (8000700 <EEPROM_WriteEnable_Polling+0x34>)
 80006dc:	f003 fc1c 	bl	8003f18 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 80006e0:	1df9      	adds	r1, r7, #7
 80006e2:	2364      	movs	r3, #100	@ 0x64
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	@ (8000704 <EEPROM_WriteEnable_Polling+0x38>)
 80006e8:	f006 fc9b 	bl	8007022 <HAL_SPI_Transmit>
  CS_HIGH();
 80006ec:	2201      	movs	r2, #1
 80006ee:	2101      	movs	r1, #1
 80006f0:	4803      	ldr	r0, [pc, #12]	@ (8000700 <EEPROM_WriteEnable_Polling+0x34>)
 80006f2:	f003 fc11 	bl	8003f18 <HAL_GPIO_WritePin>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40020400 	.word	0x40020400
 8000704:	20000190 	.word	0x20000190

08000708 <EEPROM_WaitWriteComplete_Polling>:

static void EEPROM_WaitWriteComplete_Polling(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  uint8_t cmd_rdsr = CMD_RDSR;
 800070e:	2305      	movs	r3, #5
 8000710:	70fb      	strb	r3, [r7, #3]
  uint8_t sr = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	70bb      	strb	r3, [r7, #2]
  uint32_t timeout = HAL_GetTick() + 10;
 8000716:	f001 fc2d 	bl	8001f74 <HAL_GetTick>
 800071a:	4603      	mov	r3, r0
 800071c:	330a      	adds	r3, #10
 800071e:	607b      	str	r3, [r7, #4]

  CS_LOW();
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	4812      	ldr	r0, [pc, #72]	@ (8000770 <EEPROM_WaitWriteComplete_Polling+0x68>)
 8000726:	f003 fbf7 	bl	8003f18 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &cmd_rdsr, 1, 100);
 800072a:	1cf9      	adds	r1, r7, #3
 800072c:	2364      	movs	r3, #100	@ 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	4810      	ldr	r0, [pc, #64]	@ (8000774 <EEPROM_WaitWriteComplete_Polling+0x6c>)
 8000732:	f006 fc76 	bl	8007022 <HAL_SPI_Transmit>
  do {
    HAL_SPI_Receive(&hspi1, &sr, 1, 100);
 8000736:	1cb9      	adds	r1, r7, #2
 8000738:	2364      	movs	r3, #100	@ 0x64
 800073a:	2201      	movs	r2, #1
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <EEPROM_WaitWriteComplete_Polling+0x6c>)
 800073e:	f006 fdac 	bl	800729a <HAL_SPI_Receive>
    if ((sr & 0x01U) == 0) break;
 8000742:	78bb      	ldrb	r3, [r7, #2]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	2b00      	cmp	r3, #0
 800074a:	d006      	beq.n	800075a <EEPROM_WaitWriteComplete_Polling+0x52>
  } while (HAL_GetTick() < timeout);
 800074c:	f001 fc12 	bl	8001f74 <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4293      	cmp	r3, r2
 8000756:	d8ee      	bhi.n	8000736 <EEPROM_WaitWriteComplete_Polling+0x2e>
 8000758:	e000      	b.n	800075c <EEPROM_WaitWriteComplete_Polling+0x54>
    if ((sr & 0x01U) == 0) break;
 800075a:	bf00      	nop
  CS_HIGH();
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <EEPROM_WaitWriteComplete_Polling+0x68>)
 8000762:	f003 fbd9 	bl	8003f18 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40020400 	.word	0x40020400
 8000774:	20000190 	.word	0x20000190

08000778 <EEPROM_WriteDTC_DMA_IT>:

static HAL_StatusTypeDef EEPROM_WriteDTC_DMA_IT(uint16_t addr, const DTC_t *dtc)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	80fb      	strh	r3, [r7, #6]
  if (g_eeprom_busy != 0) return HAL_BUSY;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <EEPROM_WriteDTC_DMA_IT+0x68>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <EEPROM_WriteDTC_DMA_IT+0x1a>
 800078e:	2302      	movs	r3, #2
 8000790:	e022      	b.n	80007d8 <EEPROM_WriteDTC_DMA_IT+0x60>

  // 1. Write Enable (Polling)
  EEPROM_WriteEnable_Polling();
 8000792:	f7ff ff9b 	bl	80006cc <EEPROM_WriteEnable_Polling>

  // 2. SPI DMA/IT를 위한 TX 버퍼 구성: [CMD_WRITE, Addr_High, Addr_Low, Data...]
  g_eeprom_tx_buf[0] = CMD_WRITE;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <EEPROM_WriteDTC_DMA_IT+0x6c>)
 8000798:	2202      	movs	r2, #2
 800079a:	701a      	strb	r2, [r3, #0]
  g_eeprom_tx_buf[1] = (uint8_t)(addr >> 8);
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <EEPROM_WriteDTC_DMA_IT+0x6c>)
 80007a6:	705a      	strb	r2, [r3, #1]
  g_eeprom_tx_buf[2] = (uint8_t)(addr & 0xFF);
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <EEPROM_WriteDTC_DMA_IT+0x6c>)
 80007ae:	709a      	strb	r2, [r3, #2]
  memcpy(&g_eeprom_tx_buf[3], dtc, sizeof(DTC_t));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <EEPROM_WriteDTC_DMA_IT+0x6c>)
 80007b8:	f8c3 2003 	str.w	r2, [r3, #3]

  // 3. CS Low & DMA Transmit 시작 (TxCpltCallback에서 CS High 처리)
  CS_LOW();
 80007bc:	2200      	movs	r2, #0
 80007be:	2101      	movs	r1, #1
 80007c0:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <EEPROM_WriteDTC_DMA_IT+0x70>)
 80007c2:	f003 fba9 	bl	8003f18 <HAL_GPIO_WritePin>
  g_eeprom_busy = 1;
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <EEPROM_WriteDTC_DMA_IT+0x68>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]

  // 요구사항 3: SPI DMA 사용
  return HAL_SPI_Transmit_DMA(&hspi1, g_eeprom_tx_buf, sizeof(DTC_t) + 3);
 80007cc:	2207      	movs	r2, #7
 80007ce:	4905      	ldr	r1, [pc, #20]	@ (80007e4 <EEPROM_WriteDTC_DMA_IT+0x6c>)
 80007d0:	4806      	ldr	r0, [pc, #24]	@ (80007ec <EEPROM_WriteDTC_DMA_IT+0x74>)
 80007d2:	f007 f815 	bl	8007800 <HAL_SPI_Transmit_DMA>
 80007d6:	4603      	mov	r3, r0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000624 	.word	0x20000624
 80007e4:	20000618 	.word	0x20000618
 80007e8:	40020400 	.word	0x40020400
 80007ec:	20000190 	.word	0x20000190

080007f0 <EEPROM_ReadDTC_DMA_IT>:

static HAL_StatusTypeDef EEPROM_ReadDTC_DMA_IT(uint16_t addr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
  if (g_eeprom_busy != 0) return HAL_BUSY;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <EEPROM_ReadDTC_DMA_IT+0x58>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <EEPROM_ReadDTC_DMA_IT+0x18>
 8000804:	2302      	movs	r3, #2
 8000806:	e01a      	b.n	800083e <EEPROM_ReadDTC_DMA_IT+0x4e>

  // 1. SPI DMA/IT를 위한 TX 버퍼 구성: [CMD_READ, Addr_High, Addr_Low]
  g_eeprom_tx_buf[0] = CMD_READ;
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <EEPROM_ReadDTC_DMA_IT+0x5c>)
 800080a:	2203      	movs	r2, #3
 800080c:	701a      	strb	r2, [r3, #0]
  g_eeprom_tx_buf[1] = (uint8_t)(addr >> 8);
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <EEPROM_ReadDTC_DMA_IT+0x5c>)
 8000818:	705a      	strb	r2, [r3, #1]
  g_eeprom_tx_buf[2] = (uint8_t)(addr & 0xFF);
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <EEPROM_ReadDTC_DMA_IT+0x5c>)
 8000820:	709a      	strb	r2, [r3, #2]

  // 2. CS Low & DMA Transmit 시작 (CMD/Addr 송신)
  CS_LOW();
 8000822:	2200      	movs	r2, #0
 8000824:	2101      	movs	r1, #1
 8000826:	480a      	ldr	r0, [pc, #40]	@ (8000850 <EEPROM_ReadDTC_DMA_IT+0x60>)
 8000828:	f003 fb76 	bl	8003f18 <HAL_GPIO_WritePin>
  g_eeprom_busy = 1;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <EEPROM_ReadDTC_DMA_IT+0x58>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]

  // 요구사항 3: SPI DMA 사용 (TxCpltCallback에서 Rx DMA 시작)
  return HAL_SPI_Transmit_DMA(&hspi1, g_eeprom_tx_buf, 3);
 8000832:	2203      	movs	r2, #3
 8000834:	4905      	ldr	r1, [pc, #20]	@ (800084c <EEPROM_ReadDTC_DMA_IT+0x5c>)
 8000836:	4807      	ldr	r0, [pc, #28]	@ (8000854 <EEPROM_ReadDTC_DMA_IT+0x64>)
 8000838:	f006 ffe2 	bl	8007800 <HAL_SPI_Transmit_DMA>
 800083c:	4603      	mov	r3, r0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000624 	.word	0x20000624
 800084c:	20000618 	.word	0x20000618
 8000850:	40020400 	.word	0x40020400
 8000854:	20000190 	.word	0x20000190

08000858 <CAN_SendResponse>:

// ---- DTC & CAN (IT) ----
static HAL_StatusTypeDef CAN_SendResponse(uint32_t std_id, const uint8_t *data, uint8_t len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	@ 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	4613      	mov	r3, r2
 8000864:	71fb      	strb	r3, [r7, #7]
  CAN_TxHeaderTypeDef txh = {0};
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
 8000876:	615a      	str	r2, [r3, #20]
  uint32_t mailbox = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  txh.StdId = std_id;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	61bb      	str	r3, [r7, #24]
  txh.IDE   = CAN_ID_STD;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  txh.RTR   = CAN_RTR_DATA;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  txh.DLC   = (len > 8) ? 8 : len;
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b08      	cmp	r3, #8
 800088c:	bf28      	it	cs
 800088e:	2308      	movcs	r3, #8
 8000890:	b2db      	uxtb	r3, r3
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_CAN_AddTxMessage(&hcan1, &txh, (uint8_t*)data, &mailbox) != HAL_OK) {
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	f107 0118 	add.w	r1, r7, #24
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	4808      	ldr	r0, [pc, #32]	@ (80008c0 <CAN_SendResponse+0x68>)
 80008a0:	f002 f836 	bl	8002910 <HAL_CAN_AddTxMessage>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d004      	beq.n	80008b4 <CAN_SendResponse+0x5c>
    UART_Log("CAN: TX failed.\r\n");
 80008aa:	4806      	ldr	r0, [pc, #24]	@ (80008c4 <CAN_SendResponse+0x6c>)
 80008ac:	f7ff fea6 	bl	80005fc <UART_Log>
    return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e000      	b.n	80008b6 <CAN_SendResponse+0x5e>
  }
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3730      	adds	r7, #48	@ 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000c0 	.word	0x200000c0
 80008c4:	0800a24c 	.word	0x0800a24c

080008c8 <DTC_CheckAndLogFaults>:

static void DTC_CheckAndLogFaults(uint8_t fault_reg_07, uint8_t fault_reg_08) // 요구사항 4
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	460a      	mov	r2, r1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
  g_active_dtc.code = DTC_NO_FAULT;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	801a      	strh	r2, [r3, #0]
  g_active_dtc.status = 0;
 80008de:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	709a      	strb	r2, [r3, #2]

  // 1. UV Fault (Buck A) 확인
  if (fault_reg_07 & PMIC_BUCKA_UV_BIT_MASK) {
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	da0d      	bge.n	8000908 <DTC_CheckAndLogFaults+0x40>
    g_active_dtc.code = DTC_BRAKE_UV_PMIC_A;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 80008ee:	f243 0211 	movw	r2, #12305	@ 0x3011
 80008f2:	801a      	strh	r2, [r3, #0]
    g_active_dtc.status = 1; // Active Fault
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	709a      	strb	r2, [r3, #2]
    g_active_dtc.source_id = 1; // PMIC
 80008fa:	4b17      	ldr	r3, [pc, #92]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	70da      	strb	r2, [r3, #3]
    UART_Log("DTC: ACTIVE UV Fault detected. Starting EEPROM Write.\r\n");
 8000900:	4816      	ldr	r0, [pc, #88]	@ (800095c <DTC_CheckAndLogFaults+0x94>)
 8000902:	f7ff fe7b 	bl	80005fc <UART_Log>
 8000906:	e010      	b.n	800092a <DTC_CheckAndLogFaults+0x62>
  }

  // 2. OC Fault (Buck A) 확인
  else if (fault_reg_08 & PMIC_BUCKA_OC_BIT_MASK) {
 8000908:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da0c      	bge.n	800092a <DTC_CheckAndLogFaults+0x62>
    g_active_dtc.code = DTC_BRAKE_OC_PMIC_A;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 8000912:	f243 0212 	movw	r2, #12306	@ 0x3012
 8000916:	801a      	strh	r2, [r3, #0]
    g_active_dtc.status = 1; // Active Fault
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 800091a:	2201      	movs	r2, #1
 800091c:	709a      	strb	r2, [r3, #2]
    g_active_dtc.source_id = 1; // PMIC
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 8000920:	2201      	movs	r2, #1
 8000922:	70da      	strb	r2, [r3, #3]
    UART_Log("DTC: ACTIVE OC Fault detected. Starting EEPROM Write.\r\n");
 8000924:	480e      	ldr	r0, [pc, #56]	@ (8000960 <DTC_CheckAndLogFaults+0x98>)
 8000926:	f7ff fe69 	bl	80005fc <UART_Log>
  }

  // 3. Fault 처리: EEPROM 저장 및 CAN 송신

  if (g_active_dtc.status == 1) {
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 800092c:	789b      	ldrb	r3, [r3, #2]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d10e      	bne.n	8000950 <DTC_CheckAndLogFaults+0x88>
    // 활성 고장 발생 시: EEPROM에 저장 (상태 2: Stored)
    g_stored_dtc.code = g_active_dtc.code;
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 8000934:	881a      	ldrh	r2, [r3, #0]
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <DTC_CheckAndLogFaults+0x9c>)
 8000938:	801a      	strh	r2, [r3, #0]
    g_stored_dtc.status = 2;
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <DTC_CheckAndLogFaults+0x9c>)
 800093c:	2202      	movs	r2, #2
 800093e:	709a      	strb	r2, [r3, #2]
    g_stored_dtc.source_id = g_active_dtc.source_id;
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <DTC_CheckAndLogFaults+0x90>)
 8000942:	78da      	ldrb	r2, [r3, #3]
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <DTC_CheckAndLogFaults+0x9c>)
 8000946:	70da      	strb	r2, [r3, #3]

    // SPI DMA로 EEPROM에 저장 요청
    EEPROM_WriteDTC_DMA_IT(0x0000, &g_stored_dtc);
 8000948:	4906      	ldr	r1, [pc, #24]	@ (8000964 <DTC_CheckAndLogFaults+0x9c>)
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff ff14 	bl	8000778 <EEPROM_WriteDTC_DMA_IT>
  }
  // DTC_NO_FAULT 상태로 EEPROM에 저장하는 로직은 UDS Clear에서 처리
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000584 	.word	0x20000584
 800095c:	0800a260 	.word	0x0800a260
 8000960:	0800a298 	.word	0x0800a298
 8000964:	20000588 	.word	0x20000588

08000968 <HAL_I2C_MemRxCpltCallback>:
// -----------------------------------------------------------------------------
// HAL 콜백 함수 (요구사항 3)
// -----------------------------------------------------------------------------

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af02      	add	r7, sp, #8
 800096e:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance != hi2c1.Instance) return;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_I2C_MemRxCpltCallback+0x80>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d131      	bne.n	80009e0 <HAL_I2C_MemRxCpltCallback+0x78>

  if (g_pmic_state == PMIC_READING_FAULT_07) {
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <HAL_I2C_MemRxCpltCallback+0x84>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b01      	cmp	r3, #1
 8000984:	d117      	bne.n	80009b6 <HAL_I2C_MemRxCpltCallback+0x4e>
    // 1. REG_BUCK_UV_OV (0x07h) 읽기 완료
    g_fault_reg_07 = g_pmic_rx_buf[0];
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <HAL_I2C_MemRxCpltCallback+0x88>)
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <HAL_I2C_MemRxCpltCallback+0x8c>)
 800098c:	701a      	strb	r2, [r3, #0]

    // 다음: REG_BUCK_OC_ST (0x08h) 읽기 요청 (DMA)
    g_pmic_state = PMIC_READING_FAULT_08;
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <HAL_I2C_MemRxCpltCallback+0x84>)
 8000990:	2202      	movs	r2, #2
 8000992:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_Mem_Read_DMA(&hi2c1, PMIC_SLAVE_ADDR, REG_BUCK_OC_ST,
 8000994:	2301      	movs	r3, #1
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_I2C_MemRxCpltCallback+0x88>)
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2301      	movs	r3, #1
 800099e:	2208      	movs	r2, #8
 80009a0:	21c0      	movs	r1, #192	@ 0xc0
 80009a2:	4811      	ldr	r0, [pc, #68]	@ (80009e8 <HAL_I2C_MemRxCpltCallback+0x80>)
 80009a4:	f003 fcc8 	bl	8004338 <HAL_I2C_Mem_Read_DMA>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d019      	beq.n	80009e2 <HAL_I2C_MemRxCpltCallback+0x7a>
                              I2C_MEMADD_SIZE_8BIT, g_pmic_rx_buf, 1) != HAL_OK) {
      g_pmic_state = PMIC_IDLE;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <HAL_I2C_MemRxCpltCallback+0x84>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e015      	b.n	80009e2 <HAL_I2C_MemRxCpltCallback+0x7a>
    }
  } else if (g_pmic_state == PMIC_READING_FAULT_08) {
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <HAL_I2C_MemRxCpltCallback+0x84>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d110      	bne.n	80009e2 <HAL_I2C_MemRxCpltCallback+0x7a>
    // 2. REG_BUCK_OC_ST (0x08h) 읽기 완료
    g_fault_reg_08 = g_pmic_rx_buf[0];
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <HAL_I2C_MemRxCpltCallback+0x88>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <HAL_I2C_MemRxCpltCallback+0x90>)
 80009c6:	701a      	strb	r2, [r3, #0]

    // 최종 DTC 확인 로직 호출
    DTC_CheckAndLogFaults(g_fault_reg_07, g_fault_reg_08);
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_I2C_MemRxCpltCallback+0x8c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <HAL_I2C_MemRxCpltCallback+0x90>)
 80009ce:	7812      	ldrb	r2, [r2, #0]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff78 	bl	80008c8 <DTC_CheckAndLogFaults>

    g_pmic_state = PMIC_IDLE;
 80009d8:	4b04      	ldr	r3, [pc, #16]	@ (80009ec <HAL_I2C_MemRxCpltCallback+0x84>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e000      	b.n	80009e2 <HAL_I2C_MemRxCpltCallback+0x7a>
  if (hi2c->Instance != hi2c1.Instance) return;
 80009e0:	bf00      	nop
  }
}
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000e8 	.word	0x200000e8
 80009ec:	20000612 	.word	0x20000612
 80009f0:	20000610 	.word	0x20000610
 80009f4:	20000613 	.word	0x20000613
 80009f8:	20000614 	.word	0x20000614

080009fc <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance != hi2c1.Instance) return;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_I2C_MemTxCpltCallback+0x74>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d12b      	bne.n	8000a68 <HAL_I2C_MemTxCpltCallback+0x6c>

  if (g_pmic_state == PMIC_SETTING_VOLTAGE_HIGH) {
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <HAL_I2C_MemTxCpltCallback+0x78>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d11a      	bne.n	8000a50 <HAL_I2C_MemTxCpltCallback+0x54>
    // V_REFA_HIGH 쓰기 완료 -> V_REFA_LOW 쓰기 시작
    uint16_t vcode = 0x011A; // 예시로 설정된 Vout 코드
 8000a1a:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 8000a1e:	81fb      	strh	r3, [r7, #14]
    g_pmic_tx_buf[0] = (uint8_t)(vcode & 0xFF); // LOW 바이트 데이터
 8000a20:	89fb      	ldrh	r3, [r7, #14]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <HAL_I2C_MemTxCpltCallback+0x7c>)
 8000a26:	701a      	strb	r2, [r3, #0]
    g_pmic_state = PMIC_SETTING_VOLTAGE_LOW;
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <HAL_I2C_MemTxCpltCallback+0x78>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	701a      	strb	r2, [r3, #0]

    // V_REFA_LOW (0x14h) 쓰기 요청 (Interrupt)
    if (HAL_I2C_Mem_Write_IT(&hi2c1, PMIC_SLAVE_ADDR, REG_VREFA_LOW,
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <HAL_I2C_MemTxCpltCallback+0x7c>)
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2301      	movs	r3, #1
 8000a38:	2214      	movs	r2, #20
 8000a3a:	21c0      	movs	r1, #192	@ 0xc0
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <HAL_I2C_MemTxCpltCallback+0x74>)
 8000a3e:	f003 fbc9 	bl	80041d4 <HAL_I2C_Mem_Write_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d010      	beq.n	8000a6a <HAL_I2C_MemTxCpltCallback+0x6e>
                             I2C_MEMADD_SIZE_8BIT, g_pmic_tx_buf, 1) != HAL_OK) {
      g_pmic_state = PMIC_IDLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_I2C_MemTxCpltCallback+0x78>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e00c      	b.n	8000a6a <HAL_I2C_MemTxCpltCallback+0x6e>
    }
  } else if (g_pmic_state == PMIC_SETTING_VOLTAGE_LOW) {
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_I2C_MemTxCpltCallback+0x78>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d107      	bne.n	8000a6a <HAL_I2C_MemTxCpltCallback+0x6e>
    // V_REFA_LOW 쓰기 완료 -> IDLE
    g_pmic_state = PMIC_IDLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_I2C_MemTxCpltCallback+0x78>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
    UART_Log("PMIC: Vout Set Done (IT).\r\n");
 8000a60:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <HAL_I2C_MemTxCpltCallback+0x80>)
 8000a62:	f7ff fdcb 	bl	80005fc <UART_Log>
 8000a66:	e000      	b.n	8000a6a <HAL_I2C_MemTxCpltCallback+0x6e>
  if (hi2c->Instance != hi2c1.Instance) return;
 8000a68:	bf00      	nop
  }
}
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000e8 	.word	0x200000e8
 8000a74:	20000612 	.word	0x20000612
 8000a78:	2000060c 	.word	0x2000060c
 8000a7c:	0800a2d0 	.word	0x0800a2d0

08000a80 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance != hi2c1.Instance) return;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <HAL_I2C_ErrorCallback+0x2c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d106      	bne.n	8000aa2 <HAL_I2C_ErrorCallback+0x22>
  UART_Log("PMIC: I2C Error! Halting current sequence.\r\n");
 8000a94:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <HAL_I2C_ErrorCallback+0x30>)
 8000a96:	f7ff fdb1 	bl	80005fc <UART_Log>
  g_pmic_state = PMIC_IDLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_I2C_ErrorCallback+0x34>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	e000      	b.n	8000aa4 <HAL_I2C_ErrorCallback+0x24>
  if (hi2c->Instance != hi2c1.Instance) return;
 8000aa2:	bf00      	nop
}
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000e8 	.word	0x200000e8
 8000ab0:	0800a2ec 	.word	0x0800a2ec
 8000ab4:	20000612 	.word	0x20000612

08000ab8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if (hspi->Instance != hspi1.Instance) return;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_SPI_TxCpltCallback+0x74>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d12a      	bne.n	8000b22 <HAL_SPI_TxCpltCallback+0x6a>

  uint8_t cmd = g_eeprom_tx_buf[0];
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <HAL_SPI_TxCpltCallback+0x78>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD_WRITE) {
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d10d      	bne.n	8000af4 <HAL_SPI_TxCpltCallback+0x3c>
    // Write Sequence: CMD/Addr/Data 송신 완료
    CS_HIGH();
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2101      	movs	r1, #1
 8000adc:	4815      	ldr	r0, [pc, #84]	@ (8000b34 <HAL_SPI_TxCpltCallback+0x7c>)
 8000ade:	f003 fa1b 	bl	8003f18 <HAL_GPIO_WritePin>
    g_eeprom_busy = 0;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_SPI_TxCpltCallback+0x80>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
    // EEPROM Write Complete 대기 (Polling)
    EEPROM_WaitWriteComplete_Polling();
 8000ae8:	f7ff fe0e 	bl	8000708 <EEPROM_WaitWriteComplete_Polling>
    UART_Log("EEPROM: DTC Write Done (DMA/Polling).\r\n");
 8000aec:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <HAL_SPI_TxCpltCallback+0x84>)
 8000aee:	f7ff fd85 	bl	80005fc <UART_Log>
 8000af2:	e017      	b.n	8000b24 <HAL_SPI_TxCpltCallback+0x6c>

  } else if (cmd == CMD_READ) {
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d114      	bne.n	8000b24 <HAL_SPI_TxCpltCallback+0x6c>
    // Read Sequence: CMD/Addr 송신 완료 -> 데이터 수신 시작 (Rx DMA)
    if (HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)&g_eeprom_rx_dtc, sizeof(DTC_t)) != HAL_OK) {
 8000afa:	2204      	movs	r2, #4
 8000afc:	4910      	ldr	r1, [pc, #64]	@ (8000b40 <HAL_SPI_TxCpltCallback+0x88>)
 8000afe:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <HAL_SPI_TxCpltCallback+0x74>)
 8000b00:	f006 ff34 	bl	800796c <HAL_SPI_Receive_DMA>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00c      	beq.n	8000b24 <HAL_SPI_TxCpltCallback+0x6c>
      CS_HIGH();
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	4809      	ldr	r0, [pc, #36]	@ (8000b34 <HAL_SPI_TxCpltCallback+0x7c>)
 8000b10:	f003 fa02 	bl	8003f18 <HAL_GPIO_WritePin>
      g_eeprom_busy = 0;
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_SPI_TxCpltCallback+0x80>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
      UART_Log("EEPROM: Read Rx DMA failed.\r\n");
 8000b1a:	480a      	ldr	r0, [pc, #40]	@ (8000b44 <HAL_SPI_TxCpltCallback+0x8c>)
 8000b1c:	f7ff fd6e 	bl	80005fc <UART_Log>
 8000b20:	e000      	b.n	8000b24 <HAL_SPI_TxCpltCallback+0x6c>
  if (hspi->Instance != hspi1.Instance) return;
 8000b22:	bf00      	nop
    }
  }
}
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000190 	.word	0x20000190
 8000b30:	20000618 	.word	0x20000618
 8000b34:	40020400 	.word	0x40020400
 8000b38:	20000624 	.word	0x20000624
 8000b3c:	0800a31c 	.word	0x0800a31c
 8000b40:	20000620 	.word	0x20000620
 8000b44:	0800a344 	.word	0x0800a344

08000b48 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0a4      	sub	sp, #144	@ 0x90
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance != hspi1.Instance) return;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <HAL_SPI_RxCpltCallback+0x5c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d11e      	bne.n	8000b9a <HAL_SPI_RxCpltCallback+0x52>

  // Read Sequence: 데이터 수신 완료
  CS_HIGH();
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4811      	ldr	r0, [pc, #68]	@ (8000ba8 <HAL_SPI_RxCpltCallback+0x60>)
 8000b62:	f003 f9d9 	bl	8003f18 <HAL_GPIO_WritePin>
  g_eeprom_busy = 0;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <HAL_SPI_RxCpltCallback+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]

  // DTC 모듈에 최종 읽은 데이터 반영
  g_stored_dtc = g_eeprom_rx_dtc;
 8000b6c:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_SPI_RxCpltCallback+0x68>)
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <HAL_SPI_RxCpltCallback+0x6c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6013      	str	r3, [r2, #0]

  char log_buf[LOG_BUF_SZ];
  snprintf((char*)log_buf, LOG_BUF_SZ, "EEPROM: DTC Read Done. Code=0x%X, Status=%d.\r\n",
           g_stored_dtc.code, g_stored_dtc.status);
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_SPI_RxCpltCallback+0x68>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
  snprintf((char*)log_buf, LOG_BUF_SZ, "EEPROM: DTC Read Done. Code=0x%X, Status=%d.\r\n",
 8000b78:	461a      	mov	r2, r3
           g_stored_dtc.code, g_stored_dtc.status);
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_SPI_RxCpltCallback+0x68>)
 8000b7c:	789b      	ldrb	r3, [r3, #2]
  snprintf((char*)log_buf, LOG_BUF_SZ, "EEPROM: DTC Read Done. Code=0x%X, Status=%d.\r\n",
 8000b7e:	f107 0008 	add.w	r0, r7, #8
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	4613      	mov	r3, r2
 8000b86:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb8 <HAL_SPI_RxCpltCallback+0x70>)
 8000b88:	2180      	movs	r1, #128	@ 0x80
 8000b8a:	f008 fe9f 	bl	80098cc <sniprintf>
  UART_Log(log_buf);
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fd32 	bl	80005fc <UART_Log>
 8000b98:	e000      	b.n	8000b9c <HAL_SPI_RxCpltCallback+0x54>
  if (hspi->Instance != hspi1.Instance) return;
 8000b9a:	bf00      	nop
}
 8000b9c:	3788      	adds	r7, #136	@ 0x88
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000190 	.word	0x20000190
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	20000624 	.word	0x20000624
 8000bb0:	20000588 	.word	0x20000588
 8000bb4:	20000620 	.word	0x20000620
 8000bb8:	0800a364 	.word	0x0800a364

08000bbc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) // 요구사항 3, 7
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b090      	sub	sp, #64	@ 0x40
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rxh;
  uint8_t rx_data[8];
  uint8_t tx_data[8];

  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxh, rx_data) != HAL_OK) {
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	f107 0218 	add.w	r2, r7, #24
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f001 ff79 	bl	8002ac6 <HAL_CAN_GetRxMessage>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
    UART_Log("CAN Rx Error!\r\n");
 8000bda:	485b      	ldr	r0, [pc, #364]	@ (8000d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000bdc:	f7ff fd0e 	bl	80005fc <UART_Log>
 8000be0:	e0ae      	b.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    return;
  }

  uint8_t sid = rx_data[0];
 8000be2:	7c3b      	ldrb	r3, [r7, #16]
 8000be4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t response_id = 0x7E8; // ECU 응답 ID (예시)
 8000be8:	f44f 63fd 	mov.w	r3, #2024	@ 0x7e8
 8000bec:	63bb      	str	r3, [r7, #56]	@ 0x38

  // 1. Read DTC (0x19) 처리 (요구사항 4, 7)
  if (sid == UDS_DTC_READ_SID) {
 8000bee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000bf2:	2b19      	cmp	r3, #25
 8000bf4:	d12c      	bne.n	8000c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
    if (rx_data[1] == UDS_DTC_SNAPSHOT_RID) {
 8000bf6:	7c7b      	ldrb	r3, [r7, #17]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	f040 80a1 	bne.w	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
      tx_data[0] = sid + 0x40U; // Positive Response 0x59
 8000bfe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c02:	3340      	adds	r3, #64	@ 0x40
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	723b      	strb	r3, [r7, #8]
      tx_data[1] = UDS_DTC_SNAPSHOT_RID; // 0x02
 8000c08:	2302      	movs	r3, #2
 8000c0a:	727b      	strb	r3, [r7, #9]

      if (g_stored_dtc.code != DTC_NO_FAULT && g_stored_dtc.status != 0) {
 8000c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d012      	beq.n	8000c3a <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 8000c14:	4b4d      	ldr	r3, [pc, #308]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00e      	beq.n	8000c3a <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
        // DTC가 저장되어 있을 경우
        memcpy(&tx_data[2], &g_stored_dtc, sizeof(DTC_t));
 8000c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f8c7 300a 	str.w	r3, [r7, #10]
        CAN_SendResponse(response_id, tx_data, 2 + sizeof(DTC_t)); // 6바이트 응답
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2206      	movs	r2, #6
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c2e:	f7ff fe13 	bl	8000858 <CAN_SendResponse>
        UART_Log("CAN: UDS Read DTC Response Sent.\r\n");
 8000c32:	4847      	ldr	r0, [pc, #284]	@ (8000d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8000c34:	f7ff fce2 	bl	80005fc <UART_Log>
 8000c38:	e082      	b.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
      } else {
        // DTC가 없을 경우
        CAN_SendResponse(response_id, tx_data, 2); // 2바이트 응답 (DTC Report Size=0)
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4619      	mov	r1, r3
 8000c42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c44:	f7ff fe08 	bl	8000858 <CAN_SendResponse>
        UART_Log("CAN: UDS Read DTC (No DTC) Response Sent.\r\n");
 8000c48:	4842      	ldr	r0, [pc, #264]	@ (8000d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8000c4a:	f7ff fcd7 	bl	80005fc <UART_Log>
 8000c4e:	e077      	b.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
      }
    }
  }

  // 2. Clear Diagnostic Information (0x14) 처리 (요구사항 7)
  else if (sid == UDS_DTC_CLEAR_SID) {
 8000c50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c54:	2b14      	cmp	r3, #20
 8000c56:	d131      	bne.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
    // DTC 초기화
    g_stored_dtc.code = DTC_NO_FAULT;
 8000c58:	4b3c      	ldr	r3, [pc, #240]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
    g_stored_dtc.status = 0;
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	709a      	strb	r2, [r3, #2]
    g_stored_dtc.source_id = 0;
 8000c64:	4b39      	ldr	r3, [pc, #228]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	70da      	strb	r2, [r3, #3]

    // EEPROM에 DTC_NO_FAULT 저장 요청 (DMA)
    if (EEPROM_WriteDTC_DMA_IT(0x0000, &g_stored_dtc) == HAL_OK) {
 8000c6a:	4938      	ldr	r1, [pc, #224]	@ (8000d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fd83 	bl	8000778 <EEPROM_WriteDTC_DMA_IT>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10f      	bne.n	8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
      // UDS Positive Response
      tx_data[0] = sid + 0x40U; // 0x54
 8000c78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000c7c:	3340      	adds	r3, #64	@ 0x40
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	723b      	strb	r3, [r7, #8]
      CAN_SendResponse(response_id, tx_data, 1);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2201      	movs	r2, #1
 8000c88:	4619      	mov	r1, r3
 8000c8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000c8c:	f7ff fde4 	bl	8000858 <CAN_SendResponse>
      UART_Log("CAN: UDS Clear DTC Completed.\r\n");
 8000c90:	4831      	ldr	r0, [pc, #196]	@ (8000d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000c92:	f7ff fcb3 	bl	80005fc <UART_Log>
 8000c96:	e053      	b.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    } else {
       // Negative Response Code (NRC) 0x22 (ConditionsNotCorrect - SPI Busy)
      tx_data[0] = 0x7FU;
 8000c98:	237f      	movs	r3, #127	@ 0x7f
 8000c9a:	723b      	strb	r3, [r7, #8]
      tx_data[1] = sid;
 8000c9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000ca0:	727b      	strb	r3, [r7, #9]
      tx_data[2] = 0x22U;
 8000ca2:	2322      	movs	r3, #34	@ 0x22
 8000ca4:	72bb      	strb	r3, [r7, #10]
      CAN_SendResponse(response_id, tx_data, 3);
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	2203      	movs	r2, #3
 8000cac:	4619      	mov	r1, r3
 8000cae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000cb0:	f7ff fdd2 	bl	8000858 <CAN_SendResponse>
      UART_Log("CAN: UDS Clear DTC Failed (SPI Busy).\r\n");
 8000cb4:	4829      	ldr	r0, [pc, #164]	@ (8000d5c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000cb6:	f7ff fca1 	bl	80005fc <UART_Log>
 8000cba:	e041      	b.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }
  }

  // 3. Write Data By Identifier (0x2E) - PMIC 전압 변경 (요구사항 5, 7)
  else if (sid == UDS_WRITE_DATA_SID) {
 8000cbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000cc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cc2:	d13d      	bne.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    uint16_t data_identifier = (uint16_t)(rx_data[1] << 8) | rx_data[2];
 8000cc4:	7c7b      	ldrb	r3, [r7, #17]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	7cba      	ldrb	r2, [r7, #18]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	86fb      	strh	r3, [r7, #54]	@ 0x36
    uint16_t new_vcode = (uint16_t)(rx_data[3] << 8) | rx_data[4];
 8000cd0:	7cfb      	ldrb	r3, [r7, #19]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	7d3a      	ldrb	r2, [r7, #20]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	86bb      	strh	r3, [r7, #52]	@ 0x34

    if (data_identifier == UDS_VOUT_DID) {
 8000cdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000cde:	f24f 1290 	movw	r2, #61840	@ 0xf190
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12c      	bne.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
      if (PMIC_SetVout_Async(new_vcode) == HAL_OK) {
 8000ce6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fcc1 	bl	8000670 <PMIC_SetVout_Async>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d117      	bne.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
        // Positive Response (IT 통신 시작 성공)
        tx_data[0] = sid + 0x40U;
 8000cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000cf8:	3340      	adds	r3, #64	@ 0x40
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	723b      	strb	r3, [r7, #8]
        tx_data[1] = (uint8_t)(data_identifier >> 8);
 8000cfe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	727b      	strb	r3, [r7, #9]
        tx_data[2] = (uint8_t)(data_identifier & 0xFF);
 8000d08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	72bb      	strb	r3, [r7, #10]
        CAN_SendResponse(response_id, tx_data, 3);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2203      	movs	r2, #3
 8000d14:	4619      	mov	r1, r3
 8000d16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d18:	f7ff fd9e 	bl	8000858 <CAN_SendResponse>
        UART_Log("CAN: UDS Write Vout Change Initiated.\r\n");
 8000d1c:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000d1e:	f7ff fc6d 	bl	80005fc <UART_Log>
 8000d22:	e00d      	b.n	8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
      } else {
        // NRC 0x22 (I2C Busy)
        tx_data[0] = 0x7FU;
 8000d24:	237f      	movs	r3, #127	@ 0x7f
 8000d26:	723b      	strb	r3, [r7, #8]
        tx_data[1] = sid;
 8000d28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d2c:	727b      	strb	r3, [r7, #9]
        tx_data[2] = 0x22U;
 8000d2e:	2322      	movs	r3, #34	@ 0x22
 8000d30:	72bb      	strb	r3, [r7, #10]
        CAN_SendResponse(response_id, tx_data, 3);
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	2203      	movs	r2, #3
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000d3c:	f7ff fd8c 	bl	8000858 <CAN_SendResponse>
      }
    }
  }
}
 8000d40:	3740      	adds	r7, #64	@ 0x40
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800a394 	.word	0x0800a394
 8000d4c:	20000588 	.word	0x20000588
 8000d50:	0800a3a4 	.word	0x0800a3a4
 8000d54:	0800a3c8 	.word	0x0800a3c8
 8000d58:	0800a3f4 	.word	0x0800a3f4
 8000d5c:	0800a414 	.word	0x0800a414
 8000d60:	0800a43c 	.word	0x0800a43c

08000d64 <DTC_TestCase_WhiteBox_1>:

/**
  * @brief  White Box Test Case 1: PMIC UV Fault 발생 시 EEPROM Write 요청 검증
  */
static void DTC_TestCase_WhiteBox_1(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  UART_Log("\r\n--- TC_WB_1: PMIC UV -> EEPROM Write Test ---\r\n");
 8000d6a:	481d      	ldr	r0, [pc, #116]	@ (8000de0 <DTC_TestCase_WhiteBox_1+0x7c>)
 8000d6c:	f7ff fc46 	bl	80005fc <UART_Log>

  // 초기 상태 저장
  DTC_t initial_dtc = g_stored_dtc;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <DTC_TestCase_WhiteBox_1+0x80>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	603b      	str	r3, [r7, #0]
  // FIX: initial_dtc 선언이 line 601 오류의 원인일 수 있으나, 이 코드는 정상입니다.
  uint8_t initial_eeprom_busy = g_eeprom_busy;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <DTC_TestCase_WhiteBox_1+0x84>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]

  // 1. PMIC UV Fault 시뮬레이션: 0x07 레지스터에 UV 비트 셋팅
  uint8_t fault_07 = PMIC_BUCKA_UV_BIT_MASK;
 8000d7c:	2380      	movs	r3, #128	@ 0x80
 8000d7e:	71bb      	strb	r3, [r7, #6]
  uint8_t fault_08 = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	717b      	strb	r3, [r7, #5]

  // 2. DTC 체크 로직 실행
  DTC_CheckAndLogFaults(fault_07, fault_08);
 8000d84:	797a      	ldrb	r2, [r7, #5]
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fd9c 	bl	80008c8 <DTC_CheckAndLogFaults>

  // 3. 검증: g_stored_dtc 업데이트 확인
  if (g_stored_dtc.code == DTC_BRAKE_UV_PMIC_A && g_stored_dtc.status == 2) {
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <DTC_TestCase_WhiteBox_1+0x80>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	f243 0211 	movw	r2, #12305	@ 0x3011
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d107      	bne.n	8000dac <DTC_TestCase_WhiteBox_1+0x48>
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <DTC_TestCase_WhiteBox_1+0x80>)
 8000d9e:	789b      	ldrb	r3, [r3, #2]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d103      	bne.n	8000dac <DTC_TestCase_WhiteBox_1+0x48>
    UART_Log("  PASS: g_stored_dtc updated correctly (0x3011, Stored).\r\n");
 8000da4:	4811      	ldr	r0, [pc, #68]	@ (8000dec <DTC_TestCase_WhiteBox_1+0x88>)
 8000da6:	f7ff fc29 	bl	80005fc <UART_Log>
 8000daa:	e002      	b.n	8000db2 <DTC_TestCase_WhiteBox_1+0x4e>
  } else {
    // FIX: 이 UART_Log 호출은 snprintf를 사용하지 않으므로 too many arguments 오류와 무관합니다.
    UART_Log("  FAIL: g_stored_dtc update failed. Code=0x%X, Status=%d\r\n"); // 인자 제거 (오류 테스트용)
 8000dac:	4810      	ldr	r0, [pc, #64]	@ (8000df0 <DTC_TestCase_WhiteBox_1+0x8c>)
 8000dae:	f7ff fc25 	bl	80005fc <UART_Log>
  }

  // 4. 검증: EEPROM Write DMA 요청 확인 (g_eeprom_busy 플래그 확인)
  if (g_eeprom_busy == 1) {
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <DTC_TestCase_WhiteBox_1+0x84>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d103      	bne.n	8000dc4 <DTC_TestCase_WhiteBox_1+0x60>
    UART_Log("  PASS: EEPROM Write DMA sequence initiated (g_eeprom_busy=1).\r\n");
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <DTC_TestCase_WhiteBox_1+0x90>)
 8000dbe:	f7ff fc1d 	bl	80005fc <UART_Log>
 8000dc2:	e002      	b.n	8000dca <DTC_TestCase_WhiteBox_1+0x66>
  } else {
    UART_Log("  FAIL: EEPROM Write DMA sequence NOT initiated (g_eeprom_busy=%d).\r\n"); // 인자 제거
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <DTC_TestCase_WhiteBox_1+0x94>)
 8000dc6:	f7ff fc19 	bl	80005fc <UART_Log>
  }

  // 테스트 후 플래그 수동 초기화 (실제 DMA 완료는 콜백에서 처리되어야 함)
  g_eeprom_busy = 0;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <DTC_TestCase_WhiteBox_1+0x84>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
  g_stored_dtc = initial_dtc; // 상태 복원
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <DTC_TestCase_WhiteBox_1+0x80>)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	0800a464 	.word	0x0800a464
 8000de4:	20000588 	.word	0x20000588
 8000de8:	20000624 	.word	0x20000624
 8000dec:	0800a498 	.word	0x0800a498
 8000df0:	0800a4d4 	.word	0x0800a4d4
 8000df4:	0800a510 	.word	0x0800a510
 8000df8:	0800a554 	.word	0x0800a554

08000dfc <DTC_TestCase_BlackBox_2>:

/**
  * @brief  Black Box Test Case 2: UDS Read DTC (0x19 0x02) 요청 시 응답 검증
  */
static void DTC_TestCase_BlackBox_2(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  UART_Log("\r\n--- TC_BB_2: UDS Read (0x19 0x02) Response Test ---\r\n");
 8000e02:	4817      	ldr	r0, [pc, #92]	@ (8000e60 <DTC_TestCase_BlackBox_2+0x64>)
 8000e04:	f7ff fbfa 	bl	80005fc <UART_Log>

  // 1. 임시 Fault 주입 (DTC가 존재한다고 가정)
  DTC_t initial_dtc = g_stored_dtc; // 상태 복원을 위한 저장
 8000e08:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <DTC_TestCase_BlackBox_2+0x68>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	607b      	str	r3, [r7, #4]
  g_stored_dtc.code = DTC_BRAKE_OC_PMIC_A;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <DTC_TestCase_BlackBox_2+0x68>)
 8000e10:	f243 0212 	movw	r2, #12306	@ 0x3012
 8000e14:	801a      	strh	r2, [r3, #0]
  g_stored_dtc.status = 2; // Stored
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <DTC_TestCase_BlackBox_2+0x68>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	709a      	strb	r2, [r3, #2]
  g_stored_dtc.source_id = 1;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <DTC_TestCase_BlackBox_2+0x68>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	70da      	strb	r2, [r3, #3]

  // 2. UDS Read DTC (0x19 0x02) 메시지 시뮬레이션
  // CAN Rx 콜백이 실행되어 CAN 응답 메시지를 생성할 것입니다.

  UART_Log("  INFO: Simulating CAN Rx: 0x19 0x02...\r\n");
 8000e22:	4811      	ldr	r0, [pc, #68]	@ (8000e68 <DTC_TestCase_BlackBox_2+0x6c>)
 8000e24:	f7ff fbea 	bl	80005fc <UART_Log>
  // HAL_CAN_RxFifo0MsgPendingCallback(&hcan1); // 실제 환경에서만 호출

  // 3. 검증: DTC 상태만 확인 (CAN 송신 로직은 DTC.c/CAN_SendResponse 내부에서 확인)
  if (g_stored_dtc.code == DTC_BRAKE_OC_PMIC_A && g_stored_dtc.status == 2) {
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <DTC_TestCase_BlackBox_2+0x68>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	f243 0212 	movw	r2, #12306	@ 0x3012
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d10a      	bne.n	8000e4a <DTC_TestCase_BlackBox_2+0x4e>
 8000e34:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <DTC_TestCase_BlackBox_2+0x68>)
 8000e36:	789b      	ldrb	r3, [r3, #2]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d106      	bne.n	8000e4a <DTC_TestCase_BlackBox_2+0x4e>
    UART_Log("  PASS: Stored DTC (0x3012, Stored) confirmed before UDS processing.\r\n");
 8000e3c:	480b      	ldr	r0, [pc, #44]	@ (8000e6c <DTC_TestCase_BlackBox_2+0x70>)
 8000e3e:	f7ff fbdd 	bl	80005fc <UART_Log>
    UART_Log("  NOTE: Check UART log for 'UDS Read DTC Response Sent.' message.\r\n");
 8000e42:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <DTC_TestCase_BlackBox_2+0x74>)
 8000e44:	f7ff fbda 	bl	80005fc <UART_Log>
 8000e48:	e002      	b.n	8000e50 <DTC_TestCase_BlackBox_2+0x54>
  } else {
    UART_Log("  FAIL: Stored DTC was corrupted.\r\n");
 8000e4a:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <DTC_TestCase_BlackBox_2+0x78>)
 8000e4c:	f7ff fbd6 	bl	80005fc <UART_Log>
  }

  // 상태 복원
  g_stored_dtc = initial_dtc;
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <DTC_TestCase_BlackBox_2+0x68>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	0800a59c 	.word	0x0800a59c
 8000e64:	20000588 	.word	0x20000588
 8000e68:	0800a5d4 	.word	0x0800a5d4
 8000e6c:	0800a600 	.word	0x0800a600
 8000e70:	0800a648 	.word	0x0800a648
 8000e74:	0800a68c 	.word	0x0800a68c

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000e7e:	f001 f813 	bl	8001ea8 <HAL_Init>
  SystemClock_Config();
 8000e82:	f000 f873 	bl	8000f6c <SystemClock_Config>

  /* Peripheral Initialization */
  MX_GPIO_Init();
 8000e86:	f000 fa5f 	bl	8001348 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e8a:	f000 fa17 	bl	80012bc <MX_DMA_Init>
  MX_ADC1_Init();
 8000e8e:	f000 f8cb 	bl	8001028 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000e92:	f000 f91b 	bl	80010cc <MX_CAN1_Init>
  MX_I2C1_Init();
 8000e96:	f000 f983 	bl	80011a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e9a:	f000 f9af 	bl	80011fc <MX_SPI1_Init>
  MX_UART4_Init();
 8000e9e:	f000 f9e3 	bl	8001268 <MX_UART4_Init>

  /* USER CODE BEGIN 2 */
  // 모듈 초기화 (CS 핀 설정 등)
  CS_HIGH();
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4827      	ldr	r0, [pc, #156]	@ (8000f44 <main+0xcc>)
 8000ea8:	f003 f836 	bl	8003f18 <HAL_GPIO_WritePin>

  // CAN 시작 및 필터 설정
  HAL_CAN_Start(&hcan1);
 8000eac:	4826      	ldr	r0, [pc, #152]	@ (8000f48 <main+0xd0>)
 8000eae:	f001 fceb 	bl	8002888 <HAL_CAN_Start>
  CAN_Filter_Config();
 8000eb2:	f000 f947 	bl	8001144 <CAN_Filter_Config>
  // CAN 수신 인터럽트 활성화 (요구사항 3)
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4823      	ldr	r0, [pc, #140]	@ (8000f48 <main+0xd0>)
 8000eba:	f001 ff16 	bl	8002cea <HAL_CAN_ActivateNotification>

  // EEPROM에서 기존 DTC를 비동기적으로 읽어옴
  EEPROM_ReadDTC_DMA_IT(0x0000);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff fc96 	bl	80007f0 <EEPROM_ReadDTC_DMA_IT>

  UART_Log("System Boot Complete. Starting Main Loop (DMA/IT).\r\n");
 8000ec4:	4821      	ldr	r0, [pc, #132]	@ (8000f4c <main+0xd4>)
 8000ec6:	f7ff fb99 	bl	80005fc <UART_Log>

#if (TESTCASE == 1)
  // 요구사항 8: 테스트 케이스 실행
  DTC_TestCase_WhiteBox_1();
 8000eca:	f7ff ff4b 	bl	8000d64 <DTC_TestCase_WhiteBox_1>
  DTC_TestCase_BlackBox_2();
 8000ece:	f7ff ff95 	bl	8000dfc <DTC_TestCase_BlackBox_2>
  UART_Log("\r\n--- All Test Cases Executed ---\r\n");
 8000ed2:	481f      	ldr	r0, [pc, #124]	@ (8000f50 <main+0xd8>)
 8000ed4:	f7ff fb92 	bl	80005fc <UART_Log>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_log_tick = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  {
    // 요구사항 1: I2C -> SPI (결과) -> CAN (UDS) -> UART 순서로 동작하도록 루프 구성

    // 1) I2C: PMIC Fault 레지스터 비동기 읽기 요청 (요구사항 4)
    // PMIC 통신이 완료되면 콜백에서 DTC_CheckAndLogFaults 호출
    if (g_pmic_state == PMIC_IDLE) {
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <main+0xdc>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <main+0x72>
      PMIC_StartReadFaults_DMA_IT();
 8000ee6:	f7ff fba1 	bl	800062c <PMIC_StartReadFaults_DMA_IT>

    // 3) CAN: CAN 수신은 인터럽트로 처리 (UDS Read/Clear/Write - 요구사항 7)
    // CAN 송신은 DTC_CheckAndLogFaults 또는 UDS 응답 시 발생

    // 4) UART: 주기 로그 송출 (Polling - 요구사항 4)
    if (HAL_GetTick() - last_log_tick >= 500) // 500ms 주기
 8000eea:	f001 f843 	bl	8001f74 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ef8:	d320      	bcc.n	8000f3c <main+0xc4>
    {
      int n = snprintf((char*)g_uart_logbuf, LOG_BUF_SZ,
                       "System Cycle OK | DTC=0x%04X, st=%d | I2C st:%d | SPI busy:%d\r\n",
                       g_stored_dtc.code, g_stored_dtc.status, (int)g_pmic_state, (int)g_eeprom_busy);
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <main+0xe0>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
      int n = snprintf((char*)g_uart_logbuf, LOG_BUF_SZ,
 8000efe:	4618      	mov	r0, r3
                       g_stored_dtc.code, g_stored_dtc.status, (int)g_pmic_state, (int)g_eeprom_busy);
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <main+0xe0>)
 8000f02:	789b      	ldrb	r3, [r3, #2]
      int n = snprintf((char*)g_uart_logbuf, LOG_BUF_SZ,
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <main+0xdc>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <main+0xe4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	9101      	str	r1, [sp, #4]
 8000f18:	9200      	str	r2, [sp, #0]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <main+0xe8>)
 8000f1e:	2180      	movs	r1, #128	@ 0x80
 8000f20:	4810      	ldr	r0, [pc, #64]	@ (8000f64 <main+0xec>)
 8000f22:	f008 fcd3 	bl	80098cc <sniprintf>
 8000f26:	6038      	str	r0, [r7, #0]
      HAL_UART_Transmit(&huart4, g_uart_logbuf, (uint16_t)n, 100);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	2364      	movs	r3, #100	@ 0x64
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <main+0xec>)
 8000f30:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <main+0xf0>)
 8000f32:	f007 fae2 	bl	80084fa <HAL_UART_Transmit>
      last_log_tick = HAL_GetTick();
 8000f36:	f001 f81d 	bl	8001f74 <HAL_GetTick>
 8000f3a:	6078      	str	r0, [r7, #4]
    }

    // 비동기 통신이 주를 이루므로, 짧은 지연을 통해 다른 태스크 처리 시간을 확보
    HAL_Delay(100);
 8000f3c:	2064      	movs	r0, #100	@ 0x64
 8000f3e:	f001 f825 	bl	8001f8c <HAL_Delay>
    if (g_pmic_state == PMIC_IDLE) {
 8000f42:	e7cb      	b.n	8000edc <main+0x64>
 8000f44:	40020400 	.word	0x40020400
 8000f48:	200000c0 	.word	0x200000c0
 8000f4c:	0800a6b0 	.word	0x0800a6b0
 8000f50:	0800a6e8 	.word	0x0800a6e8
 8000f54:	20000612 	.word	0x20000612
 8000f58:	20000588 	.word	0x20000588
 8000f5c:	20000624 	.word	0x20000624
 8000f60:	0800a70c 	.word	0x0800a70c
 8000f64:	2000058c 	.word	0x2000058c
 8000f68:	20000240 	.word	0x20000240

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	@ 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2234      	movs	r2, #52	@ 0x34
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f008 fcdc 	bl	8009938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <SystemClock_Config+0xb4>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <SystemClock_Config+0xb4>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <SystemClock_Config+0xb4>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <SystemClock_Config+0xb8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001024 <SystemClock_Config+0xb8>)
 8000fb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <SystemClock_Config+0xb8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd0:	2310      	movs	r3, #16
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 fd13 	bl	8006a08 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x80>
 8000fe8:	f000 fa1a 	bl	8001420 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60bb      	str	r3, [r7, #8]
                              | RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f005 fb1e 	bl	8006648 <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xaa>
    Error_Handler();
 8001012:	f000 fa05 	bl	8001420 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	@ 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <MX_ADC1_Init>:

/**
  * @brief ADC1 Initialization Function
  */
static void MX_ADC1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	463b      	mov	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
  hadc1.Instance                   = ADC1;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0x98>)
 800103c:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <MX_ADC1_Init+0x9c>)
 800103e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8001046:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode          = DISABLE;
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <MX_ADC1_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8001052:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <MX_ADC1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <MX_ADC1_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <MX_ADC1_Init+0x98>)
 8001068:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <MX_ADC1_Init+0xa0>)
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion       = 1;
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <MX_ADC1_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_ADC1_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_ADC1_Init+0x98>)
 8001082:	2201      	movs	r2, #1
 8001084:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) { Error_Handler(); }
 8001086:	480e      	ldr	r0, [pc, #56]	@ (80010c0 <MX_ADC1_Init+0x98>)
 8001088:	f000 ffa4 	bl	8001fd4 <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0x6e>
 8001092:	f000 f9c5 	bl	8001420 <Error_Handler>

  sConfig.Channel      = ADC_CHANNEL_2;
 8001096:	2302      	movs	r3, #2
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank         = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) { Error_Handler(); }
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0x98>)
 80010a8:	f000 ffd8 	bl	800205c <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x8e>
 80010b2:	f000 f9b5 	bl	8001420 <Error_Handler>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000078 	.word	0x20000078
 80010c4:	40012000 	.word	0x40012000
 80010c8:	0f000001 	.word	0x0f000001

080010cc <MX_CAN1_Init>:

/**
  * @brief CAN1 Initialization Function
  */
static void MX_CAN1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  hcan1.Instance = CAN1;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_CAN1_Init+0x70>)
 80010d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001140 <MX_CAN1_Init+0x74>)
 80010d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_CAN1_Init+0x70>)
 80010d8:	2210      	movs	r2, #16
 80010da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_CAN1_Init+0x70>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_CAN1_Init+0x70>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_CAN1_Init+0x70>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_CAN1_Init+0x70>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_CAN1_Init+0x70>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_CAN1_Init+0x70>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_CAN1_Init+0x70>)
 8001102:	2200      	movs	r2, #0
 8001104:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <MX_CAN1_Init+0x70>)
 8001108:	2200      	movs	r2, #0
 800110a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_CAN1_Init+0x70>)
 800110e:	2200      	movs	r2, #0
 8001110:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_CAN1_Init+0x70>)
 8001114:	2200      	movs	r2, #0
 8001116:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK) { Error_Handler(); }
 8001118:	4808      	ldr	r0, [pc, #32]	@ (800113c <MX_CAN1_Init+0x70>)
 800111a:	f001 f9cd 	bl	80024b8 <HAL_CAN_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_CAN1_Init+0x5c>
 8001124:	f000 f97c 	bl	8001420 <Error_Handler>

  // CAN 인터럽트 활성화 (요구사항 3)
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2105      	movs	r1, #5
 800112c:	2014      	movs	r0, #20
 800112e:	f002 f90c 	bl	800334a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001132:	2014      	movs	r0, #20
 8001134:	f002 f925 	bl	8003382 <HAL_NVIC_EnableIRQ>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000c0 	.word	0x200000c0
 8001140:	40006400 	.word	0x40006400

08001144 <CAN_Filter_Config>:

/**
  * @brief CAN 필터 설정 (UDS 응답 ID 0x7E0 수신)
  */
static void CAN_Filter_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
  // FIX: 'CAN_FilterTypeDef' has no member named 'FilterNumber' 오류 해결을 위해 FilterBank 사용
  // FIX: 'CAN_FIFO0' undeclared 오류 해결을 위해 CAN_RX_FIFO0 사용
  CAN_FilterTypeDef sFilterConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2228      	movs	r2, #40	@ 0x28
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f008 fbf1 	bl	8009938 <memset>

  sFilterConfig.FilterBank = 0; // FilterNumber 대신 FilterBank 사용 (STM32F4)
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  // UDS Service Request ID (예시: 0x7E0)만 수신하도록 설정
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800115a:	2301      	movs	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x7E0 << 5;
 8001162:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001166:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x7E0 << 5;
 8001168:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800116c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]

  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // CAN_FIFO0 대신 CAN_RX_FIFO0 사용
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]

  sFilterConfig.FilterActivation = ENABLE;
 800117a:	2301      	movs	r3, #1
 800117c:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	@ (800119c <CAN_Filter_Config+0x58>)
 8001184:	f001 fa94 	bl	80026b0 <HAL_CAN_ConfigFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <CAN_Filter_Config+0x4e>
    Error_Handler();
 800118e:	f000 f947 	bl	8001420 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200000c0 	.word	0x200000c0

080011a0 <MX_I2C1_Init>:

/**
  * @brief I2C1 Initialization Function (PMIC 통신용)
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  hi2c1.Instance             = I2C1;
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <MX_I2C1_Init+0x54>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed      = 100000;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011ac:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <MX_I2C1_Init+0x58>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1     = 0;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2     = 0;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) { Error_Handler(); }
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011de:	f002 feb5 	bl	8003f4c <HAL_I2C_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x4c>
 80011e8:	f000 f91a 	bl	8001420 <Error_Handler>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000e8 	.word	0x200000e8
 80011f4:	40005400 	.word	0x40005400
 80011f8:	000186a0 	.word	0x000186a0

080011fc <MX_SPI1_Init>:

/**
  * @brief SPI1 Initialization Function (EEPROM 통신용)
  */
static void MX_SPI1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  hspi1.Instance               = SPI1;
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001202:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <MX_SPI1_Init+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode              = SPI_MODE_MASTER;
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001208:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800120c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction         = SPI_DIRECTION_2LINES;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity       = SPI_POLARITY_LOW; // CPOL=0
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_SPI1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase          = SPI_PHASE_1EDGE;  // CPHA=0 (25LC256 Mode 0,0)
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS               = SPI_NSS_SOFT;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001230:	2208      	movs	r2, #8
 8001232:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode            = SPI_TIMODE_DISABLE;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_SPI1_Init+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial     = 10;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_SPI1_Init+0x64>)
 8001248:	220a      	movs	r2, #10
 800124a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) { Error_Handler(); }
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_SPI1_Init+0x64>)
 800124e:	f005 fe5f 	bl	8006f10 <HAL_SPI_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_SPI1_Init+0x60>
 8001258:	f000 f8e2 	bl	8001420 <Error_Handler>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000190 	.word	0x20000190
 8001264:	40013000 	.word	0x40013000

08001268 <MX_UART4_Init>:

/**
  * @brief UART4 Initialization Function (Log용)
  */
static void MX_UART4_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  huart4.Instance        = UART4;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_UART4_Init+0x4c>)
 800126e:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <MX_UART4_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate   = 115200;
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <MX_UART4_Init+0x4c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_UART4_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits   = UART_STOPBITS_1;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_UART4_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity     = UART_PARITY_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <MX_UART4_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode       = UART_MODE_TX_RX;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_UART4_Init+0x4c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <MX_UART4_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_UART4_Init+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK) { Error_Handler(); }
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_UART4_Init+0x4c>)
 80012a0:	f007 f8de 	bl	8008460 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_UART4_Init+0x46>
 80012aa:	f000 f8b9 	bl	8001420 <Error_Handler>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000240 	.word	0x20000240
 80012b8:	40004c00 	.word	0x40004c00

080012bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_DMA_Init+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001344 <MX_DMA_Init+0x88>)
 80012cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_DMA_Init+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_DMA_Init+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <MX_DMA_Init+0x88>)
 80012e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <MX_DMA_Init+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  // DMA1 Stream 6: I2C1 Tx
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2011      	movs	r0, #17
 8001300:	f002 f823 	bl	800334a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001304:	2011      	movs	r0, #17
 8001306:	f002 f83c 	bl	8003382 <HAL_NVIC_EnableIRQ>

  // DMA1 Stream 0: I2C1 Rx
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	200b      	movs	r0, #11
 8001310:	f002 f81b 	bl	800334a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001314:	200b      	movs	r0, #11
 8001316:	f002 f834 	bl	8003382 <HAL_NVIC_EnableIRQ>

  // DMA2 Stream 3: SPI1 Tx
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	203b      	movs	r0, #59	@ 0x3b
 8001320:	f002 f813 	bl	800334a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001324:	203b      	movs	r0, #59	@ 0x3b
 8001326:	f002 f82c 	bl	8003382 <HAL_NVIC_EnableIRQ>

  // DMA2 Stream 2: SPI1 Rx
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	203a      	movs	r0, #58	@ 0x3a
 8001330:	f002 f80b 	bl	800334a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001334:	203a      	movs	r0, #58	@ 0x3a
 8001336:	f002 f824 	bl	8003382 <HAL_NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOF_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a2c      	ldr	r2, [pc, #176]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001368:	f043 0320 	orr.w	r3, r3, #32
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <MX_GPIO_Init+0xd0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a17      	ldr	r2, [pc, #92]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a10      	ldr	r2, [pc, #64]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  // PB0: EEPROM CS
  HAL_GPIO_WritePin(EEPROM_CS_PORT, EEPROM_CS_PIN, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2101      	movs	r1, #1
 80013ee:	480b      	ldr	r0, [pc, #44]	@ (800141c <MX_GPIO_Init+0xd4>)
 80013f0:	f002 fd92 	bl	8003f18 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = EEPROM_CS_PIN;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EEPROM_CS_PORT, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <MX_GPIO_Init+0xd4>)
 800140c:	f002 fbf0 	bl	8003bf0 <HAL_GPIO_Init>
}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	@ 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40020400 	.word	0x40020400

08001420 <Error_Handler>:
/**
  * @brief  Error Handler
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  __disable_irq();
  while (1) { }
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <Error_Handler+0x8>

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_MspInit+0x54>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	4a11      	ldr	r2, [pc, #68]	@ (8001480 <HAL_MspInit+0x54>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001440:	6453      	str	r3, [r2, #68]	@ 0x44
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_MspInit+0x54>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_MspInit+0x54>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <HAL_MspInit+0x54>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	@ 0x40
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_MspInit+0x54>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	210f      	movs	r1, #15
 800146e:	f06f 0001 	mvn.w	r0, #1
 8001472:	f001 ff6a 	bl	800334a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <HAL_ADC_MspInit+0x7c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d127      	bne.n	80014f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <HAL_ADC_MspInit+0x80>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <HAL_ADC_MspInit+0x80>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b6:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <HAL_ADC_MspInit+0x80>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_ADC_MspInit+0x80>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001504 <HAL_ADC_MspInit+0x80>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_ADC_MspInit+0x80>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014de:	2304      	movs	r3, #4
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e2:	2303      	movs	r3, #3
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	@ (8001508 <HAL_ADC_MspInit+0x84>)
 80014f2:	f002 fb7d 	bl	8003bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	@ 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40012000 	.word	0x40012000
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000

0800150c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a21      	ldr	r2, [pc, #132]	@ (80015b0 <HAL_CAN_MspInit+0xa4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d13b      	bne.n	80015a6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <HAL_CAN_MspInit+0xa8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <HAL_CAN_MspInit+0xa8>)
 8001538:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_CAN_MspInit+0xa8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_CAN_MspInit+0xa8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <HAL_CAN_MspInit+0xa8>)
 8001554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_CAN_MspInit+0xa8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001566:	2303      	movs	r3, #3
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001576:	2309      	movs	r3, #9
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <HAL_CAN_MspInit+0xac>)
 8001582:	f002 fb35 	bl	8003bf0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2105      	movs	r1, #5
 800158a:	2013      	movs	r0, #19
 800158c:	f001 fedd 	bl	800334a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001590:	2013      	movs	r0, #19
 8001592:	f001 fef6 	bl	8003382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	2014      	movs	r0, #20
 800159c:	f001 fed5 	bl	800334a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015a0:	2014      	movs	r0, #20
 80015a2:	f001 feee 	bl	8003382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40006400 	.word	0x40006400
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021800 	.word	0x40021800

080015bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	@ 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a9c      	ldr	r2, [pc, #624]	@ (800184c <HAL_I2C_MspInit+0x290>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	f040 809b 	bne.w	8001716 <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
 80015e4:	4b9a      	ldr	r3, [pc, #616]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	4a99      	ldr	r2, [pc, #612]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f0:	4b97      	ldr	r3, [pc, #604]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fc:	23c0      	movs	r3, #192	@ 0xc0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001600:	2312      	movs	r3, #18
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160c:	2304      	movs	r3, #4
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	488f      	ldr	r0, [pc, #572]	@ (8001854 <HAL_I2C_MspInit+0x298>)
 8001618:	f002 faea 	bl	8003bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	4b8b      	ldr	r3, [pc, #556]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	4a8a      	ldr	r2, [pc, #552]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 8001626:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800162a:	6413      	str	r3, [r2, #64]	@ 0x40
 800162c:	4b88      	ldr	r3, [pc, #544]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001638:	4b87      	ldr	r3, [pc, #540]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 800163a:	4a88      	ldr	r2, [pc, #544]	@ (800185c <HAL_I2C_MspInit+0x2a0>)
 800163c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800163e:	4b86      	ldr	r3, [pc, #536]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 8001640:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001644:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001646:	4b84      	ldr	r3, [pc, #528]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b82      	ldr	r3, [pc, #520]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b81      	ldr	r3, [pc, #516]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 8001654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001658:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165a:	4b7f      	ldr	r3, [pc, #508]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001660:	4b7d      	ldr	r3, [pc, #500]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001666:	4b7c      	ldr	r3, [pc, #496]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800166c:	4b7a      	ldr	r3, [pc, #488]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 800166e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001672:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001674:	4b78      	ldr	r3, [pc, #480]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800167a:	4877      	ldr	r0, [pc, #476]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 800167c:	f001 fe9c 	bl	80033b8 <HAL_DMA_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001686:	f7ff fecb 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a72      	ldr	r2, [pc, #456]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 800168e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001690:	4a71      	ldr	r2, [pc, #452]	@ (8001858 <HAL_I2C_MspInit+0x29c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001696:	4b72      	ldr	r3, [pc, #456]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 8001698:	4a72      	ldr	r2, [pc, #456]	@ (8001864 <HAL_I2C_MspInit+0x2a8>)
 800169a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800169c:	4b70      	ldr	r3, [pc, #448]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 800169e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016a2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016a6:	2240      	movs	r2, #64	@ 0x40
 80016a8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b8:	4b69      	ldr	r3, [pc, #420]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016be:	4b68      	ldr	r3, [pc, #416]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80016c4:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016ca:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016d0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d2:	4b63      	ldr	r3, [pc, #396]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80016d8:	4861      	ldr	r0, [pc, #388]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016da:	f001 fe6d 	bl	80033b8 <HAL_DMA_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 80016e4:	f7ff fe9c 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001860 <HAL_I2C_MspInit+0x2a4>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2105      	movs	r1, #5
 80016f8:	201f      	movs	r0, #31
 80016fa:	f001 fe26 	bl	800334a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016fe:	201f      	movs	r0, #31
 8001700:	f001 fe3f 	bl	8003382 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2105      	movs	r1, #5
 8001708:	2020      	movs	r0, #32
 800170a:	f001 fe1e 	bl	800334a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800170e:	2020      	movs	r0, #32
 8001710:	f001 fe37 	bl	8003382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001714:	e095      	b.n	8001842 <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a53      	ldr	r2, [pc, #332]	@ (8001868 <HAL_I2C_MspInit+0x2ac>)
 800171c:	4293      	cmp	r3, r2
 800171e:	f040 8090 	bne.w	8001842 <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b4a      	ldr	r3, [pc, #296]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a49      	ldr	r2, [pc, #292]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b47      	ldr	r3, [pc, #284]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800173e:	2303      	movs	r3, #3
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001742:	2312      	movs	r3, #18
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800174e:	2304      	movs	r3, #4
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	4844      	ldr	r0, [pc, #272]	@ (800186c <HAL_I2C_MspInit+0x2b0>)
 800175a:	f002 fa49 	bl	8003bf0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b3b      	ldr	r3, [pc, #236]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a3a      	ldr	r2, [pc, #232]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 8001768:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <HAL_I2C_MspInit+0x294>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800177a:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 800177c:	4a3d      	ldr	r2, [pc, #244]	@ (8001874 <HAL_I2C_MspInit+0x2b8>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001780:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 8001782:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001786:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001788:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 8001796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800179a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179c:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a2:	4b33      	ldr	r3, [pc, #204]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80017ba:	482d      	ldr	r0, [pc, #180]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 80017bc:	f001 fdfc 	bl	80033b8 <HAL_DMA_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 80017c6:	f7ff fe2b 	bl	8001420 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a28      	ldr	r2, [pc, #160]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 80017ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80017d0:	4a27      	ldr	r2, [pc, #156]	@ (8001870 <HAL_I2C_MspInit+0x2b4>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80017d6:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 80017d8:	4a28      	ldr	r2, [pc, #160]	@ (800187c <HAL_I2C_MspInit+0x2c0>)
 80017da:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80017dc:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 80017de:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80017e2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e4:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 80017e6:	2240      	movs	r2, #64	@ 0x40
 80017e8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ea:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017f0:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 80017f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001804:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800180a:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001816:	4818      	ldr	r0, [pc, #96]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 8001818:	f001 fdce 	bl	80033b8 <HAL_DMA_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 8001822:	f7ff fdfd 	bl	8001420 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a13      	ldr	r2, [pc, #76]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 800182a:	635a      	str	r2, [r3, #52]	@ 0x34
 800182c:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <HAL_I2C_MspInit+0x2bc>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2105      	movs	r1, #5
 8001836:	2021      	movs	r0, #33	@ 0x21
 8001838:	f001 fd87 	bl	800334a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800183c:	2021      	movs	r0, #33	@ 0x21
 800183e:	f001 fda0 	bl	8003382 <HAL_NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3730      	adds	r7, #48	@ 0x30
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40005400 	.word	0x40005400
 8001850:	40023800 	.word	0x40023800
 8001854:	40020400 	.word	0x40020400
 8001858:	20000284 	.word	0x20000284
 800185c:	40026010 	.word	0x40026010
 8001860:	20000344 	.word	0x20000344
 8001864:	400260a0 	.word	0x400260a0
 8001868:	40005800 	.word	0x40005800
 800186c:	40021400 	.word	0x40021400
 8001870:	200002e4 	.word	0x200002e4
 8001874:	40026040 	.word	0x40026040
 8001878:	200003a4 	.word	0x200003a4
 800187c:	400260b8 	.word	0x400260b8

08001880 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	@ 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4a      	ldr	r2, [pc, #296]	@ (80019c8 <HAL_SPI_MspInit+0x148>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	f040 80a0 	bne.w	80019e4 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	4b48      	ldr	r3, [pc, #288]	@ (80019cc <HAL_SPI_MspInit+0x14c>)
 80018aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ac:	4a47      	ldr	r2, [pc, #284]	@ (80019cc <HAL_SPI_MspInit+0x14c>)
 80018ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b4:	4b45      	ldr	r3, [pc, #276]	@ (80019cc <HAL_SPI_MspInit+0x14c>)
 80018b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	4b41      	ldr	r3, [pc, #260]	@ (80019cc <HAL_SPI_MspInit+0x14c>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c8:	4a40      	ldr	r2, [pc, #256]	@ (80019cc <HAL_SPI_MspInit+0x14c>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d0:	4b3e      	ldr	r3, [pc, #248]	@ (80019cc <HAL_SPI_MspInit+0x14c>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018dc:	23e0      	movs	r3, #224	@ 0xe0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ec:	2305      	movs	r3, #5
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4836      	ldr	r0, [pc, #216]	@ (80019d0 <HAL_SPI_MspInit+0x150>)
 80018f8:	f002 f97a 	bl	8003bf0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80018fc:	4b35      	ldr	r3, [pc, #212]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 80018fe:	4a36      	ldr	r2, [pc, #216]	@ (80019d8 <HAL_SPI_MspInit+0x158>)
 8001900:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001902:	4b34      	ldr	r3, [pc, #208]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001904:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001908:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190a:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b30      	ldr	r3, [pc, #192]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191e:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 800192c:	2200      	movs	r2, #0
 800192e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001930:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800193c:	4825      	ldr	r0, [pc, #148]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 800193e:	f001 fd3b 	bl	80033b8 <HAL_DMA_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001948:	f7ff fd6a 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001950:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001952:	4a20      	ldr	r2, [pc, #128]	@ (80019d4 <HAL_SPI_MspInit+0x154>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001958:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 800195a:	4a21      	ldr	r2, [pc, #132]	@ (80019e0 <HAL_SPI_MspInit+0x160>)
 800195c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 8001960:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001964:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 8001968:	2240      	movs	r2, #64	@ 0x40
 800196a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 8001974:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001978:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001998:	4810      	ldr	r0, [pc, #64]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 800199a:	f001 fd0d 	bl	80033b8 <HAL_DMA_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80019a4:	f7ff fd3c 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a0c      	ldr	r2, [pc, #48]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 80019ac:	649a      	str	r2, [r3, #72]	@ 0x48
 80019ae:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <HAL_SPI_MspInit+0x15c>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2105      	movs	r1, #5
 80019b8:	2023      	movs	r0, #35	@ 0x23
 80019ba:	f001 fcc6 	bl	800334a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019be:	2023      	movs	r0, #35	@ 0x23
 80019c0:	f001 fcdf 	bl	8003382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019c4:	e0c1      	b.n	8001b4a <HAL_SPI_MspInit+0x2ca>
 80019c6:	bf00      	nop
 80019c8:	40013000 	.word	0x40013000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	20000404 	.word	0x20000404
 80019d8:	40026410 	.word	0x40026410
 80019dc:	200004c4 	.word	0x200004c4
 80019e0:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a5a      	ldr	r2, [pc, #360]	@ (8001b54 <HAL_SPI_MspInit+0x2d4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	f040 80ad 	bne.w	8001b4a <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	4b58      	ldr	r3, [pc, #352]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	4a57      	ldr	r2, [pc, #348]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 80019fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a00:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	4a50      	ldr	r2, [pc, #320]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	4a49      	ldr	r2, [pc, #292]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a38:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <HAL_SPI_MspInit+0x2d8>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a44:	230c      	movs	r3, #12
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a54:	2305      	movs	r3, #5
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	483f      	ldr	r0, [pc, #252]	@ (8001b5c <HAL_SPI_MspInit+0x2dc>)
 8001a60:	f002 f8c6 	bl	8003bf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a76:	2305      	movs	r3, #5
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4837      	ldr	r0, [pc, #220]	@ (8001b60 <HAL_SPI_MspInit+0x2e0>)
 8001a82:	f002 f8b5 	bl	8003bf0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001a86:	4b37      	ldr	r3, [pc, #220]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001a88:	4a37      	ldr	r2, [pc, #220]	@ (8001b68 <HAL_SPI_MspInit+0x2e8>)
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001a8c:	4b35      	ldr	r3, [pc, #212]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a92:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a98:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001aa0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aa4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001abe:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001ac4:	4827      	ldr	r0, [pc, #156]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001ac6:	f001 fc77 	bl	80033b8 <HAL_DMA_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8001ad0:	f7ff fca6 	bl	8001420 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a23      	ldr	r2, [pc, #140]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001ad8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ada:	4a22      	ldr	r2, [pc, #136]	@ (8001b64 <HAL_SPI_MspInit+0x2e4>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001ae2:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <HAL_SPI_MspInit+0x2f0>)
 8001ae4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001aee:	2240      	movs	r2, #64	@ 0x40
 8001af0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001afe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b1e:	4813      	ldr	r0, [pc, #76]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001b20:	f001 fc4a 	bl	80033b8 <HAL_DMA_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 8001b2a:	f7ff fc79 	bl	8001420 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001b32:	649a      	str	r2, [r3, #72]	@ 0x48
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <HAL_SPI_MspInit+0x2ec>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	2024      	movs	r0, #36	@ 0x24
 8001b40:	f001 fc03 	bl	800334a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b44:	2024      	movs	r0, #36	@ 0x24
 8001b46:	f001 fc1c 	bl	8003382 <HAL_NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3730      	adds	r7, #48	@ 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40003800 	.word	0x40003800
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020400 	.word	0x40020400
 8001b64:	20000464 	.word	0x20000464
 8001b68:	40026058 	.word	0x40026058
 8001b6c:	20000524 	.word	0x20000524
 8001b70:	40026070 	.word	0x40026070

08001b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a25      	ldr	r2, [pc, #148]	@ (8001c28 <HAL_UART_MspInit+0xb4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d144      	bne.n	8001c20 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <HAL_UART_MspInit+0xb8>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a23      	ldr	r2, [pc, #140]	@ (8001c2c <HAL_UART_MspInit+0xb8>)
 8001ba0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_UART_MspInit+0xb8>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_UART_MspInit+0xb8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a1c      	ldr	r2, [pc, #112]	@ (8001c2c <HAL_UART_MspInit+0xb8>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_UART_MspInit+0xb8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bde:	2308      	movs	r3, #8
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4811      	ldr	r0, [pc, #68]	@ (8001c30 <HAL_UART_MspInit+0xbc>)
 8001bea:	f002 f801 	bl	8003bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001c00:	230b      	movs	r3, #11
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4809      	ldr	r0, [pc, #36]	@ (8001c30 <HAL_UART_MspInit+0xbc>)
 8001c0c:	f001 fff0 	bl	8003bf0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2105      	movs	r1, #5
 8001c14:	2034      	movs	r0, #52	@ 0x34
 8001c16:	f001 fb98 	bl	800334a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c1a:	2034      	movs	r0, #52	@ 0x34
 8001c1c:	f001 fbb1 	bl	8003382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	@ 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40004c00 	.word	0x40004c00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000

08001c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <NMI_Handler+0x4>

08001c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6e:	f000 f96d 	bl	8001f4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c72:	f007 fd9f 	bl	80097b4 <xTaskGetSchedulerState>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d001      	beq.n	8001c80 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c7c:	f007 fe04 	bl	8009888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <DMA1_Stream0_IRQHandler+0x10>)
 8001c8a:	f001 fd2d 	bl	80036e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000284 	.word	0x20000284

08001c98 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <DMA1_Stream2_IRQHandler+0x10>)
 8001c9e:	f001 fd23 	bl	80036e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200002e4 	.word	0x200002e4

08001cac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <DMA1_Stream3_IRQHandler+0x10>)
 8001cb2:	f001 fd19 	bl	80036e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000464 	.word	0x20000464

08001cc0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001cc4:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <DMA1_Stream4_IRQHandler+0x10>)
 8001cc6:	f001 fd0f 	bl	80036e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000524 	.word	0x20000524

08001cd4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <DMA1_Stream6_IRQHandler+0x10>)
 8001cda:	f001 fd05 	bl	80036e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000344 	.word	0x20000344

08001ce8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cec:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <CAN1_TX_IRQHandler+0x10>)
 8001cee:	f001 f822 	bl	8002d36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200000c0 	.word	0x200000c0

08001cfc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <CAN1_RX0_IRQHandler+0x10>)
 8001d02:	f001 f818 	bl	8002d36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200000c0 	.word	0x200000c0

08001d10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <I2C1_EV_IRQHandler+0x10>)
 8001d16:	f002 fca3 	bl	8004660 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200000e8 	.word	0x200000e8

08001d24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <I2C1_ER_IRQHandler+0x10>)
 8001d2a:	f002 fe0a 	bl	8004942 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000e8 	.word	0x200000e8

08001d38 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <I2C2_EV_IRQHandler+0x10>)
 8001d3e:	f002 fc8f 	bl	8004660 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000013c 	.word	0x2000013c

08001d4c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <SPI1_IRQHandler+0x10>)
 8001d52:	f005 ffd5 	bl	8007d00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000190 	.word	0x20000190

08001d60 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <SPI2_IRQHandler+0x10>)
 8001d66:	f005 ffcb 	bl	8007d00 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200001e8 	.word	0x200001e8

08001d74 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <DMA1_Stream7_IRQHandler+0x10>)
 8001d7a:	f001 fcb5 	bl	80036e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200003a4 	.word	0x200003a4

08001d88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <UART4_IRQHandler+0x10>)
 8001d8e:	f006 fc47 	bl	8008620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000240 	.word	0x20000240

08001d9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <DMA2_Stream0_IRQHandler+0x10>)
 8001da2:	f001 fca1 	bl	80036e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000404 	.word	0x20000404

08001db0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <DMA2_Stream3_IRQHandler+0x10>)
 8001db6:	f001 fc97 	bl	80036e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200004c4 	.word	0x200004c4

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f007 fda8 	bl	8009948 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	@ (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20050000 	.word	0x20050000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	20000628 	.word	0x20000628
 8001e2c:	20000c08 	.word	0x20000c08

08001e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <SystemInit+0x20>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e3a:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <SystemInit+0x20>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5a:	490e      	ldr	r1, [pc, #56]	@ (8001e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e70:	4c0b      	ldr	r4, [pc, #44]	@ (8001ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e7e:	f7ff ffd7 	bl	8001e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f007 fd67 	bl	8009954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7fe fff7 	bl	8000e78 <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e8c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e98:	0800a7b0 	.word	0x0800a7b0
  ldr r2, =_sbss
 8001e9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ea0:	20000c04 	.word	0x20000c04

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <HAL_Init+0x40>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <HAL_Init+0x40>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <HAL_Init+0x40>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f001 fa2f 	bl	8003334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	200f      	movs	r0, #15
 8001ed8:	f000 f808 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f7ff faa6 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <HAL_InitTick+0x54>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_InitTick+0x58>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fa47 	bl	800339e <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f001 fa0f 	bl	800334a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <HAL_InitTick+0x5c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	2000062c 	.word	0x2000062c

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	2000062c 	.word	0x2000062c

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008

08001fd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e033      	b.n	8002052 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fa46 	bl	8001484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800201a:	f023 0302 	bic.w	r3, r3, #2
 800201e:	f043 0202 	orr.w	r2, r3, #2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f94a 	bl	80022c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	@ 0x40
 8002042:	e001      	b.n	8002048 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1c>
 8002074:	2302      	movs	r3, #2
 8002076:	e113      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x244>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d925      	bls.n	80020d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	3b1e      	subs	r3, #30
 800209e:	2207      	movs	r2, #7
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43da      	mvns	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	400a      	ands	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68d9      	ldr	r1, [r3, #12]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	4603      	mov	r3, r0
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4403      	add	r3, r0
 80020c6:	3b1e      	subs	r3, #30
 80020c8:	409a      	lsls	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	e022      	b.n	800211a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	2207      	movs	r2, #7
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	4603      	mov	r3, r0
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4403      	add	r3, r0
 8002110:	409a      	lsls	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d824      	bhi.n	800216c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b05      	subs	r3, #5
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b05      	subs	r3, #5
 800215e:	fa00 f203 	lsl.w	r2, r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	635a      	str	r2, [r3, #52]	@ 0x34
 800216a:	e04c      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b0c      	cmp	r3, #12
 8002172:	d824      	bhi.n	80021be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b23      	subs	r3, #35	@ 0x23
 8002186:	221f      	movs	r2, #31
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43da      	mvns	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	400a      	ands	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b23      	subs	r3, #35	@ 0x23
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80021bc:	e023      	b.n	8002206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b41      	subs	r3, #65	@ 0x41
 80021d0:	221f      	movs	r2, #31
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b41      	subs	r3, #65	@ 0x41
 80021fa:	fa00 f203 	lsl.w	r2, r0, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002206:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <HAL_ADC_ConfigChannel+0x250>)
 8002208:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a28      	ldr	r2, [pc, #160]	@ (80022b0 <HAL_ADC_ConfigChannel+0x254>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d10f      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1d8>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b12      	cmp	r3, #18
 800221a:	d10b      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1d      	ldr	r2, [pc, #116]	@ (80022b0 <HAL_ADC_ConfigChannel+0x254>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d12b      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x23a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1c      	ldr	r2, [pc, #112]	@ (80022b4 <HAL_ADC_ConfigChannel+0x258>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d003      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x1f4>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b11      	cmp	r3, #17
 800224e:	d122      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <HAL_ADC_ConfigChannel+0x258>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002272:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <HAL_ADC_ConfigChannel+0x260>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0c9a      	lsrs	r2, r3, #18
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002288:	e002      	b.n	8002290 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3b01      	subs	r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f9      	bne.n	800228a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40012300 	.word	0x40012300
 80022b0:	40012000 	.word	0x40012000
 80022b4:	10000012 	.word	0x10000012
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c8:	4b79      	ldr	r3, [pc, #484]	@ (80024b0 <ADC_Init+0x1f0>)
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	021a      	lsls	r2, r3, #8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800233a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6899      	ldr	r1, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002352:	4a58      	ldr	r2, [pc, #352]	@ (80024b4 <ADC_Init+0x1f4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d022      	beq.n	800239e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002366:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e00f      	b.n	80023be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0202 	bic.w	r2, r2, #2
 80023cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7e1b      	ldrb	r3, [r3, #24]
 80023d8:	005a      	lsls	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800240a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	3b01      	subs	r3, #1
 8002418:	035a      	lsls	r2, r3, #13
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e007      	b.n	8002434 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002432:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	3b01      	subs	r3, #1
 8002450:	051a      	lsls	r2, r3, #20
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6899      	ldr	r1, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002476:	025a      	lsls	r2, r3, #9
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800248e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	029a      	lsls	r2, r3, #10
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40012300 	.word	0x40012300
 80024b4:	0f000001 	.word	0x0f000001

080024b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0ed      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff f818 	bl	800150c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ec:	f7ff fd42 	bl	8001f74 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024f2:	e012      	b.n	800251a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f4:	f7ff fd3e 	bl	8001f74 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b0a      	cmp	r3, #10
 8002500:	d90b      	bls.n	800251a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2205      	movs	r2, #5
 8002512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0c5      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0e5      	beq.n	80024f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0202 	bic.w	r2, r2, #2
 8002536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002538:	f7ff fd1c 	bl	8001f74 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800253e:	e012      	b.n	8002566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002540:	f7ff fd18 	bl	8001f74 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b0a      	cmp	r3, #10
 800254c:	d90b      	bls.n	8002566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2205      	movs	r2, #5
 800255e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e09f      	b.n	80026a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e5      	bne.n	8002540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7e1b      	ldrb	r3, [r3, #24]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e007      	b.n	800259e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7e5b      	ldrb	r3, [r3, #25]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d108      	bne.n	80025b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7e9b      	ldrb	r3, [r3, #26]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d108      	bne.n	80025e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e007      	b.n	80025f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0220 	bic.w	r2, r2, #32
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7edb      	ldrb	r3, [r3, #27]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d108      	bne.n	800260c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0210 	bic.w	r2, r2, #16
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e007      	b.n	800261c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0210 	orr.w	r2, r2, #16
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7f1b      	ldrb	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d108      	bne.n	8002636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e007      	b.n	8002646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0208 	bic.w	r2, r2, #8
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7f5b      	ldrb	r3, [r3, #29]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d108      	bne.n	8002660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e007      	b.n	8002670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	ea42 0103 	orr.w	r1, r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d003      	beq.n	80026d6 <HAL_CAN_ConfigFilter+0x26>
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	f040 80c7 	bne.w	8002864 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a69      	ldr	r2, [pc, #420]	@ (8002880 <HAL_CAN_ConfigFilter+0x1d0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d001      	beq.n	80026e4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80026e0:	4b68      	ldr	r3, [pc, #416]	@ (8002884 <HAL_CAN_ConfigFilter+0x1d4>)
 80026e2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	4a63      	ldr	r2, [pc, #396]	@ (8002884 <HAL_CAN_ConfigFilter+0x1d4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002702:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	431a      	orrs	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2201      	movs	r2, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d123      	bne.n	8002792 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800276c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3248      	adds	r2, #72	@ 0x48
 8002772:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002786:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002788:	6979      	ldr	r1, [r7, #20]
 800278a:	3348      	adds	r3, #72	@ 0x48
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d122      	bne.n	80027e0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3248      	adds	r2, #72	@ 0x48
 80027c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027d6:	6979      	ldr	r1, [r7, #20]
 80027d8:	3348      	adds	r3, #72	@ 0x48
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80027fa:	e007      	b.n	800280c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	431a      	orrs	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002826:	e007      	b.n	8002838 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	431a      	orrs	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	431a      	orrs	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002856:	f023 0201 	bic.w	r2, r3, #1
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e006      	b.n	8002872 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40006c00 	.word	0x40006c00
 8002884:	40006400 	.word	0x40006400

08002888 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d12e      	bne.n	80028fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028b4:	f7ff fb5e 	bl	8001f74 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ba:	e012      	b.n	80028e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028bc:	f7ff fb5a 	bl	8001f74 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b0a      	cmp	r3, #10
 80028c8:	d90b      	bls.n	80028e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2205      	movs	r2, #5
 80028da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e012      	b.n	8002908 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e5      	bne.n	80028bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e006      	b.n	8002908 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002924:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d003      	beq.n	800293c <HAL_CAN_AddTxMessage+0x2c>
 8002934:	7ffb      	ldrb	r3, [r7, #31]
 8002936:	2b02      	cmp	r3, #2
 8002938:	f040 80b8 	bne.w	8002aac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800294c:	2b00      	cmp	r3, #0
 800294e:	d105      	bne.n	800295c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80a0 	beq.w	8002a9c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	0e1b      	lsrs	r3, r3, #24
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d907      	bls.n	800297c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e09e      	b.n	8002aba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800297c:	2201      	movs	r2, #1
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	409a      	lsls	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	6809      	ldr	r1, [r1, #0]
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3318      	adds	r3, #24
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	440b      	add	r3, r1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e00f      	b.n	80029ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ba:	68f9      	ldr	r1, [r7, #12]
 80029bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3318      	adds	r3, #24
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	440b      	add	r3, r1
 80029c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3318      	adds	r3, #24
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	440b      	add	r3, r1
 80029da:	3304      	adds	r3, #4
 80029dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	7d1b      	ldrb	r3, [r3, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d111      	bne.n	8002a0a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3318      	adds	r3, #24
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6811      	ldr	r1, [r2, #0]
 80029fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3318      	adds	r3, #24
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	440b      	add	r3, r1
 8002a06:	3304      	adds	r3, #4
 8002a08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3307      	adds	r3, #7
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	061a      	lsls	r2, r3, #24
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3306      	adds	r3, #6
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3305      	adds	r3, #5
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	4313      	orrs	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	3204      	adds	r2, #4
 8002a2a:	7812      	ldrb	r2, [r2, #0]
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	ea43 0200 	orr.w	r2, r3, r0
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3303      	adds	r3, #3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	061a      	lsls	r2, r3, #24
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3301      	adds	r3, #1
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	4610      	mov	r0, r2
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	6811      	ldr	r1, [r2, #0]
 8002a68:	ea43 0200 	orr.w	r2, r3, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	440b      	add	r3, r1
 8002a72:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3318      	adds	r3, #24
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	4413      	add	r3, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3318      	adds	r3, #24
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	440b      	add	r3, r1
 8002a96:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e00e      	b.n	8002aba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e006      	b.n	8002aba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	@ 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ada:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d003      	beq.n	8002aea <HAL_CAN_GetRxMessage+0x24>
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	f040 80f3 	bne.w	8002cd0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10e      	bne.n	8002b0e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0e7      	b.n	8002cde <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0d8      	b.n	8002cde <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	331b      	adds	r3, #27
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4413      	add	r3, r2
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0204 	and.w	r2, r3, #4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	331b      	adds	r3, #27
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	4413      	add	r3, r2
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0d5b      	lsrs	r3, r3, #21
 8002b5a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e00b      	b.n	8002b7c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	331b      	adds	r3, #27
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4413      	add	r3, r2
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	331b      	adds	r3, #27
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	4413      	add	r3, r2
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0202 	and.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	331b      	adds	r3, #27
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	331b      	adds	r3, #27
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	331b      	adds	r3, #27
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4413      	add	r3, r2
 8002bce:	3304      	adds	r3, #4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0c1b      	lsrs	r3, r3, #16
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0a1a      	lsrs	r2, r3, #8
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	0c1a      	lsrs	r2, r3, #16
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	3302      	adds	r3, #2
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e1a      	lsrs	r2, r3, #24
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	3303      	adds	r3, #3
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3304      	adds	r3, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0a1a      	lsrs	r2, r3, #8
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	3305      	adds	r3, #5
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0c1a      	lsrs	r2, r3, #16
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	3306      	adds	r3, #6
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0e1a      	lsrs	r2, r3, #24
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	3307      	adds	r3, #7
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d108      	bne.n	8002cbc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0220 	orr.w	r2, r2, #32
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	e007      	b.n	8002ccc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e006      	b.n	8002cde <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
  }
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cfa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d002      	beq.n	8002d08 <HAL_CAN_ActivateNotification+0x1e>
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d109      	bne.n	8002d1c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6959      	ldr	r1, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e006      	b.n	8002d2a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b08a      	sub	sp, #40	@ 0x28
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d07c      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d023      	beq.n	8002dce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f983 	bl	80030a4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d9e:	e016      	b.n	8002dce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db2:	e00c      	b.n	8002dce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc6:	e002      	b.n	8002dce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f989 	bl	80030e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d024      	beq.n	8002e22 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002de0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f963 	bl	80030b8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002df2:	e016      	b.n	8002e22 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e06:	e00c      	b.n	8002e22 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1a:	e002      	b.n	8002e22 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f969 	bl	80030f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d024      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f943 	bl	80030cc <HAL_CAN_TxMailbox2CompleteCallback>
 8002e46:	e016      	b.n	8002e76 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5a:	e00c      	b.n	8002e76 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6e:	e002      	b.n	8002e76 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f949 	bl	8003108 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00c      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2210      	movs	r2, #16
 8002e98:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d006      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f930 	bl	800311c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fd fe71 	bl	8000bbc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00c      	beq.n	8002efe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2210      	movs	r2, #16
 8002efc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2208      	movs	r2, #8
 8002f18:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f912 	bl	8003144 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f8f9 	bl	8003130 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2210      	movs	r2, #16
 8002f58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8fc 	bl	8003158 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d006      	beq.n	8002f82 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8f5 	bl	800316c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d07b      	beq.n	8003084 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d072      	beq.n	800307c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d043      	beq.n	800307c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d03e      	beq.n	800307c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003004:	2b60      	cmp	r3, #96	@ 0x60
 8003006:	d02b      	beq.n	8003060 <HAL_CAN_IRQHandler+0x32a>
 8003008:	2b60      	cmp	r3, #96	@ 0x60
 800300a:	d82e      	bhi.n	800306a <HAL_CAN_IRQHandler+0x334>
 800300c:	2b50      	cmp	r3, #80	@ 0x50
 800300e:	d022      	beq.n	8003056 <HAL_CAN_IRQHandler+0x320>
 8003010:	2b50      	cmp	r3, #80	@ 0x50
 8003012:	d82a      	bhi.n	800306a <HAL_CAN_IRQHandler+0x334>
 8003014:	2b40      	cmp	r3, #64	@ 0x40
 8003016:	d019      	beq.n	800304c <HAL_CAN_IRQHandler+0x316>
 8003018:	2b40      	cmp	r3, #64	@ 0x40
 800301a:	d826      	bhi.n	800306a <HAL_CAN_IRQHandler+0x334>
 800301c:	2b30      	cmp	r3, #48	@ 0x30
 800301e:	d010      	beq.n	8003042 <HAL_CAN_IRQHandler+0x30c>
 8003020:	2b30      	cmp	r3, #48	@ 0x30
 8003022:	d822      	bhi.n	800306a <HAL_CAN_IRQHandler+0x334>
 8003024:	2b10      	cmp	r3, #16
 8003026:	d002      	beq.n	800302e <HAL_CAN_IRQHandler+0x2f8>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d005      	beq.n	8003038 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800302c:	e01d      	b.n	800306a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	f043 0308 	orr.w	r3, r3, #8
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003036:	e019      	b.n	800306c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	f043 0310 	orr.w	r3, r3, #16
 800303e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003040:	e014      	b.n	800306c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	f043 0320 	orr.w	r3, r3, #32
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800304a:	e00f      	b.n	800306c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003054:	e00a      	b.n	800306c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800305e:	e005      	b.n	800306c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003068:	e000      	b.n	800306c <HAL_CAN_IRQHandler+0x336>
            break;
 800306a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800307a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2204      	movs	r2, #4
 8003082:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f872 	bl	8003180 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800309c:	bf00      	nop
 800309e:	3728      	adds	r7, #40	@ 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a4:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <__NVIC_SetPriorityGrouping+0x44>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031b0:	4013      	ands	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031c6:	4a04      	ldr	r2, [pc, #16]	@ (80031d8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	60d3      	str	r3, [r2, #12]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e0:	4b04      	ldr	r3, [pc, #16]	@ (80031f4 <__NVIC_GetPriorityGrouping+0x18>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	f003 0307 	and.w	r3, r3, #7
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	2b00      	cmp	r3, #0
 8003208:	db0b      	blt.n	8003222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	f003 021f 	and.w	r2, r3, #31
 8003210:	4907      	ldr	r1, [pc, #28]	@ (8003230 <__NVIC_EnableIRQ+0x38>)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	2001      	movs	r0, #1
 800321a:	fa00 f202 	lsl.w	r2, r0, r2
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000e100 	.word	0xe000e100

08003234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003244:	2b00      	cmp	r3, #0
 8003246:	db0a      	blt.n	800325e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	b2da      	uxtb	r2, r3
 800324c:	490c      	ldr	r1, [pc, #48]	@ (8003280 <__NVIC_SetPriority+0x4c>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	0112      	lsls	r2, r2, #4
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	440b      	add	r3, r1
 8003258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800325c:	e00a      	b.n	8003274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4908      	ldr	r1, [pc, #32]	@ (8003284 <__NVIC_SetPriority+0x50>)
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	3b04      	subs	r3, #4
 800326c:	0112      	lsls	r2, r2, #4
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	440b      	add	r3, r1
 8003272:	761a      	strb	r2, [r3, #24]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000e100 	.word	0xe000e100
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	@ 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f1c3 0307 	rsb	r3, r3, #7
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	bf28      	it	cs
 80032a6:	2304      	movcs	r3, #4
 80032a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3304      	adds	r3, #4
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d902      	bls.n	80032b8 <NVIC_EncodePriority+0x30>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3b03      	subs	r3, #3
 80032b6:	e000      	b.n	80032ba <NVIC_EncodePriority+0x32>
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	f04f 32ff 	mov.w	r2, #4294967295
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	401a      	ands	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d0:	f04f 31ff 	mov.w	r1, #4294967295
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	43d9      	mvns	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e0:	4313      	orrs	r3, r2
         );
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3724      	adds	r7, #36	@ 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003300:	d301      	bcc.n	8003306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003302:	2301      	movs	r3, #1
 8003304:	e00f      	b.n	8003326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003306:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <SysTick_Config+0x40>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800330e:	210f      	movs	r1, #15
 8003310:	f04f 30ff 	mov.w	r0, #4294967295
 8003314:	f7ff ff8e 	bl	8003234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003318:	4b05      	ldr	r3, [pc, #20]	@ (8003330 <SysTick_Config+0x40>)
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800331e:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <SysTick_Config+0x40>)
 8003320:	2207      	movs	r2, #7
 8003322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	e000e010 	.word	0xe000e010

08003334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff29 	bl	8003194 <__NVIC_SetPriorityGrouping>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800334a:	b580      	push	{r7, lr}
 800334c:	b086      	sub	sp, #24
 800334e:	af00      	add	r7, sp, #0
 8003350:	4603      	mov	r3, r0
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800335c:	f7ff ff3e 	bl	80031dc <__NVIC_GetPriorityGrouping>
 8003360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	6978      	ldr	r0, [r7, #20]
 8003368:	f7ff ff8e 	bl	8003288 <NVIC_EncodePriority>
 800336c:	4602      	mov	r2, r0
 800336e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff5d 	bl	8003234 <__NVIC_SetPriority>
}
 800337a:	bf00      	nop
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800338c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff31 	bl	80031f8 <__NVIC_EnableIRQ>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff ffa2 	bl	80032f0 <SysTick_Config>
 80033ac:	4603      	mov	r3, r0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7fe fdd6 	bl	8001f74 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e099      	b.n	8003508 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f4:	e00f      	b.n	8003416 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033f6:	f7fe fdbd 	bl	8001f74 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b05      	cmp	r3, #5
 8003402:	d908      	bls.n	8003416 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2203      	movs	r2, #3
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e078      	b.n	8003508 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e8      	bne.n	80033f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4b38      	ldr	r3, [pc, #224]	@ (8003510 <HAL_DMA_Init+0x158>)
 8003430:	4013      	ands	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	2b04      	cmp	r3, #4
 800346e:	d107      	bne.n	8003480 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	4313      	orrs	r3, r2
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d117      	bne.n	80034da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00e      	beq.n	80034da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fb1b 	bl	8003af8 <DMA_CheckFifoParam>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2240      	movs	r2, #64	@ 0x40
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80034d6:	2301      	movs	r3, #1
 80034d8:	e016      	b.n	8003508 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fad2 	bl	8003a8c <DMA_CalcBaseAndBitshift>
 80034e8:	4603      	mov	r3, r0
 80034ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f0:	223f      	movs	r2, #63	@ 0x3f
 80034f2:	409a      	lsls	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	e010803f 	.word	0xe010803f

08003514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_DMA_Start_IT+0x26>
 8003536:	2302      	movs	r3, #2
 8003538:	e040      	b.n	80035bc <HAL_DMA_Start_IT+0xa8>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d12f      	bne.n	80035ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2202      	movs	r2, #2
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fa64 	bl	8003a30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	223f      	movs	r2, #63	@ 0x3f
 800356e:	409a      	lsls	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0216 	orr.w	r2, r2, #22
 8003582:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0208 	orr.w	r2, r2, #8
 800359a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e005      	b.n	80035ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035d2:	f7fe fccf 	bl	8001f74 <HAL_GetTick>
 80035d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d008      	beq.n	80035f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2280      	movs	r2, #128	@ 0x80
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e052      	b.n	800369c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0216 	bic.w	r2, r2, #22
 8003604:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003614:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <HAL_DMA_Abort+0x62>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0208 	bic.w	r2, r2, #8
 8003634:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003646:	e013      	b.n	8003670 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003648:	f7fe fc94 	bl	8001f74 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b05      	cmp	r3, #5
 8003654:	d90c      	bls.n	8003670 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2203      	movs	r2, #3
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e015      	b.n	800369c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e4      	bne.n	8003648 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	223f      	movs	r2, #63	@ 0x3f
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d004      	beq.n	80036c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2280      	movs	r2, #128	@ 0x80
 80036bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e00c      	b.n	80036dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2205      	movs	r2, #5
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003930 <HAL_DMA_IRQHandler+0x248>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a8e      	ldr	r2, [pc, #568]	@ (8003934 <HAL_DMA_IRQHandler+0x24c>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0a9b      	lsrs	r3, r3, #10
 8003700:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003712:	2208      	movs	r2, #8
 8003714:	409a      	lsls	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01a      	beq.n	8003754 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0204 	bic.w	r2, r2, #4
 800373a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003740:	2208      	movs	r2, #8
 8003742:	409a      	lsls	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	2201      	movs	r2, #1
 800375a:	409a      	lsls	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d012      	beq.n	800378a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003776:	2201      	movs	r2, #1
 8003778:	409a      	lsls	r2, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	2204      	movs	r2, #4
 8003790:	409a      	lsls	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	2204      	movs	r2, #4
 80037ae:	409a      	lsls	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	f043 0204 	orr.w	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c4:	2210      	movs	r2, #16
 80037c6:	409a      	lsls	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d043      	beq.n	8003858 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d03c      	beq.n	8003858 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	2210      	movs	r2, #16
 80037e4:	409a      	lsls	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d018      	beq.n	800382a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d108      	bne.n	8003818 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d024      	beq.n	8003858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
 8003816:	e01f      	b.n	8003858 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
 8003828:	e016      	b.n	8003858 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0208 	bic.w	r2, r2, #8
 8003846:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	2220      	movs	r2, #32
 800385e:	409a      	lsls	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 808f 	beq.w	8003988 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8087 	beq.w	8003988 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387e:	2220      	movs	r2, #32
 8003880:	409a      	lsls	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b05      	cmp	r3, #5
 8003890:	d136      	bne.n	8003900 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0216 	bic.w	r2, r2, #22
 80038a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x1da>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0208 	bic.w	r2, r2, #8
 80038d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	223f      	movs	r2, #63	@ 0x3f
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d07e      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
        }
        return;
 80038fe:	e079      	b.n	80039f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01d      	beq.n	800394a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10d      	bne.n	8003938 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003920:	2b00      	cmp	r3, #0
 8003922:	d031      	beq.n	8003988 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
 800392c:	e02c      	b.n	8003988 <HAL_DMA_IRQHandler+0x2a0>
 800392e:	bf00      	nop
 8003930:	20000000 	.word	0x20000000
 8003934:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d023      	beq.n	8003988 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
 8003948:	e01e      	b.n	8003988 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10f      	bne.n	8003978 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0210 	bic.w	r2, r2, #16
 8003966:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398c:	2b00      	cmp	r3, #0
 800398e:	d032      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2205      	movs	r2, #5
 80039a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d307      	bcc.n	80039d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f2      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x2cc>
 80039ce:	e000      	b.n	80039d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
 80039f2:	e000      	b.n	80039f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80039f4:	bf00      	nop
    }
  }
}
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a0a:	b2db      	uxtb	r3, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b40      	cmp	r3, #64	@ 0x40
 8003a5c:	d108      	bne.n	8003a70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a6e:	e007      	b.n	8003a80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	3b10      	subs	r3, #16
 8003a9c:	4a14      	ldr	r2, [pc, #80]	@ (8003af0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aa6:	4a13      	ldr	r2, [pc, #76]	@ (8003af4 <DMA_CalcBaseAndBitshift+0x68>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d909      	bls.n	8003ace <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	1d1a      	adds	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	659a      	str	r2, [r3, #88]	@ 0x58
 8003acc:	e007      	b.n	8003ade <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	aaaaaaab 	.word	0xaaaaaaab
 8003af4:	0800a764 	.word	0x0800a764

08003af8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11f      	bne.n	8003b52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d856      	bhi.n	8003bc6 <DMA_CheckFifoParam+0xce>
 8003b18:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <DMA_CheckFifoParam+0x28>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b43 	.word	0x08003b43
 8003b28:	08003b31 	.word	0x08003b31
 8003b2c:	08003bc7 	.word	0x08003bc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d046      	beq.n	8003bca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b40:	e043      	b.n	8003bca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b4a:	d140      	bne.n	8003bce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b50:	e03d      	b.n	8003bce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b5a:	d121      	bne.n	8003ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d837      	bhi.n	8003bd2 <DMA_CheckFifoParam+0xda>
 8003b62:	a201      	add	r2, pc, #4	@ (adr r2, 8003b68 <DMA_CheckFifoParam+0x70>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b7f 	.word	0x08003b7f
 8003b70:	08003b79 	.word	0x08003b79
 8003b74:	08003b91 	.word	0x08003b91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b7c:	e030      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d025      	beq.n	8003bd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8e:	e022      	b.n	8003bd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b98:	d11f      	bne.n	8003bda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b9e:	e01c      	b.n	8003bda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d903      	bls.n	8003bae <DMA_CheckFifoParam+0xb6>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d003      	beq.n	8003bb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bac:	e018      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb2:	e015      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc4:	e00b      	b.n	8003bde <DMA_CheckFifoParam+0xe6>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e00a      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e008      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e006      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e004      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e002      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bde:	bf00      	nop
    }
  } 
  
  return status; 
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	@ 0x24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	e165      	b.n	8003ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	f040 8154 	bne.w	8003ed2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d005      	beq.n	8003c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d130      	bne.n	8003ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c78:	2201      	movs	r2, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 0201 	and.w	r2, r3, #1
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d017      	beq.n	8003ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	2203      	movs	r2, #3
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d123      	bne.n	8003d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	08da      	lsrs	r2, r3, #3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3208      	adds	r2, #8
 8003cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	220f      	movs	r2, #15
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	08da      	lsrs	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3208      	adds	r2, #8
 8003d2e:	69b9      	ldr	r1, [r7, #24]
 8003d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0203 	and.w	r2, r3, #3
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80ae 	beq.w	8003ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ef0 <HAL_GPIO_Init+0x300>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ef0 <HAL_GPIO_Init+0x300>)
 8003d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d86:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef0 <HAL_GPIO_Init+0x300>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d92:	4a58      	ldr	r2, [pc, #352]	@ (8003ef4 <HAL_GPIO_Init+0x304>)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	3302      	adds	r3, #2
 8003d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	220f      	movs	r2, #15
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4013      	ands	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	@ (8003ef8 <HAL_GPIO_Init+0x308>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d025      	beq.n	8003e0a <HAL_GPIO_Init+0x21a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8003efc <HAL_GPIO_Init+0x30c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01f      	beq.n	8003e06 <HAL_GPIO_Init+0x216>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8003f00 <HAL_GPIO_Init+0x310>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d019      	beq.n	8003e02 <HAL_GPIO_Init+0x212>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8003f04 <HAL_GPIO_Init+0x314>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <HAL_GPIO_Init+0x20e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f08 <HAL_GPIO_Init+0x318>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00d      	beq.n	8003dfa <HAL_GPIO_Init+0x20a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4a      	ldr	r2, [pc, #296]	@ (8003f0c <HAL_GPIO_Init+0x31c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <HAL_GPIO_Init+0x206>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a49      	ldr	r2, [pc, #292]	@ (8003f10 <HAL_GPIO_Init+0x320>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_GPIO_Init+0x202>
 8003dee:	2306      	movs	r3, #6
 8003df0:	e00c      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003df2:	2307      	movs	r3, #7
 8003df4:	e00a      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003df6:	2305      	movs	r3, #5
 8003df8:	e008      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e004      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e002      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_GPIO_Init+0x21c>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f002 0203 	and.w	r2, r2, #3
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	4093      	lsls	r3, r2
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e1c:	4935      	ldr	r1, [pc, #212]	@ (8003ef4 <HAL_GPIO_Init+0x304>)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <HAL_GPIO_Init+0x324>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e4e:	4a31      	ldr	r2, [pc, #196]	@ (8003f14 <HAL_GPIO_Init+0x324>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e54:	4b2f      	ldr	r3, [pc, #188]	@ (8003f14 <HAL_GPIO_Init+0x324>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e78:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <HAL_GPIO_Init+0x324>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7e:	4b25      	ldr	r3, [pc, #148]	@ (8003f14 <HAL_GPIO_Init+0x324>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <HAL_GPIO_Init+0x324>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f14 <HAL_GPIO_Init+0x324>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ecc:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <HAL_GPIO_Init+0x324>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	f67f ae96 	bls.w	8003c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3724      	adds	r7, #36	@ 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40020800 	.word	0x40020800
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40021400 	.word	0x40021400
 8003f10:	40021800 	.word	0x40021800
 8003f14:	40013c00 	.word	0x40013c00

08003f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]
 8003f24:	4613      	mov	r3, r2
 8003f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f28:	787b      	ldrb	r3, [r7, #1]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f34:	e003      	b.n	8003f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	041a      	lsls	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	619a      	str	r2, [r3, #24]
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e12b      	b.n	80041b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fb22 	bl	80015bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	@ 0x24
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f002 fd02 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a81      	ldr	r2, [pc, #516]	@ (80041c0 <HAL_I2C_Init+0x274>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d807      	bhi.n	8003fd0 <HAL_I2C_Init+0x84>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4a80      	ldr	r2, [pc, #512]	@ (80041c4 <HAL_I2C_Init+0x278>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	bf94      	ite	ls
 8003fc8:	2301      	movls	r3, #1
 8003fca:	2300      	movhi	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e006      	b.n	8003fde <HAL_I2C_Init+0x92>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a7d      	ldr	r2, [pc, #500]	@ (80041c8 <HAL_I2C_Init+0x27c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	bf94      	ite	ls
 8003fd8:	2301      	movls	r3, #1
 8003fda:	2300      	movhi	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0e7      	b.n	80041b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a78      	ldr	r2, [pc, #480]	@ (80041cc <HAL_I2C_Init+0x280>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0c9b      	lsrs	r3, r3, #18
 8003ff0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a6a      	ldr	r2, [pc, #424]	@ (80041c0 <HAL_I2C_Init+0x274>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d802      	bhi.n	8004020 <HAL_I2C_Init+0xd4>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3301      	adds	r3, #1
 800401e:	e009      	b.n	8004034 <HAL_I2C_Init+0xe8>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	4a69      	ldr	r2, [pc, #420]	@ (80041d0 <HAL_I2C_Init+0x284>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	3301      	adds	r3, #1
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	430b      	orrs	r3, r1
 800403a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004046:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	495c      	ldr	r1, [pc, #368]	@ (80041c0 <HAL_I2C_Init+0x274>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d819      	bhi.n	8004088 <HAL_I2C_Init+0x13c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1e59      	subs	r1, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004068:	400b      	ands	r3, r1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_I2C_Init+0x138>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1e59      	subs	r1, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fbb1 f3f3 	udiv	r3, r1, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004082:	e051      	b.n	8004128 <HAL_I2C_Init+0x1dc>
 8004084:	2304      	movs	r3, #4
 8004086:	e04f      	b.n	8004128 <HAL_I2C_Init+0x1dc>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <HAL_I2C_Init+0x168>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1e58      	subs	r0, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	440b      	add	r3, r1
 800409e:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a2:	3301      	adds	r3, #1
 80040a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e012      	b.n	80040da <HAL_I2C_Init+0x18e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e58      	subs	r0, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6859      	ldr	r1, [r3, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	0099      	lsls	r1, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ca:	3301      	adds	r3, #1
 80040cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_I2C_Init+0x196>
 80040de:	2301      	movs	r3, #1
 80040e0:	e022      	b.n	8004128 <HAL_I2C_Init+0x1dc>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10e      	bne.n	8004108 <HAL_I2C_Init+0x1bc>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1e58      	subs	r0, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	440b      	add	r3, r1
 80040f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fc:	3301      	adds	r3, #1
 80040fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004106:	e00f      	b.n	8004128 <HAL_I2C_Init+0x1dc>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1e58      	subs	r0, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	0099      	lsls	r1, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	fbb0 f3f3 	udiv	r3, r0, r3
 800411e:	3301      	adds	r3, #1
 8004120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004124:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	6809      	ldr	r1, [r1, #0]
 800412c:	4313      	orrs	r3, r2
 800412e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004156:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6911      	ldr	r1, [r2, #16]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68d2      	ldr	r2, [r2, #12]
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430b      	orrs	r3, r1
 800416a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	000186a0 	.word	0x000186a0
 80041c4:	001e847f 	.word	0x001e847f
 80041c8:	003d08ff 	.word	0x003d08ff
 80041cc:	431bde83 	.word	0x431bde83
 80041d0:	10624dd3 	.word	0x10624dd3

080041d4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	4608      	mov	r0, r1
 80041de:	4611      	mov	r1, r2
 80041e0:	461a      	mov	r2, r3
 80041e2:	4603      	mov	r3, r0
 80041e4:	817b      	strh	r3, [r7, #10]
 80041e6:	460b      	mov	r3, r1
 80041e8:	813b      	strh	r3, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	f040 808e 	bne.w	800431c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004200:	4b4a      	ldr	r3, [pc, #296]	@ (800432c <HAL_I2C_Mem_Write_IT+0x158>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	4a4a      	ldr	r2, [pc, #296]	@ (8004330 <HAL_I2C_Mem_Write_IT+0x15c>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0a1a      	lsrs	r2, r3, #8
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	009a      	lsls	r2, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3b01      	subs	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d116      	bne.n	8004254 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e064      	b.n	800431e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b02      	cmp	r3, #2
 8004260:	d0db      	beq.n	800421a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_I2C_Mem_Write_IT+0x9c>
 800426c:	2302      	movs	r3, #2
 800426e:	e056      	b.n	800431e <HAL_I2C_Mem_Write_IT+0x14a>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d007      	beq.n	8004296 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0201 	orr.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042a4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2221      	movs	r2, #33	@ 0x21
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2240      	movs	r2, #64	@ 0x40
 80042b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a3a      	ldr	r2, [r7, #32]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a17      	ldr	r2, [pc, #92]	@ (8004334 <HAL_I2C_Mem_Write_IT+0x160>)
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80042d8:	897a      	ldrh	r2, [r7, #10]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80042de:	893a      	ldrh	r2, [r7, #8]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80042e4:	88fa      	ldrh	r2, [r7, #6]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042fe:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004316:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000000 	.word	0x20000000
 8004330:	14f8b589 	.word	0x14f8b589
 8004334:	ffff0000 	.word	0xffff0000

08004338 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08c      	sub	sp, #48	@ 0x30
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	4603      	mov	r3, r0
 8004348:	817b      	strh	r3, [r7, #10]
 800434a:	460b      	mov	r3, r1
 800434c:	813b      	strh	r3, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004352:	f7fd fe0f 	bl	8001f74 <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b20      	cmp	r3, #32
 8004366:	f040 8176 	bne.w	8004656 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800436a:	4b95      	ldr	r3, [pc, #596]	@ (80045c0 <HAL_I2C_Mem_Read_DMA+0x288>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	08db      	lsrs	r3, r3, #3
 8004370:	4a94      	ldr	r2, [pc, #592]	@ (80045c4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0a1a      	lsrs	r2, r3, #8
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009a      	lsls	r2, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	3b01      	subs	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d116      	bne.n	80043be <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e14c      	b.n	8004658 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d0db      	beq.n	8004384 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_I2C_Mem_Read_DMA+0xa2>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e13e      	b.n	8004658 <HAL_I2C_Mem_Read_DMA+0x320>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d007      	beq.n	8004400 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800440e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2222      	movs	r2, #34	@ 0x22
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2240      	movs	r2, #64	@ 0x40
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004430:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a62      	ldr	r2, [pc, #392]	@ (80045c8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004440:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004442:	897a      	ldrh	r2, [r7, #10]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004448:	893a      	ldrh	r2, [r7, #8]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80cc 	beq.w	80045fc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004468:	2b00      	cmp	r3, #0
 800446a:	d02d      	beq.n	80044c8 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	4a56      	ldr	r2, [pc, #344]	@ (80045cc <HAL_I2C_Mem_Read_DMA+0x294>)
 8004472:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	4a55      	ldr	r2, [pc, #340]	@ (80045d0 <HAL_I2C_Mem_Read_DMA+0x298>)
 800447a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004488:	2200      	movs	r2, #0
 800448a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004490:	2200      	movs	r2, #0
 8004492:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	2200      	movs	r2, #0
 800449a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3310      	adds	r3, #16
 80044a6:	4619      	mov	r1, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	461a      	mov	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b2:	f7ff f82f 	bl	8003514 <HAL_DMA_Start_IT>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80044bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 8087 	bne.w	80045d4 <HAL_I2C_Mem_Read_DMA+0x29c>
 80044c6:	e013      	b.n	80044f0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0b3      	b.n	8004658 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80044f0:	88f8      	ldrh	r0, [r7, #6]
 80044f2:	893a      	ldrh	r2, [r7, #8]
 80044f4:	8979      	ldrh	r1, [r7, #10]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	2323      	movs	r3, #35	@ 0x23
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	4603      	mov	r3, r0
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f001 fc6b 	bl	8005ddc <I2C_RequestMemoryRead>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d023      	beq.n	8004554 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff f8c7 	bl	80036a4 <HAL_DMA_Abort_IT>
 8004516:	4603      	mov	r3, r0
 8004518:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004520:	2200      	movs	r2, #0
 8004522:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004532:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0201 	bic.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e081      	b.n	8004658 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	2b01      	cmp	r3, #1
 800455a:	d108      	bne.n	800456e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e007      	b.n	800457e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800457c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045aa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	e049      	b.n	8004652 <HAL_I2C_Mem_Read_DMA+0x31a>
 80045be:	bf00      	nop
 80045c0:	20000000 	.word	0x20000000
 80045c4:	14f8b589 	.word	0x14f8b589
 80045c8:	ffff0000 	.word	0xffff0000
 80045cc:	08005fad 	.word	0x08005fad
 80045d0:	08006157 	.word	0x08006157
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	f043 0210 	orr.w	r2, r3, #16
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e02d      	b.n	8004658 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80045fc:	88f8      	ldrh	r0, [r7, #6]
 80045fe:	893a      	ldrh	r2, [r7, #8]
 8004600:	8979      	ldrh	r1, [r7, #10]
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	2323      	movs	r3, #35	@ 0x23
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4603      	mov	r3, r0
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f001 fbe5 	bl	8005ddc <I2C_RequestMemoryRead>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e01d      	b.n	8004658 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004640:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3728      	adds	r7, #40	@ 0x28
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004678:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004680:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004688:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b10      	cmp	r3, #16
 800468e:	d003      	beq.n	8004698 <HAL_I2C_EV_IRQHandler+0x38>
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b40      	cmp	r3, #64	@ 0x40
 8004694:	f040 80c1 	bne.w	800481a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_I2C_EV_IRQHandler+0x6e>
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80046b8:	d003      	beq.n	80046c2 <HAL_I2C_EV_IRQHandler+0x62>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046c0:	d101      	bne.n	80046c6 <HAL_I2C_EV_IRQHandler+0x66>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_I2C_EV_IRQHandler+0x68>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	f000 8132 	beq.w	8004932 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00c      	beq.n	80046f2 <HAL_I2C_EV_IRQHandler+0x92>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	0a5b      	lsrs	r3, r3, #9
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d006      	beq.n	80046f2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f001 ff94 	bl	8006612 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fd5b 	bl	80051a6 <I2C_Master_SB>
 80046f0:	e092      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_I2C_EV_IRQHandler+0xb2>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	0a5b      	lsrs	r3, r3, #9
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fdd1 	bl	80052b2 <I2C_Master_ADD10>
 8004710:	e082      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_I2C_EV_IRQHandler+0xd2>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	0a5b      	lsrs	r3, r3, #9
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fdeb 	bl	8005306 <I2C_Master_ADDR>
 8004730:	e072      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d03b      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474c:	f000 80f3 	beq.w	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	09db      	lsrs	r3, r3, #7
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00f      	beq.n	800477c <HAL_I2C_EV_IRQHandler+0x11c>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	0a9b      	lsrs	r3, r3, #10
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_I2C_EV_IRQHandler+0x11c>
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f9d5 	bl	8004b24 <I2C_MasterTransmit_TXE>
 800477a:	e04d      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80d6 	beq.w	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	0a5b      	lsrs	r3, r3, #9
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80cf 	beq.w	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004798:	7bbb      	ldrb	r3, [r7, #14]
 800479a:	2b21      	cmp	r3, #33	@ 0x21
 800479c:	d103      	bne.n	80047a6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa5c 	bl	8004c5c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047a4:	e0c7      	b.n	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b40      	cmp	r3, #64	@ 0x40
 80047aa:	f040 80c4 	bne.w	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 faca 	bl	8004d48 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b4:	e0bf      	b.n	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c4:	f000 80b7 	beq.w	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <HAL_I2C_EV_IRQHandler+0x194>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	0a9b      	lsrs	r3, r3, #10
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_I2C_EV_IRQHandler+0x194>
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fb3f 	bl	8004e70 <I2C_MasterReceive_RXNE>
 80047f2:	e011      	b.n	8004818 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 809a 	beq.w	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	0a5b      	lsrs	r3, r3, #9
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8093 	beq.w	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fbde 	bl	8004fd2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004816:	e08e      	b.n	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004818:	e08d      	b.n	8004936 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d004      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e007      	b.n	800483c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d012      	beq.n	800486e <HAL_I2C_EV_IRQHandler+0x20e>
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	0a5b      	lsrs	r3, r3, #9
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00c      	beq.n	800486e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 ff9c 	bl	80057a4 <I2C_Slave_ADDR>
 800486c:	e066      	b.n	800493c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0x22e>
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	0a5b      	lsrs	r3, r3, #9
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 ffd6 	bl	8005838 <I2C_Slave_STOPF>
 800488c:	e056      	b.n	800493c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800488e:	7bbb      	ldrb	r3, [r7, #14]
 8004890:	2b21      	cmp	r3, #33	@ 0x21
 8004892:	d002      	beq.n	800489a <HAL_I2C_EV_IRQHandler+0x23a>
 8004894:	7bbb      	ldrb	r3, [r7, #14]
 8004896:	2b29      	cmp	r3, #41	@ 0x29
 8004898:	d125      	bne.n	80048e6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	09db      	lsrs	r3, r3, #7
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00f      	beq.n	80048c6 <HAL_I2C_EV_IRQHandler+0x266>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	0a9b      	lsrs	r3, r3, #10
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_I2C_EV_IRQHandler+0x266>
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 feb2 	bl	8005628 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048c4:	e039      	b.n	800493a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d033      	beq.n	800493a <HAL_I2C_EV_IRQHandler+0x2da>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	0a5b      	lsrs	r3, r3, #9
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02d      	beq.n	800493a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fedf 	bl	80056a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048e4:	e029      	b.n	800493a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00f      	beq.n	8004912 <HAL_I2C_EV_IRQHandler+0x2b2>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	0a9b      	lsrs	r3, r3, #10
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_I2C_EV_IRQHandler+0x2b2>
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 feea 	bl	80056e4 <I2C_SlaveReceive_RXNE>
 8004910:	e014      	b.n	800493c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	089b      	lsrs	r3, r3, #2
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00e      	beq.n	800493c <HAL_I2C_EV_IRQHandler+0x2dc>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	0a5b      	lsrs	r3, r3, #9
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 ff18 	bl	8005760 <I2C_SlaveReceive_BTF>
 8004930:	e004      	b.n	800493c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004932:	bf00      	nop
 8004934:	e002      	b.n	800493c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004936:	bf00      	nop
 8004938:	e000      	b.n	800493c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800493a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b08a      	sub	sp, #40	@ 0x28
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800495a:	2300      	movs	r3, #0
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004964:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	0a1b      	lsrs	r3, r3, #8
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00e      	beq.n	8004990 <HAL_I2C_ER_IRQHandler+0x4e>
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800498e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00e      	beq.n	80049ba <HAL_I2C_ER_IRQHandler+0x78>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	f043 0302 	orr.w	r3, r3, #2
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80049b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	0a9b      	lsrs	r3, r3, #10
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d03f      	beq.n	8004a46 <HAL_I2C_ER_IRQHandler+0x104>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	0a1b      	lsrs	r3, r3, #8
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d039      	beq.n	8004a46 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80049d2:	7efb      	ldrb	r3, [r7, #27]
 80049d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80049ec:	7ebb      	ldrb	r3, [r7, #26]
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d112      	bne.n	8004a18 <HAL_I2C_ER_IRQHandler+0xd6>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <HAL_I2C_ER_IRQHandler+0xd6>
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	2b21      	cmp	r3, #33	@ 0x21
 80049fc:	d008      	beq.n	8004a10 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b29      	cmp	r3, #41	@ 0x29
 8004a02:	d005      	beq.n	8004a10 <HAL_I2C_ER_IRQHandler+0xce>
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	2b28      	cmp	r3, #40	@ 0x28
 8004a08:	d106      	bne.n	8004a18 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b21      	cmp	r3, #33	@ 0x21
 8004a0e:	d103      	bne.n	8004a18 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f001 f841 	bl	8005a98 <I2C_Slave_AF>
 8004a16:	e016      	b.n	8004a46 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a20:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a2a:	7efb      	ldrb	r3, [r7, #27]
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d002      	beq.n	8004a36 <HAL_I2C_ER_IRQHandler+0xf4>
 8004a30:	7efb      	ldrb	r3, [r7, #27]
 8004a32:	2b40      	cmp	r3, #64	@ 0x40
 8004a34:	d107      	bne.n	8004a46 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a44:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	0adb      	lsrs	r3, r3, #11
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00e      	beq.n	8004a70 <HAL_I2C_ER_IRQHandler+0x12e>
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	f043 0308 	orr.w	r3, r3, #8
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004a6e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 f878 	bl	8005b78 <I2C_ITError>
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3728      	adds	r7, #40	@ 0x28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
 8004aec:	4613      	mov	r3, r2
 8004aee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d150      	bne.n	8004bec <I2C_MasterTransmit_TXE+0xc8>
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	2b21      	cmp	r3, #33	@ 0x21
 8004b4e:	d14d      	bne.n	8004bec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d01d      	beq.n	8004b92 <I2C_MasterTransmit_TXE+0x6e>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d01a      	beq.n	8004b92 <I2C_MasterTransmit_TXE+0x6e>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b62:	d016      	beq.n	8004b92 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b72:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2211      	movs	r2, #17
 8004b78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff ff80 	bl	8004a90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b90:	e060      	b.n	8004c54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ba0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d107      	bne.n	8004bdc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fb ff11 	bl	80009fc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bda:	e03b      	b.n	8004c54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff ff53 	bl	8004a90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004bea:	e033      	b.n	8004c54 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b21      	cmp	r3, #33	@ 0x21
 8004bf0:	d005      	beq.n	8004bfe <I2C_MasterTransmit_TXE+0xda>
 8004bf2:	7bbb      	ldrb	r3, [r7, #14]
 8004bf4:	2b40      	cmp	r3, #64	@ 0x40
 8004bf6:	d12d      	bne.n	8004c54 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b22      	cmp	r3, #34	@ 0x22
 8004bfc:	d12a      	bne.n	8004c54 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d108      	bne.n	8004c1a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c16:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004c18:	e01c      	b.n	8004c54 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b40      	cmp	r3, #64	@ 0x40
 8004c24:	d103      	bne.n	8004c2e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f88e 	bl	8004d48 <I2C_MemoryTransmit_TXE_BTF>
}
 8004c2c:	e012      	b.n	8004c54 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c52:	e7ff      	b.n	8004c54 <I2C_MasterTransmit_TXE+0x130>
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b21      	cmp	r3, #33	@ 0x21
 8004c74:	d164      	bne.n	8004d40 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004ca4:	e04c      	b.n	8004d40 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d01d      	beq.n	8004ce8 <I2C_MasterTransmit_BTF+0x8c>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d01a      	beq.n	8004ce8 <I2C_MasterTransmit_BTF+0x8c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cb8:	d016      	beq.n	8004ce8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cc8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2211      	movs	r2, #17
 8004cce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fed5 	bl	8004a90 <HAL_I2C_MasterTxCpltCallback>
}
 8004ce6:	e02b      	b.n	8004d40 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cf6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d06:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b40      	cmp	r3, #64	@ 0x40
 8004d20:	d107      	bne.n	8004d32 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fb fe66 	bl	80009fc <HAL_I2C_MemTxCpltCallback>
}
 8004d30:	e006      	b.n	8004d40 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fea8 	bl	8004a90 <HAL_I2C_MasterTxCpltCallback>
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d11d      	bne.n	8004d9c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d10b      	bne.n	8004d80 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d78:	1c9a      	adds	r2, r3, #2
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d7e:	e073      	b.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	121b      	asrs	r3, r3, #8
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d9a:	e065      	b.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10b      	bne.n	8004dbc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004dba:	e055      	b.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d151      	bne.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	2b22      	cmp	r3, #34	@ 0x22
 8004dc8:	d10d      	bne.n	8004de6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dd8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004de4:	e040      	b.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d015      	beq.n	8004e1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b21      	cmp	r3, #33	@ 0x21
 8004df4:	d112      	bne.n	8004e1c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e1a:	e025      	b.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d120      	bne.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	2b21      	cmp	r3, #33	@ 0x21
 8004e2a:	d11d      	bne.n	8004e68 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fb fdca 	bl	80009fc <HAL_I2C_MemTxCpltCallback>
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b22      	cmp	r3, #34	@ 0x22
 8004e82:	f040 80a2 	bne.w	8004fca <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d921      	bls.n	8004ed8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	f040 8082 	bne.w	8004fca <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004ed6:	e078      	b.n	8004fca <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d074      	beq.n	8004fca <I2C_MasterReceive_RXNE+0x15a>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d002      	beq.n	8004eec <I2C_MasterReceive_RXNE+0x7c>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d16e      	bne.n	8004fca <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f001 fb2f 	bl	8006550 <I2C_WaitOnSTOPRequestThroughIT>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d142      	bne.n	8004f7e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f06:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d10a      	bne.n	8004f68 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7fb fd01 	bl	8000968 <HAL_I2C_MemRxCpltCallback>
}
 8004f66:	e030      	b.n	8004fca <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2212      	movs	r2, #18
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fd94 	bl	8004aa4 <HAL_I2C_MasterRxCpltCallback>
}
 8004f7c:	e025      	b.n	8004fca <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fb fd5b 	bl	8000a80 <HAL_I2C_ErrorCallback>
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d11b      	bne.n	8005022 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005020:	e0bd      	b.n	800519e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b03      	cmp	r3, #3
 800502a:	d129      	bne.n	8005080 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800503a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b04      	cmp	r3, #4
 8005040:	d00a      	beq.n	8005058 <I2C_MasterReceive_BTF+0x86>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d007      	beq.n	8005058 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005056:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800507e:	e08e      	b.n	800519e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d176      	bne.n	8005178 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d002      	beq.n	8005096 <I2C_MasterReceive_BTF+0xc4>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b10      	cmp	r3, #16
 8005094:	d108      	bne.n	80050a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	e019      	b.n	80050dc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d002      	beq.n	80050b4 <I2C_MasterReceive_BTF+0xe2>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d108      	bne.n	80050c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e00a      	b.n	80050dc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d007      	beq.n	80050dc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005136:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	d10a      	bne.n	8005162 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb fc04 	bl	8000968 <HAL_I2C_MemRxCpltCallback>
}
 8005160:	e01d      	b.n	800519e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2212      	movs	r2, #18
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff fc97 	bl	8004aa4 <HAL_I2C_MasterRxCpltCallback>
}
 8005176:	e012      	b.n	800519e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b40      	cmp	r3, #64	@ 0x40
 80051b8:	d117      	bne.n	80051ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80051d4:	e067      	b.n	80052a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
}
 80051e8:	e05d      	b.n	80052a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051f2:	d133      	bne.n	800525c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b21      	cmp	r3, #33	@ 0x21
 80051fe:	d109      	bne.n	8005214 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005210:	611a      	str	r2, [r3, #16]
 8005212:	e008      	b.n	8005226 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <I2C_Master_SB+0x92>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d032      	beq.n	80052a6 <I2C_Master_SB+0x100>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d02d      	beq.n	80052a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005258:	605a      	str	r2, [r3, #4]
}
 800525a:	e024      	b.n	80052a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10e      	bne.n	8005282 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005268:	b29b      	uxth	r3, r3
 800526a:	11db      	asrs	r3, r3, #7
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 0306 	and.w	r3, r3, #6
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f063 030f 	orn	r3, r3, #15
 8005278:	b2da      	uxtb	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	611a      	str	r2, [r3, #16]
}
 8005280:	e011      	b.n	80052a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005286:	2b01      	cmp	r3, #1
 8005288:	d10d      	bne.n	80052a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528e:	b29b      	uxth	r3, r3
 8005290:	11db      	asrs	r3, r3, #7
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0306 	and.w	r3, r3, #6
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f063 030e 	orn	r3, r3, #14
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d004      	beq.n	80052d8 <I2C_Master_ADD10+0x26>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d108      	bne.n	80052ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00c      	beq.n	80052fa <I2C_Master_ADD10+0x48>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f8:	605a      	str	r2, [r3, #4]
  }
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005306:	b480      	push	{r7}
 8005308:	b091      	sub	sp, #68	@ 0x44
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005314:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005322:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b22      	cmp	r3, #34	@ 0x22
 800532e:	f040 8169 	bne.w	8005604 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10f      	bne.n	800535a <I2C_Master_ADDR+0x54>
 800533a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800533e:	2b40      	cmp	r3, #64	@ 0x40
 8005340:	d10b      	bne.n	800535a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005342:	2300      	movs	r3, #0
 8005344:	633b      	str	r3, [r7, #48]	@ 0x30
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	633b      	str	r3, [r7, #48]	@ 0x30
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	633b      	str	r3, [r7, #48]	@ 0x30
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	e160      	b.n	800561c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800535e:	2b00      	cmp	r3, #0
 8005360:	d11d      	bne.n	800539e <I2C_Master_ADDR+0x98>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800536a:	d118      	bne.n	800539e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536c:	2300      	movs	r3, #0
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005390:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	651a      	str	r2, [r3, #80]	@ 0x50
 800539c:	e13e      	b.n	800561c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d113      	bne.n	80053d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a8:	2300      	movs	r3, #0
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e115      	b.n	80055fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	f040 808a 	bne.w	80054f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053e2:	d137      	bne.n	8005454 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005402:	d113      	bne.n	800542c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005412:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005414:	2300      	movs	r3, #0
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	e0e7      	b.n	80055fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542c:	2300      	movs	r3, #0
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	623b      	str	r3, [r7, #32]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e0d3      	b.n	80055fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005456:	2b08      	cmp	r3, #8
 8005458:	d02e      	beq.n	80054b8 <I2C_Master_ADDR+0x1b2>
 800545a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545c:	2b20      	cmp	r3, #32
 800545e:	d02b      	beq.n	80054b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005462:	2b12      	cmp	r3, #18
 8005464:	d102      	bne.n	800546c <I2C_Master_ADDR+0x166>
 8005466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005468:	2b01      	cmp	r3, #1
 800546a:	d125      	bne.n	80054b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546e:	2b04      	cmp	r3, #4
 8005470:	d00e      	beq.n	8005490 <I2C_Master_ADDR+0x18a>
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	2b02      	cmp	r3, #2
 8005476:	d00b      	beq.n	8005490 <I2C_Master_ADDR+0x18a>
 8005478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547a:	2b10      	cmp	r3, #16
 800547c:	d008      	beq.n	8005490 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e007      	b.n	80054a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800549e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	e0a1      	b.n	80055fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c8:	2300      	movs	r3, #0
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e085      	b.n	80055fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d14d      	bne.n	8005596 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d016      	beq.n	800552e <I2C_Master_ADDR+0x228>
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	2b02      	cmp	r3, #2
 8005504:	d013      	beq.n	800552e <I2C_Master_ADDR+0x228>
 8005506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005508:	2b10      	cmp	r3, #16
 800550a:	d010      	beq.n	800552e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e007      	b.n	800553e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800553c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800554c:	d117      	bne.n	800557e <I2C_Master_ADDR+0x278>
 800554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005550:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005554:	d00b      	beq.n	800556e <I2C_Master_ADDR+0x268>
 8005556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005558:	2b01      	cmp	r3, #1
 800555a:	d008      	beq.n	800556e <I2C_Master_ADDR+0x268>
 800555c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555e:	2b08      	cmp	r3, #8
 8005560:	d005      	beq.n	800556e <I2C_Master_ADDR+0x268>
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	2b10      	cmp	r3, #16
 8005566:	d002      	beq.n	800556e <I2C_Master_ADDR+0x268>
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	2b20      	cmp	r3, #32
 800556c:	d107      	bne.n	800557e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800557c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	e032      	b.n	80055fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b4:	d117      	bne.n	80055e6 <I2C_Master_ADDR+0x2e0>
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055bc:	d00b      	beq.n	80055d6 <I2C_Master_ADDR+0x2d0>
 80055be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d008      	beq.n	80055d6 <I2C_Master_ADDR+0x2d0>
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d005      	beq.n	80055d6 <I2C_Master_ADDR+0x2d0>
 80055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d002      	beq.n	80055d6 <I2C_Master_ADDR+0x2d0>
 80055d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d107      	bne.n	80055e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005602:	e00b      	b.n	800561c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	e7ff      	b.n	800561c <I2C_Master_ADDR+0x316>
 800561c:	bf00      	nop
 800561e:	3744      	adds	r7, #68	@ 0x44
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005636:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d02b      	beq.n	800569a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d114      	bne.n	800569a <I2C_SlaveTransmit_TXE+0x72>
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b29      	cmp	r3, #41	@ 0x29
 8005674:	d111      	bne.n	800569a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005684:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2221      	movs	r2, #33	@ 0x21
 800568a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2228      	movs	r2, #40	@ 0x28
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fa0f 	bl	8004ab8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d011      	beq.n	80056d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d02c      	beq.n	8005758 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d114      	bne.n	8005758 <I2C_SlaveReceive_RXNE+0x74>
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2b2a      	cmp	r3, #42	@ 0x2a
 8005732:	d111      	bne.n	8005758 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005742:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2222      	movs	r2, #34	@ 0x22
 8005748:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2228      	movs	r2, #40	@ 0x28
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff f9ba 	bl	8004acc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d012      	beq.n	8005798 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057be:	2b28      	cmp	r3, #40	@ 0x28
 80057c0:	d127      	bne.n	8005812 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	09db      	lsrs	r3, r3, #7
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	81bb      	strh	r3, [r7, #12]
 80057f4:	e002      	b.n	80057fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005804:	89ba      	ldrh	r2, [r7, #12]
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff f968 	bl	8004ae0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005810:	e00e      	b.n	8005830 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005846:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005856:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005858:	2300      	movs	r3, #0
 800585a:	60bb      	str	r3, [r7, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005884:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005894:	d172      	bne.n	800597c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	2b22      	cmp	r3, #34	@ 0x22
 800589a:	d002      	beq.n	80058a2 <I2C_Slave_STOPF+0x6a>
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b2a      	cmp	r3, #42	@ 0x2a
 80058a0:	d135      	bne.n	800590e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	f043 0204 	orr.w	r2, r3, #4
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe f88e 	bl	80039fc <HAL_DMA_GetState>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d049      	beq.n	800597a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ea:	4a69      	ldr	r2, [pc, #420]	@ (8005a90 <I2C_Slave_STOPF+0x258>)
 80058ec:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fd fed6 	bl	80036a4 <HAL_DMA_Abort_IT>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d03d      	beq.n	800597a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005908:	4610      	mov	r0, r2
 800590a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800590c:	e035      	b.n	800597a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	b29a      	uxth	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	f043 0204 	orr.w	r2, r3, #4
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005940:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe f858 	bl	80039fc <HAL_DMA_GetState>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d014      	beq.n	800597c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005956:	4a4e      	ldr	r2, [pc, #312]	@ (8005a90 <I2C_Slave_STOPF+0x258>)
 8005958:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595e:	4618      	mov	r0, r3
 8005960:	f7fd fea0 	bl	80036a4 <HAL_DMA_Abort_IT>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d008      	beq.n	800597c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
 8005978:	e000      	b.n	800597c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800597a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d03e      	beq.n	8005a04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b04      	cmp	r3, #4
 8005992:	d112      	bne.n	80059ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c4:	2b40      	cmp	r3, #64	@ 0x40
 80059c6:	d112      	bne.n	80059ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	f043 0204 	orr.w	r2, r3, #4
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f8b3 	bl	8005b78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a12:	e039      	b.n	8005a88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a18:	d109      	bne.n	8005a2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2228      	movs	r2, #40	@ 0x28
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff f84f 	bl	8004acc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b28      	cmp	r3, #40	@ 0x28
 8005a38:	d111      	bne.n	8005a5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <I2C_Slave_STOPF+0x25c>)
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff f850 	bl	8004afc <HAL_I2C_ListenCpltCallback>
}
 8005a5c:	e014      	b.n	8005a88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	2b22      	cmp	r3, #34	@ 0x22
 8005a64:	d002      	beq.n	8005a6c <I2C_Slave_STOPF+0x234>
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	2b22      	cmp	r3, #34	@ 0x22
 8005a6a:	d10d      	bne.n	8005a88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff f822 	bl	8004acc <HAL_I2C_SlaveRxCpltCallback>
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	080061d1 	.word	0x080061d1
 8005a94:	ffff0000 	.word	0xffff0000

08005a98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d002      	beq.n	8005aba <I2C_Slave_AF+0x22>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d129      	bne.n	8005b0e <I2C_Slave_AF+0x76>
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b28      	cmp	r3, #40	@ 0x28
 8005abe:	d126      	bne.n	8005b0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b74 <I2C_Slave_AF+0xdc>)
 8005ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ad4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ade:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fe fff8 	bl	8004afc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b0c:	e02e      	b.n	8005b6c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b21      	cmp	r3, #33	@ 0x21
 8005b12:	d126      	bne.n	8005b62 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a17      	ldr	r2, [pc, #92]	@ (8005b74 <I2C_Slave_AF+0xdc>)
 8005b18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2221      	movs	r2, #33	@ 0x21
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b58:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fe ffac 	bl	8004ab8 <HAL_I2C_SlaveTxCpltCallback>
}
 8005b60:	e004      	b.n	8005b6c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b6a:	615a      	str	r2, [r3, #20]
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	ffff0000 	.word	0xffff0000

08005b78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b90:	7bbb      	ldrb	r3, [r7, #14]
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d002      	beq.n	8005b9c <I2C_ITError+0x24>
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	2b40      	cmp	r3, #64	@ 0x40
 8005b9a:	d10a      	bne.n	8005bb2 <I2C_ITError+0x3a>
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	2b22      	cmp	r3, #34	@ 0x22
 8005ba0:	d107      	bne.n	8005bb2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bb0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bb8:	2b28      	cmp	r3, #40	@ 0x28
 8005bba:	d107      	bne.n	8005bcc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2228      	movs	r2, #40	@ 0x28
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005bca:	e015      	b.n	8005bf8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bda:	d00a      	beq.n	8005bf2 <I2C_ITError+0x7a>
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b60      	cmp	r3, #96	@ 0x60
 8005be0:	d007      	beq.n	8005bf2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c06:	d162      	bne.n	8005cce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d020      	beq.n	8005c68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2a:	4a6a      	ldr	r2, [pc, #424]	@ (8005dd4 <I2C_ITError+0x25c>)
 8005c2c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fd fd36 	bl	80036a4 <HAL_DMA_Abort_IT>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8089 	beq.w	8005d52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c62:	4610      	mov	r0, r2
 8005c64:	4798      	blx	r3
 8005c66:	e074      	b.n	8005d52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6c:	4a59      	ldr	r2, [pc, #356]	@ (8005dd4 <I2C_ITError+0x25c>)
 8005c6e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fd15 	bl	80036a4 <HAL_DMA_Abort_IT>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d068      	beq.n	8005d52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d10b      	bne.n	8005ca6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4798      	blx	r3
 8005ccc:	e041      	b.n	8005d52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b60      	cmp	r3, #96	@ 0x60
 8005cd8:	d125      	bne.n	8005d26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf2:	2b40      	cmp	r3, #64	@ 0x40
 8005cf4:	d10b      	bne.n	8005d0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fe fef6 	bl	8004b10 <HAL_I2C_AbortCpltCallback>
 8005d24:	e015      	b.n	8005d52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d10b      	bne.n	8005d4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fa fe97 	bl	8000a80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10e      	bne.n	8005d80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d113      	bne.n	8005dcc <I2C_ITError+0x254>
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b28      	cmp	r3, #40	@ 0x28
 8005da8:	d110      	bne.n	8005dcc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd8 <I2C_ITError+0x260>)
 8005dae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fe fe98 	bl	8004afc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	080061d1 	.word	0x080061d1
 8005dd8:	ffff0000 	.word	0xffff0000

08005ddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	4608      	mov	r0, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	461a      	mov	r2, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	817b      	strh	r3, [r7, #10]
 8005dee:	460b      	mov	r3, r1
 8005df0:	813b      	strh	r3, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fa7c 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e3c:	d103      	bne.n	8005e46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e0aa      	b.n	8005fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e4a:	897b      	ldrh	r3, [r7, #10]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	4952      	ldr	r1, [pc, #328]	@ (8005fa8 <I2C_RequestMemoryRead+0x1cc>)
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fab4 	bl	80063ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e097      	b.n	8005fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e88:	6a39      	ldr	r1, [r7, #32]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fb1e 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00d      	beq.n	8005eb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d107      	bne.n	8005eae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e076      	b.n	8005fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d105      	bne.n	8005ec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eb8:	893b      	ldrh	r3, [r7, #8]
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	611a      	str	r2, [r3, #16]
 8005ec2:	e021      	b.n	8005f08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ec4:	893b      	ldrh	r3, [r7, #8]
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed4:	6a39      	ldr	r1, [r7, #32]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 faf8 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d107      	bne.n	8005efa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e050      	b.n	8005fa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005efe:	893b      	ldrh	r3, [r7, #8]
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0a:	6a39      	ldr	r1, [r7, #32]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 fadd 	bl	80064cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00d      	beq.n	8005f34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d107      	bne.n	8005f30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e035      	b.n	8005fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f9e5 	bl	8006320 <I2C_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00d      	beq.n	8005f78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f6a:	d103      	bne.n	8005f74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e013      	b.n	8005fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f78:	897b      	ldrh	r3, [r7, #10]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	4906      	ldr	r1, [pc, #24]	@ (8005fa8 <I2C_RequestMemoryRead+0x1cc>)
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 fa1d 	bl	80063ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	00010002 	.word	0x00010002

08005fac <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fc8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005fde:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fec:	2200      	movs	r2, #0
 8005fee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006000:	7cfb      	ldrb	r3, [r7, #19]
 8006002:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006006:	2b21      	cmp	r3, #33	@ 0x21
 8006008:	d007      	beq.n	800601a <I2C_DMAXferCplt+0x6e>
 800600a:	7cfb      	ldrb	r3, [r7, #19]
 800600c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006010:	2b22      	cmp	r3, #34	@ 0x22
 8006012:	d131      	bne.n	8006078 <I2C_DMAXferCplt+0xcc>
 8006014:	7cbb      	ldrb	r3, [r7, #18]
 8006016:	2b20      	cmp	r3, #32
 8006018:	d12e      	bne.n	8006078 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006028:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006030:	7cfb      	ldrb	r3, [r7, #19]
 8006032:	2b29      	cmp	r3, #41	@ 0x29
 8006034:	d10a      	bne.n	800604c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2221      	movs	r2, #33	@ 0x21
 800603a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2228      	movs	r2, #40	@ 0x28
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006044:	6978      	ldr	r0, [r7, #20]
 8006046:	f7fe fd37 	bl	8004ab8 <HAL_I2C_SlaveTxCpltCallback>
 800604a:	e00c      	b.n	8006066 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800604c:	7cfb      	ldrb	r3, [r7, #19]
 800604e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006050:	d109      	bne.n	8006066 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2222      	movs	r2, #34	@ 0x22
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2228      	movs	r2, #40	@ 0x28
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006060:	6978      	ldr	r0, [r7, #20]
 8006062:	f7fe fd33 	bl	8004acc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006074:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006076:	e06a      	b.n	800614e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d064      	beq.n	800614e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	d107      	bne.n	800609e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800609c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80060ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060b4:	d009      	beq.n	80060ca <I2C_DMAXferCplt+0x11e>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d006      	beq.n	80060ca <I2C_DMAXferCplt+0x11e>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80060c2:	d002      	beq.n	80060ca <I2C_DMAXferCplt+0x11e>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d107      	bne.n	80060da <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060e8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060f8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2200      	movs	r2, #0
 80060fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006108:	6978      	ldr	r0, [r7, #20]
 800610a:	f7fa fcb9 	bl	8000a80 <HAL_I2C_ErrorCallback>
}
 800610e:	e01e      	b.n	800614e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b40      	cmp	r3, #64	@ 0x40
 8006122:	d10a      	bne.n	800613a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006132:	6978      	ldr	r0, [r7, #20]
 8006134:	f7fa fc18 	bl	8000968 <HAL_I2C_MemRxCpltCallback>
}
 8006138:	e009      	b.n	800614e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2212      	movs	r2, #18
 8006146:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006148:	6978      	ldr	r0, [r7, #20]
 800614a:	f7fe fcab 	bl	8004aa4 <HAL_I2C_MasterRxCpltCallback>
}
 800614e:	bf00      	nop
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006162:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006170:	2200      	movs	r2, #0
 8006172:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006180:	2200      	movs	r2, #0
 8006182:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fd fc47 	bl	8003a18 <HAL_DMA_GetError>
 800618a:	4603      	mov	r3, r0
 800618c:	2b02      	cmp	r3, #2
 800618e:	d01b      	beq.n	80061c8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800619e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ba:	f043 0210 	orr.w	r2, r3, #16
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f7fa fc5c 	bl	8000a80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061ea:	4b4b      	ldr	r3, [pc, #300]	@ (8006318 <I2C_DMAAbort+0x148>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	08db      	lsrs	r3, r3, #3
 80061f0:	4a4a      	ldr	r2, [pc, #296]	@ (800631c <I2C_DMAAbort+0x14c>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	0a1a      	lsrs	r2, r3, #8
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	00da      	lsls	r2, r3, #3
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	f043 0220 	orr.w	r2, r3, #32
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006216:	e00a      	b.n	800622e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3b01      	subs	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800622c:	d0ea      	beq.n	8006204 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	2200      	movs	r2, #0
 800623c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	2200      	movs	r2, #0
 800624c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006270:	2200      	movs	r2, #0
 8006272:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	2200      	movs	r2, #0
 8006282:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0201 	bic.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b60      	cmp	r3, #96	@ 0x60
 800629e:	d10e      	bne.n	80062be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2200      	movs	r2, #0
 80062b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062b6:	6978      	ldr	r0, [r7, #20]
 80062b8:	f7fe fc2a 	bl	8004b10 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062bc:	e027      	b.n	800630e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062be:	7cfb      	ldrb	r3, [r7, #19]
 80062c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80062c4:	2b28      	cmp	r3, #40	@ 0x28
 80062c6:	d117      	bne.n	80062f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2228      	movs	r2, #40	@ 0x28
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80062f6:	e007      	b.n	8006308 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006308:	6978      	ldr	r0, [r7, #20]
 800630a:	f7fa fbb9 	bl	8000a80 <HAL_I2C_ErrorCallback>
}
 800630e:	bf00      	nop
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000000 	.word	0x20000000
 800631c:	14f8b589 	.word	0x14f8b589

08006320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	4613      	mov	r3, r2
 800632e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006330:	e025      	b.n	800637e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d021      	beq.n	800637e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633a:	f7fb fe1b 	bl	8001f74 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d302      	bcc.n	8006350 <I2C_WaitOnFlagUntilTimeout+0x30>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d116      	bne.n	800637e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	f043 0220 	orr.w	r2, r3, #32
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e023      	b.n	80063c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	d10d      	bne.n	80063a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	43da      	mvns	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4013      	ands	r3, r2
 8006394:	b29b      	uxth	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	bf0c      	ite	eq
 800639a:	2301      	moveq	r3, #1
 800639c:	2300      	movne	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	e00c      	b.n	80063be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	43da      	mvns	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4013      	ands	r3, r2
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d0b6      	beq.n	8006332 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063dc:	e051      	b.n	8006482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ec:	d123      	bne.n	8006436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006406:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	f043 0204 	orr.w	r2, r3, #4
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e046      	b.n	80064c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d021      	beq.n	8006482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643e:	f7fb fd99 	bl	8001f74 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d116      	bne.n	8006482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	f043 0220 	orr.w	r2, r3, #32
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e020      	b.n	80064c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b01      	cmp	r3, #1
 800648a:	d10c      	bne.n	80064a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	43da      	mvns	r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4013      	ands	r3, r2
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	bf14      	ite	ne
 800649e:	2301      	movne	r3, #1
 80064a0:	2300      	moveq	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	e00b      	b.n	80064be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	43da      	mvns	r2, r3
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4013      	ands	r3, r2
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf14      	ite	ne
 80064b8:	2301      	movne	r3, #1
 80064ba:	2300      	moveq	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d18d      	bne.n	80063de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064d8:	e02d      	b.n	8006536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f86a 	bl	80065b4 <I2C_IsAcknowledgeFailed>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e02d      	b.n	8006546 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d021      	beq.n	8006536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f2:	f7fb fd3f 	bl	8001f74 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d116      	bne.n	8006536 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	f043 0220 	orr.w	r2, r3, #32
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e007      	b.n	8006546 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006540:	2b80      	cmp	r3, #128	@ 0x80
 8006542:	d1ca      	bne.n	80064da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800655c:	4b13      	ldr	r3, [pc, #76]	@ (80065ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	08db      	lsrs	r3, r3, #3
 8006562:	4a13      	ldr	r2, [pc, #76]	@ (80065b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	0a1a      	lsrs	r2, r3, #8
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b01      	subs	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	f043 0220 	orr.w	r2, r3, #32
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e008      	b.n	80065a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800659c:	d0e9      	beq.n	8006572 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000000 	.word	0x20000000
 80065b0:	14f8b589 	.word	0x14f8b589

080065b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ca:	d11b      	bne.n	8006604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f0:	f043 0204 	orr.w	r2, r3, #4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006622:	d103      	bne.n	800662c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800662a:	e007      	b.n	800663c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006630:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006634:	d102      	bne.n	800663c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2208      	movs	r2, #8
 800663a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0cc      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800665c:	4b68      	ldr	r3, [pc, #416]	@ (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d90c      	bls.n	8006684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666a:	4b65      	ldr	r3, [pc, #404]	@ (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b63      	ldr	r3, [pc, #396]	@ (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d001      	beq.n	8006684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0b8      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d020      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800669c:	4b59      	ldr	r3, [pc, #356]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	4a58      	ldr	r2, [pc, #352]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80066a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066b4:	4b53      	ldr	r3, [pc, #332]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a52      	ldr	r2, [pc, #328]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c0:	4b50      	ldr	r3, [pc, #320]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	494d      	ldr	r1, [pc, #308]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d044      	beq.n	8006768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d107      	bne.n	80066f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e6:	4b47      	ldr	r3, [pc, #284]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d119      	bne.n	8006726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e07f      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d003      	beq.n	8006706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006702:	2b03      	cmp	r3, #3
 8006704:	d107      	bne.n	8006716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006706:	4b3f      	ldr	r3, [pc, #252]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e06f      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006716:	4b3b      	ldr	r3, [pc, #236]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e067      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006726:	4b37      	ldr	r3, [pc, #220]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f023 0203 	bic.w	r2, r3, #3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4934      	ldr	r1, [pc, #208]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	4313      	orrs	r3, r2
 8006736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006738:	f7fb fc1c 	bl	8001f74 <HAL_GetTick>
 800673c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673e:	e00a      	b.n	8006756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006740:	f7fb fc18 	bl	8001f74 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e04f      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006756:	4b2b      	ldr	r3, [pc, #172]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 020c 	and.w	r2, r3, #12
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	429a      	cmp	r2, r3
 8006766:	d1eb      	bne.n	8006740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006768:	4b25      	ldr	r3, [pc, #148]	@ (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d20c      	bcs.n	8006790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b22      	ldr	r3, [pc, #136]	@ (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800677e:	4b20      	ldr	r3, [pc, #128]	@ (8006800 <HAL_RCC_ClockConfig+0x1b8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d001      	beq.n	8006790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e032      	b.n	80067f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800679c:	4b19      	ldr	r3, [pc, #100]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4916      	ldr	r1, [pc, #88]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0308 	and.w	r3, r3, #8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067ba:	4b12      	ldr	r3, [pc, #72]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	490e      	ldr	r1, [pc, #56]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067ce:	f000 f821 	bl	8006814 <HAL_RCC_GetSysClockFreq>
 80067d2:	4602      	mov	r2, r0
 80067d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	091b      	lsrs	r3, r3, #4
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	490a      	ldr	r1, [pc, #40]	@ (8006808 <HAL_RCC_ClockConfig+0x1c0>)
 80067e0:	5ccb      	ldrb	r3, [r1, r3]
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	4a09      	ldr	r2, [pc, #36]	@ (800680c <HAL_RCC_ClockConfig+0x1c4>)
 80067e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067ea:	4b09      	ldr	r3, [pc, #36]	@ (8006810 <HAL_RCC_ClockConfig+0x1c8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fb fb7c 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40023c00 	.word	0x40023c00
 8006804:	40023800 	.word	0x40023800
 8006808:	0800a74c 	.word	0x0800a74c
 800680c:	20000000 	.word	0x20000000
 8006810:	20000004 	.word	0x20000004

08006814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006818:	b090      	sub	sp, #64	@ 0x40
 800681a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006820:	2300      	movs	r3, #0
 8006822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006824:	2300      	movs	r3, #0
 8006826:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800682c:	4b59      	ldr	r3, [pc, #356]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 030c 	and.w	r3, r3, #12
 8006834:	2b08      	cmp	r3, #8
 8006836:	d00d      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x40>
 8006838:	2b08      	cmp	r3, #8
 800683a:	f200 80a1 	bhi.w	8006980 <HAL_RCC_GetSysClockFreq+0x16c>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <HAL_RCC_GetSysClockFreq+0x34>
 8006842:	2b04      	cmp	r3, #4
 8006844:	d003      	beq.n	800684e <HAL_RCC_GetSysClockFreq+0x3a>
 8006846:	e09b      	b.n	8006980 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006848:	4b53      	ldr	r3, [pc, #332]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x184>)
 800684a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800684c:	e09b      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800684e:	4b53      	ldr	r3, [pc, #332]	@ (800699c <HAL_RCC_GetSysClockFreq+0x188>)
 8006850:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006852:	e098      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006854:	4b4f      	ldr	r3, [pc, #316]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800685e:	4b4d      	ldr	r3, [pc, #308]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d028      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686a:	4b4a      	ldr	r3, [pc, #296]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	099b      	lsrs	r3, r3, #6
 8006870:	2200      	movs	r2, #0
 8006872:	623b      	str	r3, [r7, #32]
 8006874:	627a      	str	r2, [r7, #36]	@ 0x24
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800687c:	2100      	movs	r1, #0
 800687e:	4b47      	ldr	r3, [pc, #284]	@ (800699c <HAL_RCC_GetSysClockFreq+0x188>)
 8006880:	fb03 f201 	mul.w	r2, r3, r1
 8006884:	2300      	movs	r3, #0
 8006886:	fb00 f303 	mul.w	r3, r0, r3
 800688a:	4413      	add	r3, r2
 800688c:	4a43      	ldr	r2, [pc, #268]	@ (800699c <HAL_RCC_GetSysClockFreq+0x188>)
 800688e:	fba0 1202 	umull	r1, r2, r0, r2
 8006892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006894:	460a      	mov	r2, r1
 8006896:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800689a:	4413      	add	r3, r2
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800689e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a0:	2200      	movs	r2, #0
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	61fa      	str	r2, [r7, #28]
 80068a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80068ae:	f7f9 fd0f 	bl	80002d0 <__aeabi_uldivmod>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4613      	mov	r3, r2
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068ba:	e053      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068bc:	4b35      	ldr	r3, [pc, #212]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	099b      	lsrs	r3, r3, #6
 80068c2:	2200      	movs	r2, #0
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	617a      	str	r2, [r7, #20]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068ce:	f04f 0b00 	mov.w	fp, #0
 80068d2:	4652      	mov	r2, sl
 80068d4:	465b      	mov	r3, fp
 80068d6:	f04f 0000 	mov.w	r0, #0
 80068da:	f04f 0100 	mov.w	r1, #0
 80068de:	0159      	lsls	r1, r3, #5
 80068e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068e4:	0150      	lsls	r0, r2, #5
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	ebb2 080a 	subs.w	r8, r2, sl
 80068ee:	eb63 090b 	sbc.w	r9, r3, fp
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006902:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006906:	ebb2 0408 	subs.w	r4, r2, r8
 800690a:	eb63 0509 	sbc.w	r5, r3, r9
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	00eb      	lsls	r3, r5, #3
 8006918:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800691c:	00e2      	lsls	r2, r4, #3
 800691e:	4614      	mov	r4, r2
 8006920:	461d      	mov	r5, r3
 8006922:	eb14 030a 	adds.w	r3, r4, sl
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	eb45 030b 	adc.w	r3, r5, fp
 800692c:	607b      	str	r3, [r7, #4]
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800693a:	4629      	mov	r1, r5
 800693c:	028b      	lsls	r3, r1, #10
 800693e:	4621      	mov	r1, r4
 8006940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006944:	4621      	mov	r1, r4
 8006946:	028a      	lsls	r2, r1, #10
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694e:	2200      	movs	r2, #0
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	60fa      	str	r2, [r7, #12]
 8006954:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006958:	f7f9 fcba 	bl	80002d0 <__aeabi_uldivmod>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4613      	mov	r3, r2
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCC_GetSysClockFreq+0x180>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	0c1b      	lsrs	r3, r3, #16
 800696a:	f003 0303 	and.w	r3, r3, #3
 800696e:	3301      	adds	r3, #1
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006974:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800697e:	e002      	b.n	8006986 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006980:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x184>)
 8006982:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006988:	4618      	mov	r0, r3
 800698a:	3740      	adds	r7, #64	@ 0x40
 800698c:	46bd      	mov	sp, r7
 800698e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006992:	bf00      	nop
 8006994:	40023800 	.word	0x40023800
 8006998:	00f42400 	.word	0x00f42400
 800699c:	017d7840 	.word	0x017d7840

080069a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	@ (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000000 	.word	0x20000000

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b05      	ldr	r3, [pc, #20]	@ (80069d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0a9b      	lsrs	r3, r3, #10
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4903      	ldr	r1, [pc, #12]	@ (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	0800a75c 	.word	0x0800a75c

080069e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069e4:	f7ff ffdc 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b05      	ldr	r3, [pc, #20]	@ (8006a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	0b5b      	lsrs	r3, r3, #13
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4903      	ldr	r1, [pc, #12]	@ (8006a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	0800a75c 	.word	0x0800a75c

08006a08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e273      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d075      	beq.n	8006b12 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a26:	4b88      	ldr	r3, [pc, #544]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d00c      	beq.n	8006a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a32:	4b85      	ldr	r3, [pc, #532]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d112      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a3e:	4b82      	ldr	r3, [pc, #520]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a4a:	d10b      	bne.n	8006a64 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d05b      	beq.n	8006b10 <HAL_RCC_OscConfig+0x108>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d157      	bne.n	8006b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e24e      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a6c:	d106      	bne.n	8006a7c <HAL_RCC_OscConfig+0x74>
 8006a6e:	4b76      	ldr	r3, [pc, #472]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a75      	ldr	r2, [pc, #468]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	e01d      	b.n	8006ab8 <HAL_RCC_OscConfig+0xb0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x98>
 8006a86:	4b70      	ldr	r3, [pc, #448]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a6f      	ldr	r2, [pc, #444]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	4b6d      	ldr	r3, [pc, #436]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6c      	ldr	r2, [pc, #432]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	e00b      	b.n	8006ab8 <HAL_RCC_OscConfig+0xb0>
 8006aa0:	4b69      	ldr	r3, [pc, #420]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a68      	ldr	r2, [pc, #416]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	4b66      	ldr	r3, [pc, #408]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a65      	ldr	r2, [pc, #404]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d013      	beq.n	8006ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac0:	f7fb fa58 	bl	8001f74 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ac8:	f7fb fa54 	bl	8001f74 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b64      	cmp	r3, #100	@ 0x64
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e213      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ada:	4b5b      	ldr	r3, [pc, #364]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0f0      	beq.n	8006ac8 <HAL_RCC_OscConfig+0xc0>
 8006ae6:	e014      	b.n	8006b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fb fa44 	bl	8001f74 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fb fa40 	bl	8001f74 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	@ 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e1ff      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b02:	4b51      	ldr	r3, [pc, #324]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f0      	bne.n	8006af0 <HAL_RCC_OscConfig+0xe8>
 8006b0e:	e000      	b.n	8006b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d063      	beq.n	8006be6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 030c 	and.w	r3, r3, #12
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b2a:	4b47      	ldr	r3, [pc, #284]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d11c      	bne.n	8006b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b36:	4b44      	ldr	r3, [pc, #272]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d116      	bne.n	8006b70 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b42:	4b41      	ldr	r3, [pc, #260]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_RCC_OscConfig+0x152>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d001      	beq.n	8006b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e1d3      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4937      	ldr	r1, [pc, #220]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b6e:	e03a      	b.n	8006be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d020      	beq.n	8006bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b78:	4b34      	ldr	r3, [pc, #208]	@ (8006c4c <HAL_RCC_OscConfig+0x244>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7e:	f7fb f9f9 	bl	8001f74 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b86:	f7fb f9f5 	bl	8001f74 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e1b4      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b98:	4b2b      	ldr	r3, [pc, #172]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0f0      	beq.n	8006b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba4:	4b28      	ldr	r3, [pc, #160]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4925      	ldr	r1, [pc, #148]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	600b      	str	r3, [r1, #0]
 8006bb8:	e015      	b.n	8006be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bba:	4b24      	ldr	r3, [pc, #144]	@ (8006c4c <HAL_RCC_OscConfig+0x244>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7fb f9d8 	bl	8001f74 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc8:	f7fb f9d4 	bl	8001f74 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e193      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bda:	4b1b      	ldr	r3, [pc, #108]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d036      	beq.n	8006c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bfa:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <HAL_RCC_OscConfig+0x248>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c00:	f7fb f9b8 	bl	8001f74 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c08:	f7fb f9b4 	bl	8001f74 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e173      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <HAL_RCC_OscConfig+0x240>)
 8006c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0x200>
 8006c26:	e01b      	b.n	8006c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c28:	4b09      	ldr	r3, [pc, #36]	@ (8006c50 <HAL_RCC_OscConfig+0x248>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2e:	f7fb f9a1 	bl	8001f74 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c34:	e00e      	b.n	8006c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c36:	f7fb f99d 	bl	8001f74 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d907      	bls.n	8006c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e15c      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	42470000 	.word	0x42470000
 8006c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c54:	4b8a      	ldr	r3, [pc, #552]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1ea      	bne.n	8006c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8097 	beq.w	8006d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c72:	4b83      	ldr	r3, [pc, #524]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10f      	bne.n	8006c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60bb      	str	r3, [r7, #8]
 8006c82:	4b7f      	ldr	r3, [pc, #508]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	4a7e      	ldr	r2, [pc, #504]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c8e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c9e:	4b79      	ldr	r3, [pc, #484]	@ (8006e84 <HAL_RCC_OscConfig+0x47c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d118      	bne.n	8006cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006caa:	4b76      	ldr	r3, [pc, #472]	@ (8006e84 <HAL_RCC_OscConfig+0x47c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a75      	ldr	r2, [pc, #468]	@ (8006e84 <HAL_RCC_OscConfig+0x47c>)
 8006cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cb6:	f7fb f95d 	bl	8001f74 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cbe:	f7fb f959 	bl	8001f74 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e118      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8006e84 <HAL_RCC_OscConfig+0x47c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f0      	beq.n	8006cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d106      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x2ea>
 8006ce4:	4b66      	ldr	r3, [pc, #408]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce8:	4a65      	ldr	r2, [pc, #404]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cf0:	e01c      	b.n	8006d2c <HAL_RCC_OscConfig+0x324>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x30c>
 8006cfa:	4b61      	ldr	r3, [pc, #388]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cfe:	4a60      	ldr	r2, [pc, #384]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d00:	f043 0304 	orr.w	r3, r3, #4
 8006d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d06:	4b5e      	ldr	r3, [pc, #376]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0a:	4a5d      	ldr	r2, [pc, #372]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d12:	e00b      	b.n	8006d2c <HAL_RCC_OscConfig+0x324>
 8006d14:	4b5a      	ldr	r3, [pc, #360]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d18:	4a59      	ldr	r2, [pc, #356]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d20:	4b57      	ldr	r3, [pc, #348]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d24:	4a56      	ldr	r2, [pc, #344]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d26:	f023 0304 	bic.w	r3, r3, #4
 8006d2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d015      	beq.n	8006d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d34:	f7fb f91e 	bl	8001f74 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d3a:	e00a      	b.n	8006d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d3c:	f7fb f91a 	bl	8001f74 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e0d7      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d52:	4b4b      	ldr	r3, [pc, #300]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0ee      	beq.n	8006d3c <HAL_RCC_OscConfig+0x334>
 8006d5e:	e014      	b.n	8006d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fb f908 	bl	8001f74 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d68:	f7fb f904 	bl	8001f74 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e0c1      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d7e:	4b40      	ldr	r3, [pc, #256]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1ee      	bne.n	8006d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d105      	bne.n	8006d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d90:	4b3b      	ldr	r3, [pc, #236]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d94:	4a3a      	ldr	r2, [pc, #232]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80ad 	beq.w	8006f00 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006da6:	4b36      	ldr	r3, [pc, #216]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 030c 	and.w	r3, r3, #12
 8006dae:	2b08      	cmp	r3, #8
 8006db0:	d060      	beq.n	8006e74 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d145      	bne.n	8006e46 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dba:	4b33      	ldr	r3, [pc, #204]	@ (8006e88 <HAL_RCC_OscConfig+0x480>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc0:	f7fb f8d8 	bl	8001f74 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dc8:	f7fb f8d4 	bl	8001f74 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e093      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dda:	4b29      	ldr	r3, [pc, #164]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69da      	ldr	r2, [r3, #28]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df4:	019b      	lsls	r3, r3, #6
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	085b      	lsrs	r3, r3, #1
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e08:	061b      	lsls	r3, r3, #24
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e10:	071b      	lsls	r3, r3, #28
 8006e12:	491b      	ldr	r1, [pc, #108]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e18:	4b1b      	ldr	r3, [pc, #108]	@ (8006e88 <HAL_RCC_OscConfig+0x480>)
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1e:	f7fb f8a9 	bl	8001f74 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e26:	f7fb f8a5 	bl	8001f74 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e064      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e38:	4b11      	ldr	r3, [pc, #68]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0f0      	beq.n	8006e26 <HAL_RCC_OscConfig+0x41e>
 8006e44:	e05c      	b.n	8006f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e46:	4b10      	ldr	r3, [pc, #64]	@ (8006e88 <HAL_RCC_OscConfig+0x480>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fb f892 	bl	8001f74 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fb f88e 	bl	8001f74 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e04d      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e66:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <HAL_RCC_OscConfig+0x478>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0x44c>
 8006e72:	e045      	b.n	8006f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d107      	bne.n	8006e8c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e040      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
 8006e80:	40023800 	.word	0x40023800
 8006e84:	40007000 	.word	0x40007000
 8006e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8006f0c <HAL_RCC_OscConfig+0x504>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d030      	beq.n	8006efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d129      	bne.n	8006efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d122      	bne.n	8006efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d119      	bne.n	8006efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d10f      	bne.n	8006efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d107      	bne.n	8006efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d001      	beq.n	8006f00 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e000      	b.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023800 	.word	0x40023800

08006f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e07b      	b.n	800701a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d108      	bne.n	8006f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f32:	d009      	beq.n	8006f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	61da      	str	r2, [r3, #28]
 8006f3a:	e005      	b.n	8006f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fa fc8c 	bl	8001880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fcc:	ea42 0103 	orr.w	r1, r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	f003 0104 	and.w	r1, r3, #4
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	f003 0210 	and.w	r2, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007008:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b088      	sub	sp, #32
 8007026:	af00      	add	r7, sp, #0
 8007028:	60f8      	str	r0, [r7, #12]
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	603b      	str	r3, [r7, #0]
 800702e:	4613      	mov	r3, r2
 8007030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_SPI_Transmit+0x22>
 8007040:	2302      	movs	r3, #2
 8007042:	e126      	b.n	8007292 <HAL_SPI_Transmit+0x270>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800704c:	f7fa ff92 	bl	8001f74 <HAL_GetTick>
 8007050:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b01      	cmp	r3, #1
 8007060:	d002      	beq.n	8007068 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007062:	2302      	movs	r3, #2
 8007064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007066:	e10b      	b.n	8007280 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_SPI_Transmit+0x52>
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d102      	bne.n	800707a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007078:	e102      	b.n	8007280 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2203      	movs	r2, #3
 800707e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	88fa      	ldrh	r2, [r7, #6]
 8007092:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	88fa      	ldrh	r2, [r7, #6]
 8007098:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c0:	d10f      	bne.n	80070e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ec:	2b40      	cmp	r3, #64	@ 0x40
 80070ee:	d007      	beq.n	8007100 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007108:	d14b      	bne.n	80071a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_SPI_Transmit+0xf6>
 8007112:	8afb      	ldrh	r3, [r7, #22]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d13e      	bne.n	8007196 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711c:	881a      	ldrh	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007128:	1c9a      	adds	r2, r3, #2
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800713c:	e02b      	b.n	8007196 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b02      	cmp	r3, #2
 800714a:	d112      	bne.n	8007172 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007150:	881a      	ldrh	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800715c:	1c9a      	adds	r2, r3, #2
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007166:	b29b      	uxth	r3, r3
 8007168:	3b01      	subs	r3, #1
 800716a:	b29a      	uxth	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007170:	e011      	b.n	8007196 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007172:	f7fa feff 	bl	8001f74 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d803      	bhi.n	800718a <HAL_SPI_Transmit+0x168>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d102      	bne.n	8007190 <HAL_SPI_Transmit+0x16e>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007194:	e074      	b.n	8007280 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1ce      	bne.n	800713e <HAL_SPI_Transmit+0x11c>
 80071a0:	e04c      	b.n	800723c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_SPI_Transmit+0x18e>
 80071aa:	8afb      	ldrh	r3, [r7, #22]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d140      	bne.n	8007232 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071d6:	e02c      	b.n	8007232 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d113      	bne.n	800720e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800720c:	e011      	b.n	8007232 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800720e:	f7fa feb1 	bl	8001f74 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d803      	bhi.n	8007226 <HAL_SPI_Transmit+0x204>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007224:	d102      	bne.n	800722c <HAL_SPI_Transmit+0x20a>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007230:	e026      	b.n	8007280 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007236:	b29b      	uxth	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1cd      	bne.n	80071d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f001 f8cb 	bl	80083dc <SPI_EndRxTxTransaction>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	613b      	str	r3, [r7, #16]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e000      	b.n	8007280 <HAL_SPI_Transmit+0x25e>
  }

error:
 800727e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007290:	7ffb      	ldrb	r3, [r7, #31]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b088      	sub	sp, #32
 800729e:	af02      	add	r7, sp, #8
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072b6:	d112      	bne.n	80072de <HAL_SPI_Receive+0x44>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10e      	bne.n	80072de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2204      	movs	r2, #4
 80072c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072c8:	88fa      	ldrh	r2, [r7, #6]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	4613      	mov	r3, r2
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f8f1 	bl	80074bc <HAL_SPI_TransmitReceive>
 80072da:	4603      	mov	r3, r0
 80072dc:	e0ea      	b.n	80074b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_SPI_Receive+0x52>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e0e3      	b.n	80074b4 <HAL_SPI_Receive+0x21a>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072f4:	f7fa fe3e 	bl	8001f74 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d002      	beq.n	800730c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007306:	2302      	movs	r3, #2
 8007308:	75fb      	strb	r3, [r7, #23]
    goto error;
 800730a:	e0ca      	b.n	80074a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_SPI_Receive+0x7e>
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800731c:	e0c1      	b.n	80074a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2204      	movs	r2, #4
 8007322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007364:	d10f      	bne.n	8007386 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007384:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007390:	2b40      	cmp	r3, #64	@ 0x40
 8007392:	d007      	beq.n	80073a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d162      	bne.n	8007472 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073ac:	e02e      	b.n	800740c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d115      	bne.n	80073e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f103 020c 	add.w	r2, r3, #12
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c8:	7812      	ldrb	r2, [r2, #0]
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073e6:	e011      	b.n	800740c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073e8:	f7fa fdc4 	bl	8001f74 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d803      	bhi.n	8007400 <HAL_SPI_Receive+0x166>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d102      	bne.n	8007406 <HAL_SPI_Receive+0x16c>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	75fb      	strb	r3, [r7, #23]
          goto error;
 800740a:	e04a      	b.n	80074a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1cb      	bne.n	80073ae <HAL_SPI_Receive+0x114>
 8007416:	e031      	b.n	800747c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b01      	cmp	r3, #1
 8007424:	d113      	bne.n	800744e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007430:	b292      	uxth	r2, r2
 8007432:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800744c:	e011      	b.n	8007472 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800744e:	f7fa fd91 	bl	8001f74 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d803      	bhi.n	8007466 <HAL_SPI_Receive+0x1cc>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007464:	d102      	bne.n	800746c <HAL_SPI_Receive+0x1d2>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007470:	e017      	b.n	80074a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1cd      	bne.n	8007418 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 ff45 	bl	8008310 <SPI_EndRxTransaction>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	75fb      	strb	r3, [r7, #23]
 800749e:	e000      	b.n	80074a2 <HAL_SPI_Receive+0x208>
  }

error :
 80074a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08c      	sub	sp, #48	@ 0x30
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074ca:	2301      	movs	r3, #1
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x26>
 80074de:	2302      	movs	r3, #2
 80074e0:	e18a      	b.n	80077f8 <HAL_SPI_TransmitReceive+0x33c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074ea:	f7fa fd43 	bl	8001f74 <HAL_GetTick>
 80074ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007500:	887b      	ldrh	r3, [r7, #2]
 8007502:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007504:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007508:	2b01      	cmp	r3, #1
 800750a:	d00f      	beq.n	800752c <HAL_SPI_TransmitReceive+0x70>
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007512:	d107      	bne.n	8007524 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d103      	bne.n	8007524 <HAL_SPI_TransmitReceive+0x68>
 800751c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007520:	2b04      	cmp	r3, #4
 8007522:	d003      	beq.n	800752c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007524:	2302      	movs	r3, #2
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800752a:	e15b      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <HAL_SPI_TransmitReceive+0x82>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <HAL_SPI_TransmitReceive+0x82>
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007544:	e14e      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b04      	cmp	r3, #4
 8007550:	d003      	beq.n	800755a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2205      	movs	r2, #5
 8007556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	887a      	ldrh	r2, [r7, #2]
 800756a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	887a      	ldrh	r2, [r7, #2]
 8007570:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	887a      	ldrh	r2, [r7, #2]
 800757c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	887a      	ldrh	r2, [r7, #2]
 8007582:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759a:	2b40      	cmp	r3, #64	@ 0x40
 800759c:	d007      	beq.n	80075ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075b6:	d178      	bne.n	80076aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_SPI_TransmitReceive+0x10a>
 80075c0:	8b7b      	ldrh	r3, [r7, #26]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d166      	bne.n	8007694 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ca:	881a      	ldrh	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d6:	1c9a      	adds	r2, r3, #2
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ea:	e053      	b.n	8007694 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d11b      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x176>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d016      	beq.n	8007632 <HAL_SPI_TransmitReceive+0x176>
 8007604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007606:	2b01      	cmp	r3, #1
 8007608:	d113      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760e:	881a      	ldrh	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761a:	1c9a      	adds	r2, r3, #2
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b01      	cmp	r3, #1
 800763e:	d119      	bne.n	8007674 <HAL_SPI_TransmitReceive+0x1b8>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d014      	beq.n	8007674 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	b292      	uxth	r2, r2
 8007656:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765c:	1c9a      	adds	r2, r3, #2
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007670:	2301      	movs	r3, #1
 8007672:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007674:	f7fa fc7e 	bl	8001f74 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007680:	429a      	cmp	r2, r3
 8007682:	d807      	bhi.n	8007694 <HAL_SPI_TransmitReceive+0x1d8>
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d003      	beq.n	8007694 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007692:	e0a7      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1a6      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x130>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1a1      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x130>
 80076a8:	e07c      	b.n	80077a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_SPI_TransmitReceive+0x1fc>
 80076b2:	8b7b      	ldrh	r3, [r7, #26]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d16b      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	330c      	adds	r3, #12
 80076c2:	7812      	ldrb	r2, [r2, #0]
 80076c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076de:	e057      	b.n	8007790 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d11c      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x26c>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d017      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x26c>
 80076f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d114      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	330c      	adds	r3, #12
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800771a:	b29b      	uxth	r3, r3
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b01      	cmp	r3, #1
 8007734:	d119      	bne.n	800776a <HAL_SPI_TransmitReceive+0x2ae>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d014      	beq.n	800776a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007766:	2301      	movs	r3, #1
 8007768:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800776a:	f7fa fc03 	bl	8001f74 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007776:	429a      	cmp	r2, r3
 8007778:	d803      	bhi.n	8007782 <HAL_SPI_TransmitReceive+0x2c6>
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d102      	bne.n	8007788 <HAL_SPI_TransmitReceive+0x2cc>
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	2b00      	cmp	r3, #0
 8007786:	d103      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800778e:	e029      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1a2      	bne.n	80076e0 <HAL_SPI_TransmitReceive+0x224>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d19d      	bne.n	80076e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fe17 	bl	80083dc <SPI_EndRxTxTransaction>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d006      	beq.n	80077c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2220      	movs	r2, #32
 80077be:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80077c0:	e010      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10b      	bne.n	80077e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	617b      	str	r3, [r7, #20]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	e000      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80077e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80077f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3730      	adds	r7, #48	@ 0x30
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_SPI_Transmit_DMA+0x20>
 800781c:	2302      	movs	r3, #2
 800781e:	e09b      	b.n	8007958 <HAL_SPI_Transmit_DMA+0x158>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d002      	beq.n	800783a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007834:	2302      	movs	r3, #2
 8007836:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007838:	e089      	b.n	800794e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_SPI_Transmit_DMA+0x46>
 8007840:	88fb      	ldrh	r3, [r7, #6]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800784a:	e080      	b.n	800794e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2203      	movs	r2, #3
 8007850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	88fa      	ldrh	r2, [r7, #6]
 8007864:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	88fa      	ldrh	r2, [r7, #6]
 800786a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007892:	d10f      	bne.n	80078b4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b8:	4a29      	ldr	r2, [pc, #164]	@ (8007960 <HAL_SPI_Transmit_DMA+0x160>)
 80078ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c0:	4a28      	ldr	r2, [pc, #160]	@ (8007964 <HAL_SPI_Transmit_DMA+0x164>)
 80078c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c8:	4a27      	ldr	r2, [pc, #156]	@ (8007968 <HAL_SPI_Transmit_DMA+0x168>)
 80078ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d0:	2200      	movs	r2, #0
 80078d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078dc:	4619      	mov	r1, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	330c      	adds	r3, #12
 80078e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078ec:	f7fb fe12 	bl	8003514 <HAL_DMA_Start_IT>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00c      	beq.n	8007910 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fa:	f043 0210 	orr.w	r2, r3, #16
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 800790e:	e01e      	b.n	800794e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	d007      	beq.n	800792e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800792c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0220 	orr.w	r2, r2, #32
 800793c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0202 	orr.w	r2, r2, #2
 800794c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	08008145 	.word	0x08008145
 8007964:	08007f65 	.word	0x08007f65
 8007968:	08008199 	.word	0x08008199

0800796c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d110      	bne.n	80079a8 <HAL_SPI_Receive_DMA+0x3c>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800798e:	d10b      	bne.n	80079a8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2204      	movs	r2, #4
 8007994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	68b9      	ldr	r1, [r7, #8]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 f8ac 	bl	8007afc <HAL_SPI_TransmitReceive_DMA>
 80079a4:	4603      	mov	r3, r0
 80079a6:	e09f      	b.n	8007ae8 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_SPI_Receive_DMA+0x4a>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e098      	b.n	8007ae8 <HAL_SPI_Receive_DMA+0x17c>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d002      	beq.n	80079d0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80079ca:	2302      	movs	r3, #2
 80079cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079ce:	e086      	b.n	8007ade <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_SPI_Receive_DMA+0x70>
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079e0:	e07d      	b.n	8007ade <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2204      	movs	r2, #4
 80079e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a22:	d10f      	bne.n	8007a44 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a48:	4a29      	ldr	r2, [pc, #164]	@ (8007af0 <HAL_SPI_Receive_DMA+0x184>)
 8007a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a50:	4a28      	ldr	r2, [pc, #160]	@ (8007af4 <HAL_SPI_Receive_DMA+0x188>)
 8007a52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a58:	4a27      	ldr	r2, [pc, #156]	@ (8007af8 <HAL_SPI_Receive_DMA+0x18c>)
 8007a5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a60:	2200      	movs	r2, #0
 8007a62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	4619      	mov	r1, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a7a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007a7c:	f7fb fd4a 	bl	8003514 <HAL_DMA_Start_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00c      	beq.n	8007aa0 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8a:	f043 0210 	orr.w	r2, r3, #16
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007a9e:	e01e      	b.n	8007ade <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aaa:	2b40      	cmp	r3, #64	@ 0x40
 8007aac:	d007      	beq.n	8007abe <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007abc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0220 	orr.w	r2, r2, #32
 8007acc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0201 	orr.w	r2, r2, #1
 8007adc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	08008161 	.word	0x08008161
 8007af4:	0800800d 	.word	0x0800800d
 8007af8:	08008199 	.word	0x08008199

08007afc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_SPI_TransmitReceive_DMA+0x20>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e0e3      	b.n	8007ce4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b2a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007b32:	7dbb      	ldrb	r3, [r7, #22]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d00d      	beq.n	8007b54 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b3e:	d106      	bne.n	8007b4e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <HAL_SPI_TransmitReceive_DMA+0x52>
 8007b48:	7dbb      	ldrb	r3, [r7, #22]
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d002      	beq.n	8007b54 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007b4e:	2302      	movs	r3, #2
 8007b50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b52:	e0c2      	b.n	8007cda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007b60:	887b      	ldrh	r3, [r7, #2]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d102      	bne.n	8007b6c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b6a:	e0b6      	b.n	8007cda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d003      	beq.n	8007b80 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2205      	movs	r2, #5
 8007b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	887a      	ldrh	r2, [r7, #2]
 8007b90:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	887a      	ldrh	r2, [r7, #2]
 8007b96:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	887a      	ldrh	r2, [r7, #2]
 8007ba2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	887a      	ldrh	r2, [r7, #2]
 8007ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d108      	bne.n	8007bd4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bc6:	4a49      	ldr	r2, [pc, #292]	@ (8007cec <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007bc8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bce:	4a48      	ldr	r2, [pc, #288]	@ (8007cf0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007bd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007bd2:	e007      	b.n	8007be4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd8:	4a46      	ldr	r2, [pc, #280]	@ (8007cf4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8007bda:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be0:	4a45      	ldr	r2, [pc, #276]	@ (8007cf8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007be2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be8:	4a44      	ldr	r2, [pc, #272]	@ (8007cfc <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007bea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	4619      	mov	r1, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c04:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c0c:	f7fb fc82 	bl	8003514 <HAL_DMA_Start_IT>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00c      	beq.n	8007c30 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1a:	f043 0210 	orr.w	r2, r3, #16
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007c2e:	e054      	b.n	8007cda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0201 	orr.w	r2, r2, #1
 8007c3e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c44:	2200      	movs	r2, #0
 8007c46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c54:	2200      	movs	r2, #0
 8007c56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c68:	4619      	mov	r1, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	330c      	adds	r3, #12
 8007c70:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c78:	f7fb fc4c 	bl	8003514 <HAL_DMA_Start_IT>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00c      	beq.n	8007c9c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c86:	f043 0210 	orr.w	r2, r3, #16
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8007c9a:	e01e      	b.n	8007cda <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca6:	2b40      	cmp	r3, #64	@ 0x40
 8007ca8:	d007      	beq.n	8007cba <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cb8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0220 	orr.w	r2, r2, #32
 8007cc8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0202 	orr.w	r2, r2, #2
 8007cd8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	08008161 	.word	0x08008161
 8007cf0:	0800800d 	.word	0x0800800d
 8007cf4:	0800817d 	.word	0x0800817d
 8007cf8:	080080b5 	.word	0x080080b5
 8007cfc:	08008199 	.word	0x08008199

08007d00 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	099b      	lsrs	r3, r3, #6
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10f      	bne.n	8007d44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	099b      	lsrs	r3, r3, #6
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
    return;
 8007d42:	e0d7      	b.n	8007ef4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	085b      	lsrs	r3, r3, #1
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <HAL_SPI_IRQHandler+0x66>
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	09db      	lsrs	r3, r3, #7
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d004      	beq.n	8007d66 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
    return;
 8007d64:	e0c6      	b.n	8007ef4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10c      	bne.n	8007d8c <HAL_SPI_IRQHandler+0x8c>
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	099b      	lsrs	r3, r3, #6
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	0a1b      	lsrs	r3, r3, #8
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80b4 	beq.w	8007ef4 <HAL_SPI_IRQHandler+0x1f4>
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80ad 	beq.w	8007ef4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	099b      	lsrs	r3, r3, #6
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d023      	beq.n	8007dee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d011      	beq.n	8007dd6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db6:	f043 0204 	orr.w	r2, r3, #4
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	e00b      	b.n	8007dee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	693b      	ldr	r3, [r7, #16]
        return;
 8007dec:	e082      	b.n	8007ef4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	095b      	lsrs	r3, r3, #5
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d014      	beq.n	8007e24 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dfe:	f043 0201 	orr.w	r2, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00c      	beq.n	8007e4a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e34:	f043 0208 	orr.w	r2, r3, #8
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60bb      	str	r3, [r7, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	60bb      	str	r3, [r7, #8]
 8007e48:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d04f      	beq.n	8007ef2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <HAL_SPI_IRQHandler+0x17e>
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d034      	beq.n	8007ee8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0203 	bic.w	r2, r2, #3
 8007e8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d011      	beq.n	8007eba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e9a:	4a18      	ldr	r2, [pc, #96]	@ (8007efc <HAL_SPI_IRQHandler+0x1fc>)
 8007e9c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fb fbfe 	bl	80036a4 <HAL_DMA_Abort_IT>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d016      	beq.n	8007ef0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8007efc <HAL_SPI_IRQHandler+0x1fc>)
 8007ec8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fb fbe8 	bl	80036a4 <HAL_DMA_Abort_IT>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ede:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007ee6:	e003      	b.n	8007ef0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f831 	bl	8007f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007eee:	e000      	b.n	8007ef2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007ef0:	bf00      	nop
    return;
 8007ef2:	bf00      	nop
  }
}
 8007ef4:	3720      	adds	r7, #32
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	080081d9 	.word	0x080081d9

08007f00 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f70:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f72:	f7f9 ffff 	bl	8001f74 <HAL_GetTick>
 8007f76:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f86:	d03b      	beq.n	8008000 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0220 	bic.w	r2, r2, #32
 8007f96:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0202 	bic.w	r2, r2, #2
 8007fa6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	2164      	movs	r1, #100	@ 0x64
 8007fac:	6978      	ldr	r0, [r7, #20]
 8007fae:	f000 fa15 	bl	80083dc <SPI_EndRxTxTransaction>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fbc:	f043 0220 	orr.w	r2, r3, #32
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ff8:	6978      	ldr	r0, [r7, #20]
 8007ffa:	f7ff ffa9 	bl	8007f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ffe:	e002      	b.n	8008006 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008000:	6978      	ldr	r0, [r7, #20]
 8008002:	f7f8 fd59 	bl	8000ab8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008018:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800801a:	f7f9 ffab 	bl	8001f74 <HAL_GetTick>
 800801e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800802a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800802e:	d03b      	beq.n	80080a8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0220 	bic.w	r2, r2, #32
 800803e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10d      	bne.n	8008064 <SPI_DMAReceiveCplt+0x58>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008050:	d108      	bne.n	8008064 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0203 	bic.w	r2, r2, #3
 8008060:	605a      	str	r2, [r3, #4]
 8008062:	e007      	b.n	8008074 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0201 	bic.w	r2, r2, #1
 8008072:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	2164      	movs	r1, #100	@ 0x64
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f949 	bl	8008310 <SPI_EndRxTransaction>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2220      	movs	r2, #32
 8008088:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff ff55 	bl	8007f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80080a6:	e002      	b.n	80080ae <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7f8 fd4d 	bl	8000b48 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080c2:	f7f9 ff57 	bl	8001f74 <HAL_GetTick>
 80080c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080d6:	d02f      	beq.n	8008138 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0220 	bic.w	r2, r2, #32
 80080e6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	2164      	movs	r1, #100	@ 0x64
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f975 	bl	80083dc <SPI_EndRxTxTransaction>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080fc:	f043 0220 	orr.w	r2, r3, #32
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0203 	bic.w	r2, r2, #3
 8008112:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7ff ff0d 	bl	8007f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008136:	e002      	b.n	800813e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f7ff fee1 	bl	8007f00 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff fede 	bl	8007f14 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff feda 	bl	8007f28 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008188:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fed6 	bl	8007f3c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0203 	bic.w	r2, r2, #3
 80081b4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ba:	f043 0210 	orr.w	r2, r3, #16
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff fec0 	bl	8007f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081d0:	bf00      	nop
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff feac 	bl	8007f50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008210:	f7f9 feb0 	bl	8001f74 <HAL_GetTick>
 8008214:	4602      	mov	r2, r0
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4413      	add	r3, r2
 800821e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008220:	f7f9 fea8 	bl	8001f74 <HAL_GetTick>
 8008224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008226:	4b39      	ldr	r3, [pc, #228]	@ (800830c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	015b      	lsls	r3, r3, #5
 800822c:	0d1b      	lsrs	r3, r3, #20
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	fb02 f303 	mul.w	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008236:	e054      	b.n	80082e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800823e:	d050      	beq.n	80082e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008240:	f7f9 fe98 	bl	8001f74 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	429a      	cmp	r2, r3
 800824e:	d902      	bls.n	8008256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d13d      	bne.n	80082d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800826e:	d111      	bne.n	8008294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008278:	d004      	beq.n	8008284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008282:	d107      	bne.n	8008294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800829c:	d10f      	bne.n	80082be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e017      	b.n	8008302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	3b01      	subs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4013      	ands	r3, r2
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	bf0c      	ite	eq
 80082f2:	2301      	moveq	r3, #1
 80082f4:	2300      	movne	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d19b      	bne.n	8008238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3720      	adds	r7, #32
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000000 	.word	0x20000000

08008310 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af02      	add	r7, sp, #8
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008324:	d111      	bne.n	800834a <SPI_EndRxTransaction+0x3a>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800832e:	d004      	beq.n	800833a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008338:	d107      	bne.n	800834a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008348:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008352:	d12a      	bne.n	80083aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800835c:	d012      	beq.n	8008384 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	2180      	movs	r1, #128	@ 0x80
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff ff49 	bl	8008200 <SPI_WaitFlagStateUntilTimeout>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d02d      	beq.n	80083d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008378:	f043 0220 	orr.w	r2, r3, #32
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e026      	b.n	80083d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	2101      	movs	r1, #1
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff ff36 	bl	8008200 <SPI_WaitFlagStateUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01a      	beq.n	80083d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839e:	f043 0220 	orr.w	r2, r3, #32
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e013      	b.n	80083d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2200      	movs	r2, #0
 80083b2:	2101      	movs	r1, #1
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff ff23 	bl	8008200 <SPI_WaitFlagStateUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d007      	beq.n	80083d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c4:	f043 0220 	orr.w	r2, r3, #32
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e000      	b.n	80083d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008458 <SPI_EndRxTxTransaction+0x7c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1b      	ldr	r2, [pc, #108]	@ (800845c <SPI_EndRxTxTransaction+0x80>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	0d5b      	lsrs	r3, r3, #21
 80083f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083f8:	fb02 f303 	mul.w	r3, r2, r3
 80083fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008406:	d112      	bne.n	800842e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2200      	movs	r2, #0
 8008410:	2180      	movs	r1, #128	@ 0x80
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f7ff fef4 	bl	8008200 <SPI_WaitFlagStateUntilTimeout>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d016      	beq.n	800844c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008422:	f043 0220 	orr.w	r2, r3, #32
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e00f      	b.n	800844e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00a      	beq.n	800844a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	3b01      	subs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008444:	2b80      	cmp	r3, #128	@ 0x80
 8008446:	d0f2      	beq.n	800842e <SPI_EndRxTxTransaction+0x52>
 8008448:	e000      	b.n	800844c <SPI_EndRxTxTransaction+0x70>
        break;
 800844a:	bf00      	nop
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000000 	.word	0x20000000
 800845c:	165e9f81 	.word	0x165e9f81

08008460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e03f      	b.n	80084f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d106      	bne.n	800848c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7f9 fb74 	bl	8001b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2224      	movs	r2, #36	@ 0x24
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fd7b 	bl	8008fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695a      	ldr	r2, [r3, #20]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68da      	ldr	r2, [r3, #12]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b08a      	sub	sp, #40	@ 0x28
 80084fe:	af02      	add	r7, sp, #8
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	603b      	str	r3, [r7, #0]
 8008506:	4613      	mov	r3, r2
 8008508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b20      	cmp	r3, #32
 8008518:	d17c      	bne.n	8008614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <HAL_UART_Transmit+0x2c>
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e075      	b.n	8008616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_UART_Transmit+0x3e>
 8008534:	2302      	movs	r3, #2
 8008536:	e06e      	b.n	8008616 <HAL_UART_Transmit+0x11c>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2221      	movs	r2, #33	@ 0x21
 800854a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800854e:	f7f9 fd11 	bl	8001f74 <HAL_GetTick>
 8008552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	88fa      	ldrh	r2, [r7, #6]
 800855e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008568:	d108      	bne.n	800857c <HAL_UART_Transmit+0x82>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008572:	2300      	movs	r3, #0
 8008574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	61bb      	str	r3, [r7, #24]
 800857a:	e003      	b.n	8008584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008580:	2300      	movs	r3, #0
 8008582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800858c:	e02a      	b.n	80085e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2200      	movs	r2, #0
 8008596:	2180      	movs	r1, #128	@ 0x80
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 faf9 	bl	8008b90 <UART_WaitOnFlagUntilTimeout>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e036      	b.n	8008616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10b      	bne.n	80085c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	3302      	adds	r3, #2
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	e007      	b.n	80085d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	3301      	adds	r3, #1
 80085d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085da:	b29b      	uxth	r3, r3
 80085dc:	3b01      	subs	r3, #1
 80085de:	b29a      	uxth	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1cf      	bne.n	800858e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2140      	movs	r1, #64	@ 0x40
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fac9 	bl	8008b90 <UART_WaitOnFlagUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e006      	b.n	8008616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2220      	movs	r2, #32
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	e000      	b.n	8008616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008614:	2302      	movs	r3, #2
  }
}
 8008616:	4618      	mov	r0, r3
 8008618:	3720      	adds	r7, #32
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b0ba      	sub	sp, #232	@ 0xe8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008646:	2300      	movs	r3, #0
 8008648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800865e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10f      	bne.n	8008686 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <HAL_UART_IRQHandler+0x66>
 8008672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fbd3 	bl	8008e2a <UART_Receive_IT>
      return;
 8008684:	e256      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 80de 	beq.w	800884c <HAL_UART_IRQHandler+0x22c>
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800869c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80d1 	beq.w	800884c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <HAL_UART_IRQHandler+0xae>
 80086b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c6:	f043 0201 	orr.w	r2, r3, #1
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <HAL_UART_IRQHandler+0xd2>
 80086da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ea:	f043 0202 	orr.w	r2, r3, #2
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <HAL_UART_IRQHandler+0xf6>
 80086fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870e:	f043 0204 	orr.w	r2, r3, #4
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d011      	beq.n	8008746 <HAL_UART_IRQHandler+0x126>
 8008722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800872e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873e:	f043 0208 	orr.w	r2, r3, #8
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 81ed 	beq.w	8008b2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008754:	f003 0320 	and.w	r3, r3, #32
 8008758:	2b00      	cmp	r3, #0
 800875a:	d008      	beq.n	800876e <HAL_UART_IRQHandler+0x14e>
 800875c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fb5e 	bl	8008e2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008778:	2b40      	cmp	r3, #64	@ 0x40
 800877a:	bf0c      	ite	eq
 800877c:	2301      	moveq	r3, #1
 800877e:	2300      	movne	r3, #0
 8008780:	b2db      	uxtb	r3, r3
 8008782:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878a:	f003 0308 	and.w	r3, r3, #8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d103      	bne.n	800879a <HAL_UART_IRQHandler+0x17a>
 8008792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008796:	2b00      	cmp	r3, #0
 8008798:	d04f      	beq.n	800883a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa66 	bl	8008c6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087aa:	2b40      	cmp	r3, #64	@ 0x40
 80087ac:	d141      	bne.n	8008832 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3314      	adds	r3, #20
 80087b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3314      	adds	r3, #20
 80087d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80087da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80087de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80087f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1d9      	bne.n	80087ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d013      	beq.n	800882a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008806:	4a7d      	ldr	r2, [pc, #500]	@ (80089fc <HAL_UART_IRQHandler+0x3dc>)
 8008808:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880e:	4618      	mov	r0, r3
 8008810:	f7fa ff48 	bl	80036a4 <HAL_DMA_Abort_IT>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d016      	beq.n	8008848 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008828:	e00e      	b.n	8008848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f99a 	bl	8008b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	e00a      	b.n	8008848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f996 	bl	8008b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008838:	e006      	b.n	8008848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f992 	bl	8008b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008846:	e170      	b.n	8008b2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008848:	bf00      	nop
    return;
 800884a:	e16e      	b.n	8008b2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008850:	2b01      	cmp	r3, #1
 8008852:	f040 814a 	bne.w	8008aea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885a:	f003 0310 	and.w	r3, r3, #16
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 8143 	beq.w	8008aea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 813c 	beq.w	8008aea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008872:	2300      	movs	r3, #0
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60bb      	str	r3, [r7, #8]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	60bb      	str	r3, [r7, #8]
 8008886:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008892:	2b40      	cmp	r3, #64	@ 0x40
 8008894:	f040 80b4 	bne.w	8008a00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 8140 	beq.w	8008b2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088b6:	429a      	cmp	r2, r3
 80088b8:	f080 8139 	bcs.w	8008b2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ce:	f000 8088 	beq.w	80089e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	330c      	adds	r3, #12
 80088d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	330c      	adds	r3, #12
 80088fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80088fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800890a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008916:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1d9      	bne.n	80088d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3314      	adds	r3, #20
 8008924:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800892e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3314      	adds	r3, #20
 800893e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008942:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008946:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800894a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e1      	bne.n	800891e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3314      	adds	r3, #20
 8008960:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800896a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800896c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008970:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3314      	adds	r3, #20
 800897a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800897e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008980:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008984:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008986:	e841 2300 	strex	r3, r2, [r1]
 800898a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800898c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1e3      	bne.n	800895a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	330c      	adds	r3, #12
 80089a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089aa:	e853 3f00 	ldrex	r3, [r3]
 80089ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089b2:	f023 0310 	bic.w	r3, r3, #16
 80089b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330c      	adds	r3, #12
 80089c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80089c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80089c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e3      	bne.n	80089a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fa fdf1 	bl	80035c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f8c0 	bl	8008b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f8:	e099      	b.n	8008b2e <HAL_UART_IRQHandler+0x50e>
 80089fa:	bf00      	nop
 80089fc:	08008d33 	.word	0x08008d33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 808b 	beq.w	8008b32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 8086 	beq.w	8008b32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	330c      	adds	r3, #12
 8008a46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e3      	bne.n	8008a26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3314      	adds	r3, #20
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3314      	adds	r3, #20
 8008a7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e3      	bne.n	8008a5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0310 	bic.w	r3, r3, #16
 8008aba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ac8:	61fa      	str	r2, [r7, #28]
 8008aca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	69b9      	ldr	r1, [r7, #24]
 8008ace:	69fa      	ldr	r2, [r7, #28]
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e3      	bne.n	8008aa4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f848 	bl	8008b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ae8:	e023      	b.n	8008b32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d009      	beq.n	8008b0a <HAL_UART_IRQHandler+0x4ea>
 8008af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f929 	bl	8008d5a <UART_Transmit_IT>
    return;
 8008b08:	e014      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00e      	beq.n	8008b34 <HAL_UART_IRQHandler+0x514>
 8008b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f969 	bl	8008dfa <UART_EndTransmit_IT>
    return;
 8008b28:	e004      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
    return;
 8008b2a:	bf00      	nop
 8008b2c:	e002      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
      return;
 8008b2e:	bf00      	nop
 8008b30:	e000      	b.n	8008b34 <HAL_UART_IRQHandler+0x514>
      return;
 8008b32:	bf00      	nop
  }
}
 8008b34:	37e8      	adds	r7, #232	@ 0xe8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b090      	sub	sp, #64	@ 0x40
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba0:	e050      	b.n	8008c44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba8:	d04c      	beq.n	8008c44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bb0:	f7f9 f9e0 	bl	8001f74 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d241      	bcs.n	8008c44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	330c      	adds	r3, #12
 8008bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008be0:	637a      	str	r2, [r7, #52]	@ 0x34
 8008be2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008be8:	e841 2300 	strex	r3, r2, [r1]
 8008bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e5      	bne.n	8008bc0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3314      	adds	r3, #20
 8008bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	613b      	str	r3, [r7, #16]
   return(result);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f023 0301 	bic.w	r3, r3, #1
 8008c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3314      	adds	r3, #20
 8008c12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c14:	623a      	str	r2, [r7, #32]
 8008c16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	69f9      	ldr	r1, [r7, #28]
 8008c1a:	6a3a      	ldr	r2, [r7, #32]
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e5      	bne.n	8008bf4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e00f      	b.n	8008c64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	bf0c      	ite	eq
 8008c54:	2301      	moveq	r3, #1
 8008c56:	2300      	movne	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d09f      	beq.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3740      	adds	r7, #64	@ 0x40
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b095      	sub	sp, #84	@ 0x54
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	330c      	adds	r3, #12
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7e:	e853 3f00 	ldrex	r3, [r3]
 8008c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	330c      	adds	r3, #12
 8008c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c94:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c9c:	e841 2300 	strex	r3, r2, [r1]
 8008ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e5      	bne.n	8008c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3314      	adds	r3, #20
 8008cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f023 0301 	bic.w	r3, r3, #1
 8008cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3314      	adds	r3, #20
 8008cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e5      	bne.n	8008ca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d119      	bne.n	8008d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	330c      	adds	r3, #12
 8008cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f023 0310 	bic.w	r3, r3, #16
 8008cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	330c      	adds	r3, #12
 8008d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d04:	61ba      	str	r2, [r7, #24]
 8008d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	6979      	ldr	r1, [r7, #20]
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	613b      	str	r3, [r7, #16]
   return(result);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e5      	bne.n	8008ce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008d26:	bf00      	nop
 8008d28:	3754      	adds	r7, #84	@ 0x54
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff ff09 	bl	8008b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b21      	cmp	r3, #33	@ 0x21
 8008d6c:	d13e      	bne.n	8008dec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d76:	d114      	bne.n	8008da2 <UART_Transmit_IT+0x48>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d110      	bne.n	8008da2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	1c9a      	adds	r2, r3, #2
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	621a      	str	r2, [r3, #32]
 8008da0:	e008      	b.n	8008db4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	1c59      	adds	r1, r3, #1
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6211      	str	r1, [r2, #32]
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10f      	bne.n	8008de8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	e000      	b.n	8008dee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008dec:	2302      	movs	r3, #2
  }
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff fe8e 	bl	8008b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b08c      	sub	sp, #48	@ 0x30
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b22      	cmp	r3, #34	@ 0x22
 8008e3c:	f040 80ab 	bne.w	8008f96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e48:	d117      	bne.n	8008e7a <UART_Receive_IT+0x50>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d113      	bne.n	8008e7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e72:	1c9a      	adds	r2, r3, #2
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e78:	e026      	b.n	8008ec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e8c:	d007      	beq.n	8008e9e <UART_Receive_IT+0x74>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <UART_Receive_IT+0x82>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d106      	bne.n	8008eac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e008      	b.n	8008ebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d15a      	bne.n	8008f92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0220 	bic.w	r2, r2, #32
 8008eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	695a      	ldr	r2, [r3, #20]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0201 	bic.w	r2, r2, #1
 8008f0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d135      	bne.n	8008f88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	330c      	adds	r3, #12
 8008f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	613b      	str	r3, [r7, #16]
   return(result);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f023 0310 	bic.w	r3, r3, #16
 8008f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	330c      	adds	r3, #12
 8008f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f42:	623a      	str	r2, [r7, #32]
 8008f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	69f9      	ldr	r1, [r7, #28]
 8008f48:	6a3a      	ldr	r2, [r7, #32]
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e5      	bne.n	8008f22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 0310 	and.w	r3, r3, #16
 8008f60:	2b10      	cmp	r3, #16
 8008f62:	d10a      	bne.n	8008f7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fdf9 	bl	8008b78 <HAL_UARTEx_RxEventCallback>
 8008f86:	e002      	b.n	8008f8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff fde1 	bl	8008b50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e002      	b.n	8008f98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e000      	b.n	8008f98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f96:	2302      	movs	r3, #2
  }
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3730      	adds	r7, #48	@ 0x30
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa4:	b0c0      	sub	sp, #256	@ 0x100
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fbc:	68d9      	ldr	r1, [r3, #12]
 8008fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	ea40 0301 	orr.w	r3, r0, r1
 8008fc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ff8:	f021 010c 	bic.w	r1, r1, #12
 8008ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009006:	430b      	orrs	r3, r1
 8009008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800900a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901a:	6999      	ldr	r1, [r3, #24]
 800901c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	ea40 0301 	orr.w	r3, r0, r1
 8009026:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b95      	ldr	r3, [pc, #596]	@ (8009284 <UART_SetConfig+0x2e4>)
 8009030:	429a      	cmp	r2, r3
 8009032:	d011      	beq.n	8009058 <UART_SetConfig+0xb8>
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	4b93      	ldr	r3, [pc, #588]	@ (8009288 <UART_SetConfig+0x2e8>)
 800903c:	429a      	cmp	r2, r3
 800903e:	d00b      	beq.n	8009058 <UART_SetConfig+0xb8>
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4b91      	ldr	r3, [pc, #580]	@ (800928c <UART_SetConfig+0x2ec>)
 8009048:	429a      	cmp	r2, r3
 800904a:	d005      	beq.n	8009058 <UART_SetConfig+0xb8>
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b8f      	ldr	r3, [pc, #572]	@ (8009290 <UART_SetConfig+0x2f0>)
 8009054:	429a      	cmp	r2, r3
 8009056:	d104      	bne.n	8009062 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009058:	f7fd fcc2 	bl	80069e0 <HAL_RCC_GetPCLK2Freq>
 800905c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009060:	e003      	b.n	800906a <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009062:	f7fd fca9 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8009066:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800906a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009074:	f040 8110 	bne.w	8009298 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800907c:	2200      	movs	r2, #0
 800907e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009082:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009086:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800908a:	4622      	mov	r2, r4
 800908c:	462b      	mov	r3, r5
 800908e:	1891      	adds	r1, r2, r2
 8009090:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009092:	415b      	adcs	r3, r3
 8009094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800909a:	4621      	mov	r1, r4
 800909c:	eb12 0801 	adds.w	r8, r2, r1
 80090a0:	4629      	mov	r1, r5
 80090a2:	eb43 0901 	adc.w	r9, r3, r1
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090ba:	4690      	mov	r8, r2
 80090bc:	4699      	mov	r9, r3
 80090be:	4623      	mov	r3, r4
 80090c0:	eb18 0303 	adds.w	r3, r8, r3
 80090c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090c8:	462b      	mov	r3, r5
 80090ca:	eb49 0303 	adc.w	r3, r9, r3
 80090ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80090e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090e6:	460b      	mov	r3, r1
 80090e8:	18db      	adds	r3, r3, r3
 80090ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80090ec:	4613      	mov	r3, r2
 80090ee:	eb42 0303 	adc.w	r3, r2, r3
 80090f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80090f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80090f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80090fc:	f7f7 f8e8 	bl	80002d0 <__aeabi_uldivmod>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	4b63      	ldr	r3, [pc, #396]	@ (8009294 <UART_SetConfig+0x2f4>)
 8009106:	fba3 2302 	umull	r2, r3, r3, r2
 800910a:	095b      	lsrs	r3, r3, #5
 800910c:	011c      	lsls	r4, r3, #4
 800910e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009112:	2200      	movs	r2, #0
 8009114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009118:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800911c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009120:	4642      	mov	r2, r8
 8009122:	464b      	mov	r3, r9
 8009124:	1891      	adds	r1, r2, r2
 8009126:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009128:	415b      	adcs	r3, r3
 800912a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800912c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009130:	4641      	mov	r1, r8
 8009132:	eb12 0a01 	adds.w	sl, r2, r1
 8009136:	4649      	mov	r1, r9
 8009138:	eb43 0b01 	adc.w	fp, r3, r1
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009148:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800914c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009150:	4692      	mov	sl, r2
 8009152:	469b      	mov	fp, r3
 8009154:	4643      	mov	r3, r8
 8009156:	eb1a 0303 	adds.w	r3, sl, r3
 800915a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800915e:	464b      	mov	r3, r9
 8009160:	eb4b 0303 	adc.w	r3, fp, r3
 8009164:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009174:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009178:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800917c:	460b      	mov	r3, r1
 800917e:	18db      	adds	r3, r3, r3
 8009180:	643b      	str	r3, [r7, #64]	@ 0x40
 8009182:	4613      	mov	r3, r2
 8009184:	eb42 0303 	adc.w	r3, r2, r3
 8009188:	647b      	str	r3, [r7, #68]	@ 0x44
 800918a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800918e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009192:	f7f7 f89d 	bl	80002d0 <__aeabi_uldivmod>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	4611      	mov	r1, r2
 800919c:	4b3d      	ldr	r3, [pc, #244]	@ (8009294 <UART_SetConfig+0x2f4>)
 800919e:	fba3 2301 	umull	r2, r3, r3, r1
 80091a2:	095b      	lsrs	r3, r3, #5
 80091a4:	2264      	movs	r2, #100	@ 0x64
 80091a6:	fb02 f303 	mul.w	r3, r2, r3
 80091aa:	1acb      	subs	r3, r1, r3
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80091b2:	4b38      	ldr	r3, [pc, #224]	@ (8009294 <UART_SetConfig+0x2f4>)
 80091b4:	fba3 2302 	umull	r2, r3, r3, r2
 80091b8:	095b      	lsrs	r3, r3, #5
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80091c0:	441c      	add	r4, r3
 80091c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80091d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	1891      	adds	r1, r2, r2
 80091da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80091dc:	415b      	adcs	r3, r3
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80091e4:	4641      	mov	r1, r8
 80091e6:	1851      	adds	r1, r2, r1
 80091e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80091ea:	4649      	mov	r1, r9
 80091ec:	414b      	adcs	r3, r1
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80091fc:	4659      	mov	r1, fp
 80091fe:	00cb      	lsls	r3, r1, #3
 8009200:	4651      	mov	r1, sl
 8009202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009206:	4651      	mov	r1, sl
 8009208:	00ca      	lsls	r2, r1, #3
 800920a:	4610      	mov	r0, r2
 800920c:	4619      	mov	r1, r3
 800920e:	4603      	mov	r3, r0
 8009210:	4642      	mov	r2, r8
 8009212:	189b      	adds	r3, r3, r2
 8009214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009218:	464b      	mov	r3, r9
 800921a:	460a      	mov	r2, r1
 800921c:	eb42 0303 	adc.w	r3, r2, r3
 8009220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009230:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009234:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009238:	460b      	mov	r3, r1
 800923a:	18db      	adds	r3, r3, r3
 800923c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800923e:	4613      	mov	r3, r2
 8009240:	eb42 0303 	adc.w	r3, r2, r3
 8009244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800924a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800924e:	f7f7 f83f 	bl	80002d0 <__aeabi_uldivmod>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4b0f      	ldr	r3, [pc, #60]	@ (8009294 <UART_SetConfig+0x2f4>)
 8009258:	fba3 1302 	umull	r1, r3, r3, r2
 800925c:	095b      	lsrs	r3, r3, #5
 800925e:	2164      	movs	r1, #100	@ 0x64
 8009260:	fb01 f303 	mul.w	r3, r1, r3
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	3332      	adds	r3, #50	@ 0x32
 800926a:	4a0a      	ldr	r2, [pc, #40]	@ (8009294 <UART_SetConfig+0x2f4>)
 800926c:	fba2 2303 	umull	r2, r3, r2, r3
 8009270:	095b      	lsrs	r3, r3, #5
 8009272:	f003 0207 	and.w	r2, r3, #7
 8009276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4422      	add	r2, r4
 800927e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009280:	e10a      	b.n	8009498 <UART_SetConfig+0x4f8>
 8009282:	bf00      	nop
 8009284:	40011000 	.word	0x40011000
 8009288:	40011400 	.word	0x40011400
 800928c:	40011800 	.word	0x40011800
 8009290:	40011c00 	.word	0x40011c00
 8009294:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800929c:	2200      	movs	r2, #0
 800929e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80092a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80092aa:	4642      	mov	r2, r8
 80092ac:	464b      	mov	r3, r9
 80092ae:	1891      	adds	r1, r2, r2
 80092b0:	6239      	str	r1, [r7, #32]
 80092b2:	415b      	adcs	r3, r3
 80092b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80092b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092ba:	4641      	mov	r1, r8
 80092bc:	1854      	adds	r4, r2, r1
 80092be:	4649      	mov	r1, r9
 80092c0:	eb43 0501 	adc.w	r5, r3, r1
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	f04f 0300 	mov.w	r3, #0
 80092cc:	00eb      	lsls	r3, r5, #3
 80092ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092d2:	00e2      	lsls	r2, r4, #3
 80092d4:	4614      	mov	r4, r2
 80092d6:	461d      	mov	r5, r3
 80092d8:	4643      	mov	r3, r8
 80092da:	18e3      	adds	r3, r4, r3
 80092dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092e0:	464b      	mov	r3, r9
 80092e2:	eb45 0303 	adc.w	r3, r5, r3
 80092e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80092fa:	f04f 0200 	mov.w	r2, #0
 80092fe:	f04f 0300 	mov.w	r3, #0
 8009302:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009306:	4629      	mov	r1, r5
 8009308:	008b      	lsls	r3, r1, #2
 800930a:	4621      	mov	r1, r4
 800930c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009310:	4621      	mov	r1, r4
 8009312:	008a      	lsls	r2, r1, #2
 8009314:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009318:	f7f6 ffda 	bl	80002d0 <__aeabi_uldivmod>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4b60      	ldr	r3, [pc, #384]	@ (80094a4 <UART_SetConfig+0x504>)
 8009322:	fba3 2302 	umull	r2, r3, r3, r2
 8009326:	095b      	lsrs	r3, r3, #5
 8009328:	011c      	lsls	r4, r3, #4
 800932a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800932e:	2200      	movs	r2, #0
 8009330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009334:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009338:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800933c:	4642      	mov	r2, r8
 800933e:	464b      	mov	r3, r9
 8009340:	1891      	adds	r1, r2, r2
 8009342:	61b9      	str	r1, [r7, #24]
 8009344:	415b      	adcs	r3, r3
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800934c:	4641      	mov	r1, r8
 800934e:	1851      	adds	r1, r2, r1
 8009350:	6139      	str	r1, [r7, #16]
 8009352:	4649      	mov	r1, r9
 8009354:	414b      	adcs	r3, r1
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009364:	4659      	mov	r1, fp
 8009366:	00cb      	lsls	r3, r1, #3
 8009368:	4651      	mov	r1, sl
 800936a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800936e:	4651      	mov	r1, sl
 8009370:	00ca      	lsls	r2, r1, #3
 8009372:	4610      	mov	r0, r2
 8009374:	4619      	mov	r1, r3
 8009376:	4603      	mov	r3, r0
 8009378:	4642      	mov	r2, r8
 800937a:	189b      	adds	r3, r3, r2
 800937c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009380:	464b      	mov	r3, r9
 8009382:	460a      	mov	r2, r1
 8009384:	eb42 0303 	adc.w	r3, r2, r3
 8009388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009396:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009398:	f04f 0200 	mov.w	r2, #0
 800939c:	f04f 0300 	mov.w	r3, #0
 80093a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80093a4:	4649      	mov	r1, r9
 80093a6:	008b      	lsls	r3, r1, #2
 80093a8:	4641      	mov	r1, r8
 80093aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093ae:	4641      	mov	r1, r8
 80093b0:	008a      	lsls	r2, r1, #2
 80093b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80093b6:	f7f6 ff8b 	bl	80002d0 <__aeabi_uldivmod>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	4611      	mov	r1, r2
 80093c0:	4b38      	ldr	r3, [pc, #224]	@ (80094a4 <UART_SetConfig+0x504>)
 80093c2:	fba3 2301 	umull	r2, r3, r3, r1
 80093c6:	095b      	lsrs	r3, r3, #5
 80093c8:	2264      	movs	r2, #100	@ 0x64
 80093ca:	fb02 f303 	mul.w	r3, r2, r3
 80093ce:	1acb      	subs	r3, r1, r3
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	3332      	adds	r3, #50	@ 0x32
 80093d4:	4a33      	ldr	r2, [pc, #204]	@ (80094a4 <UART_SetConfig+0x504>)
 80093d6:	fba2 2303 	umull	r2, r3, r2, r3
 80093da:	095b      	lsrs	r3, r3, #5
 80093dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093e0:	441c      	add	r4, r3
 80093e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093e6:	2200      	movs	r2, #0
 80093e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80093ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80093ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80093f0:	4642      	mov	r2, r8
 80093f2:	464b      	mov	r3, r9
 80093f4:	1891      	adds	r1, r2, r2
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	415b      	adcs	r3, r3
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009400:	4641      	mov	r1, r8
 8009402:	1851      	adds	r1, r2, r1
 8009404:	6039      	str	r1, [r7, #0]
 8009406:	4649      	mov	r1, r9
 8009408:	414b      	adcs	r3, r1
 800940a:	607b      	str	r3, [r7, #4]
 800940c:	f04f 0200 	mov.w	r2, #0
 8009410:	f04f 0300 	mov.w	r3, #0
 8009414:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009418:	4659      	mov	r1, fp
 800941a:	00cb      	lsls	r3, r1, #3
 800941c:	4651      	mov	r1, sl
 800941e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009422:	4651      	mov	r1, sl
 8009424:	00ca      	lsls	r2, r1, #3
 8009426:	4610      	mov	r0, r2
 8009428:	4619      	mov	r1, r3
 800942a:	4603      	mov	r3, r0
 800942c:	4642      	mov	r2, r8
 800942e:	189b      	adds	r3, r3, r2
 8009430:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009432:	464b      	mov	r3, r9
 8009434:	460a      	mov	r2, r1
 8009436:	eb42 0303 	adc.w	r3, r2, r3
 800943a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	663b      	str	r3, [r7, #96]	@ 0x60
 8009446:	667a      	str	r2, [r7, #100]	@ 0x64
 8009448:	f04f 0200 	mov.w	r2, #0
 800944c:	f04f 0300 	mov.w	r3, #0
 8009450:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009454:	4649      	mov	r1, r9
 8009456:	008b      	lsls	r3, r1, #2
 8009458:	4641      	mov	r1, r8
 800945a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800945e:	4641      	mov	r1, r8
 8009460:	008a      	lsls	r2, r1, #2
 8009462:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009466:	f7f6 ff33 	bl	80002d0 <__aeabi_uldivmod>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4b0d      	ldr	r3, [pc, #52]	@ (80094a4 <UART_SetConfig+0x504>)
 8009470:	fba3 1302 	umull	r1, r3, r3, r2
 8009474:	095b      	lsrs	r3, r3, #5
 8009476:	2164      	movs	r1, #100	@ 0x64
 8009478:	fb01 f303 	mul.w	r3, r1, r3
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	3332      	adds	r3, #50	@ 0x32
 8009482:	4a08      	ldr	r2, [pc, #32]	@ (80094a4 <UART_SetConfig+0x504>)
 8009484:	fba2 2303 	umull	r2, r3, r2, r3
 8009488:	095b      	lsrs	r3, r3, #5
 800948a:	f003 020f 	and.w	r2, r3, #15
 800948e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4422      	add	r2, r4
 8009496:	609a      	str	r2, [r3, #8]
}
 8009498:	bf00      	nop
 800949a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800949e:	46bd      	mov	sp, r7
 80094a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094a4:	51eb851f 	.word	0x51eb851f

080094a8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	689a      	ldr	r2, [r3, #8]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	1c5a      	adds	r2, r3, #1
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	601a      	str	r2, [r3, #0]
}
 80094e4:	bf00      	nop
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	6892      	ldr	r2, [r2, #8]
 8009506:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6852      	ldr	r2, [r2, #4]
 8009510:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	429a      	cmp	r2, r3
 800951a:	d103      	bne.n	8009524 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	1e5a      	subs	r2, r3, #1
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800954a:	2300      	movs	r3, #0
 800954c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800954e:	4b4f      	ldr	r3, [pc, #316]	@ (800968c <xTaskIncrementTick+0x148>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 8090 	bne.w	8009678 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009558:	4b4d      	ldr	r3, [pc, #308]	@ (8009690 <xTaskIncrementTick+0x14c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3301      	adds	r3, #1
 800955e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009560:	4a4b      	ldr	r2, [pc, #300]	@ (8009690 <xTaskIncrementTick+0x14c>)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d121      	bne.n	80095b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800956c:	4b49      	ldr	r3, [pc, #292]	@ (8009694 <xTaskIncrementTick+0x150>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009588:	bf00      	nop
 800958a:	bf00      	nop
 800958c:	e7fd      	b.n	800958a <xTaskIncrementTick+0x46>
 800958e:	4b41      	ldr	r3, [pc, #260]	@ (8009694 <xTaskIncrementTick+0x150>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	4b40      	ldr	r3, [pc, #256]	@ (8009698 <xTaskIncrementTick+0x154>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a3e      	ldr	r2, [pc, #248]	@ (8009694 <xTaskIncrementTick+0x150>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	4a3e      	ldr	r2, [pc, #248]	@ (8009698 <xTaskIncrementTick+0x154>)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6013      	str	r3, [r2, #0]
 80095a2:	4b3e      	ldr	r3, [pc, #248]	@ (800969c <xTaskIncrementTick+0x158>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3301      	adds	r3, #1
 80095a8:	4a3c      	ldr	r2, [pc, #240]	@ (800969c <xTaskIncrementTick+0x158>)
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	f000 f8e2 	bl	8009774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095b0:	4b3b      	ldr	r3, [pc, #236]	@ (80096a0 <xTaskIncrementTick+0x15c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d349      	bcc.n	800964e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ba:	4b36      	ldr	r3, [pc, #216]	@ (8009694 <xTaskIncrementTick+0x150>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d104      	bne.n	80095ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c4:	4b36      	ldr	r3, [pc, #216]	@ (80096a0 <xTaskIncrementTick+0x15c>)
 80095c6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ca:	601a      	str	r2, [r3, #0]
					break;
 80095cc:	e03f      	b.n	800964e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ce:	4b31      	ldr	r3, [pc, #196]	@ (8009694 <xTaskIncrementTick+0x150>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d203      	bcs.n	80095ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095e6:	4a2e      	ldr	r2, [pc, #184]	@ (80096a0 <xTaskIncrementTick+0x15c>)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095ec:	e02f      	b.n	800964e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ff7c 	bl	80094f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	3318      	adds	r3, #24
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff ff73 	bl	80094f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800960e:	4b25      	ldr	r3, [pc, #148]	@ (80096a4 <xTaskIncrementTick+0x160>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d903      	bls.n	800961e <xTaskIncrementTick+0xda>
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961a:	4a22      	ldr	r2, [pc, #136]	@ (80096a4 <xTaskIncrementTick+0x160>)
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4a1f      	ldr	r2, [pc, #124]	@ (80096a8 <xTaskIncrementTick+0x164>)
 800962c:	441a      	add	r2, r3
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	3304      	adds	r3, #4
 8009632:	4619      	mov	r1, r3
 8009634:	4610      	mov	r0, r2
 8009636:	f7ff ff37 	bl	80094a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963e:	4b1b      	ldr	r3, [pc, #108]	@ (80096ac <xTaskIncrementTick+0x168>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	429a      	cmp	r2, r3
 8009646:	d3b8      	bcc.n	80095ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009648:	2301      	movs	r3, #1
 800964a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800964c:	e7b5      	b.n	80095ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800964e:	4b17      	ldr	r3, [pc, #92]	@ (80096ac <xTaskIncrementTick+0x168>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009654:	4914      	ldr	r1, [pc, #80]	@ (80096a8 <xTaskIncrementTick+0x164>)
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	440b      	add	r3, r1
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d901      	bls.n	800966a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009666:	2301      	movs	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800966a:	4b11      	ldr	r3, [pc, #68]	@ (80096b0 <xTaskIncrementTick+0x16c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d007      	beq.n	8009682 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009672:	2301      	movs	r3, #1
 8009674:	617b      	str	r3, [r7, #20]
 8009676:	e004      	b.n	8009682 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009678:	4b0e      	ldr	r3, [pc, #56]	@ (80096b4 <xTaskIncrementTick+0x170>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3301      	adds	r3, #1
 800967e:	4a0d      	ldr	r2, [pc, #52]	@ (80096b4 <xTaskIncrementTick+0x170>)
 8009680:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009682:	697b      	ldr	r3, [r7, #20]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000ab8 	.word	0x20000ab8
 8009690:	20000a9c 	.word	0x20000a9c
 8009694:	20000a94 	.word	0x20000a94
 8009698:	20000a98 	.word	0x20000a98
 800969c:	20000ab0 	.word	0x20000ab0
 80096a0:	20000ab4 	.word	0x20000ab4
 80096a4:	20000aa0 	.word	0x20000aa0
 80096a8:	20000634 	.word	0x20000634
 80096ac:	20000630 	.word	0x20000630
 80096b0:	20000aac 	.word	0x20000aac
 80096b4:	20000aa8 	.word	0x20000aa8

080096b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096be:	4b28      	ldr	r3, [pc, #160]	@ (8009760 <vTaskSwitchContext+0xa8>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096c6:	4b27      	ldr	r3, [pc, #156]	@ (8009764 <vTaskSwitchContext+0xac>)
 80096c8:	2201      	movs	r2, #1
 80096ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096cc:	e042      	b.n	8009754 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80096ce:	4b25      	ldr	r3, [pc, #148]	@ (8009764 <vTaskSwitchContext+0xac>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d4:	4b24      	ldr	r3, [pc, #144]	@ (8009768 <vTaskSwitchContext+0xb0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	e011      	b.n	8009700 <vTaskSwitchContext+0x48>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <vTaskSwitchContext+0x42>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	607b      	str	r3, [r7, #4]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <vTaskSwitchContext+0x3e>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	491a      	ldr	r1, [pc, #104]	@ (800976c <vTaskSwitchContext+0xb4>)
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	440b      	add	r3, r1
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0e3      	beq.n	80096dc <vTaskSwitchContext+0x24>
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4a13      	ldr	r2, [pc, #76]	@ (800976c <vTaskSwitchContext+0xb4>)
 8009720:	4413      	add	r3, r2
 8009722:	60bb      	str	r3, [r7, #8]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	605a      	str	r2, [r3, #4]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	3308      	adds	r3, #8
 8009736:	429a      	cmp	r2, r3
 8009738:	d104      	bne.n	8009744 <vTaskSwitchContext+0x8c>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	605a      	str	r2, [r3, #4]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	4a09      	ldr	r2, [pc, #36]	@ (8009770 <vTaskSwitchContext+0xb8>)
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	4a06      	ldr	r2, [pc, #24]	@ (8009768 <vTaskSwitchContext+0xb0>)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6013      	str	r3, [r2, #0]
}
 8009754:	bf00      	nop
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20000ab8 	.word	0x20000ab8
 8009764:	20000aac 	.word	0x20000aac
 8009768:	20000aa0 	.word	0x20000aa0
 800976c:	20000634 	.word	0x20000634
 8009770:	20000630 	.word	0x20000630

08009774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800977a:	4b0c      	ldr	r3, [pc, #48]	@ (80097ac <prvResetNextTaskUnblockTime+0x38>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d104      	bne.n	800978e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009784:	4b0a      	ldr	r3, [pc, #40]	@ (80097b0 <prvResetNextTaskUnblockTime+0x3c>)
 8009786:	f04f 32ff 	mov.w	r2, #4294967295
 800978a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800978c:	e008      	b.n	80097a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800978e:	4b07      	ldr	r3, [pc, #28]	@ (80097ac <prvResetNextTaskUnblockTime+0x38>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	4a04      	ldr	r2, [pc, #16]	@ (80097b0 <prvResetNextTaskUnblockTime+0x3c>)
 800979e:	6013      	str	r3, [r2, #0]
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	20000a94 	.word	0x20000a94
 80097b0:	20000ab4 	.word	0x20000ab4

080097b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097ba:	4b0b      	ldr	r3, [pc, #44]	@ (80097e8 <xTaskGetSchedulerState+0x34>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d102      	bne.n	80097c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097c2:	2301      	movs	r3, #1
 80097c4:	607b      	str	r3, [r7, #4]
 80097c6:	e008      	b.n	80097da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097c8:	4b08      	ldr	r3, [pc, #32]	@ (80097ec <xTaskGetSchedulerState+0x38>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097d0:	2302      	movs	r3, #2
 80097d2:	607b      	str	r3, [r7, #4]
 80097d4:	e001      	b.n	80097da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097d6:	2300      	movs	r3, #0
 80097d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097da:	687b      	ldr	r3, [r7, #4]
	}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	20000aa4 	.word	0x20000aa4
 80097ec:	20000ab8 	.word	0x20000ab8

080097f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097f0:	4b07      	ldr	r3, [pc, #28]	@ (8009810 <pxCurrentTCBConst2>)
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	6808      	ldr	r0, [r1, #0]
 80097f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	f380 8809 	msr	PSP, r0
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8811 	msr	BASEPRI, r0
 800980a:	4770      	bx	lr
 800980c:	f3af 8000 	nop.w

08009810 <pxCurrentTCBConst2>:
 8009810:	20000630 	.word	0x20000630
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
	...

08009820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009820:	f3ef 8009 	mrs	r0, PSP
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	4b15      	ldr	r3, [pc, #84]	@ (8009880 <pxCurrentTCBConst>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	f01e 0f10 	tst.w	lr, #16
 8009830:	bf08      	it	eq
 8009832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983a:	6010      	str	r0, [r2, #0]
 800983c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009844:	f380 8811 	msr	BASEPRI, r0
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f7ff ff32 	bl	80096b8 <vTaskSwitchContext>
 8009854:	f04f 0000 	mov.w	r0, #0
 8009858:	f380 8811 	msr	BASEPRI, r0
 800985c:	bc09      	pop	{r0, r3}
 800985e:	6819      	ldr	r1, [r3, #0]
 8009860:	6808      	ldr	r0, [r1, #0]
 8009862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009866:	f01e 0f10 	tst.w	lr, #16
 800986a:	bf08      	it	eq
 800986c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009870:	f380 8809 	msr	PSP, r0
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	f3af 8000 	nop.w

08009880 <pxCurrentTCBConst>:
 8009880:	20000630 	.word	0x20000630
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop

08009888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	607b      	str	r3, [r7, #4]
}
 80098a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098a2:	f7ff fe4f 	bl	8009544 <xTaskIncrementTick>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098ac:	4b06      	ldr	r3, [pc, #24]	@ (80098c8 <xPortSysTickHandler+0x40>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	2300      	movs	r3, #0
 80098b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	e000ed04 	.word	0xe000ed04

080098cc <sniprintf>:
 80098cc:	b40c      	push	{r2, r3}
 80098ce:	b530      	push	{r4, r5, lr}
 80098d0:	4b18      	ldr	r3, [pc, #96]	@ (8009934 <sniprintf+0x68>)
 80098d2:	1e0c      	subs	r4, r1, #0
 80098d4:	681d      	ldr	r5, [r3, #0]
 80098d6:	b09d      	sub	sp, #116	@ 0x74
 80098d8:	da08      	bge.n	80098ec <sniprintf+0x20>
 80098da:	238b      	movs	r3, #139	@ 0x8b
 80098dc:	602b      	str	r3, [r5, #0]
 80098de:	f04f 30ff 	mov.w	r0, #4294967295
 80098e2:	b01d      	add	sp, #116	@ 0x74
 80098e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098e8:	b002      	add	sp, #8
 80098ea:	4770      	bx	lr
 80098ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80098f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80098f4:	f04f 0300 	mov.w	r3, #0
 80098f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80098fa:	bf14      	ite	ne
 80098fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009900:	4623      	moveq	r3, r4
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	9307      	str	r3, [sp, #28]
 8009906:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800990a:	9002      	str	r0, [sp, #8]
 800990c:	9006      	str	r0, [sp, #24]
 800990e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009912:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009914:	ab21      	add	r3, sp, #132	@ 0x84
 8009916:	a902      	add	r1, sp, #8
 8009918:	4628      	mov	r0, r5
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	f000 f9a2 	bl	8009c64 <_svfiprintf_r>
 8009920:	1c43      	adds	r3, r0, #1
 8009922:	bfbc      	itt	lt
 8009924:	238b      	movlt	r3, #139	@ 0x8b
 8009926:	602b      	strlt	r3, [r5, #0]
 8009928:	2c00      	cmp	r4, #0
 800992a:	d0da      	beq.n	80098e2 <sniprintf+0x16>
 800992c:	9b02      	ldr	r3, [sp, #8]
 800992e:	2200      	movs	r2, #0
 8009930:	701a      	strb	r2, [r3, #0]
 8009932:	e7d6      	b.n	80098e2 <sniprintf+0x16>
 8009934:	2000000c 	.word	0x2000000c

08009938 <memset>:
 8009938:	4402      	add	r2, r0
 800993a:	4603      	mov	r3, r0
 800993c:	4293      	cmp	r3, r2
 800993e:	d100      	bne.n	8009942 <memset+0xa>
 8009940:	4770      	bx	lr
 8009942:	f803 1b01 	strb.w	r1, [r3], #1
 8009946:	e7f9      	b.n	800993c <memset+0x4>

08009948 <__errno>:
 8009948:	4b01      	ldr	r3, [pc, #4]	@ (8009950 <__errno+0x8>)
 800994a:	6818      	ldr	r0, [r3, #0]
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	2000000c 	.word	0x2000000c

08009954 <__libc_init_array>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	4d0d      	ldr	r5, [pc, #52]	@ (800998c <__libc_init_array+0x38>)
 8009958:	4c0d      	ldr	r4, [pc, #52]	@ (8009990 <__libc_init_array+0x3c>)
 800995a:	1b64      	subs	r4, r4, r5
 800995c:	10a4      	asrs	r4, r4, #2
 800995e:	2600      	movs	r6, #0
 8009960:	42a6      	cmp	r6, r4
 8009962:	d109      	bne.n	8009978 <__libc_init_array+0x24>
 8009964:	4d0b      	ldr	r5, [pc, #44]	@ (8009994 <__libc_init_array+0x40>)
 8009966:	4c0c      	ldr	r4, [pc, #48]	@ (8009998 <__libc_init_array+0x44>)
 8009968:	f000 fc64 	bl	800a234 <_init>
 800996c:	1b64      	subs	r4, r4, r5
 800996e:	10a4      	asrs	r4, r4, #2
 8009970:	2600      	movs	r6, #0
 8009972:	42a6      	cmp	r6, r4
 8009974:	d105      	bne.n	8009982 <__libc_init_array+0x2e>
 8009976:	bd70      	pop	{r4, r5, r6, pc}
 8009978:	f855 3b04 	ldr.w	r3, [r5], #4
 800997c:	4798      	blx	r3
 800997e:	3601      	adds	r6, #1
 8009980:	e7ee      	b.n	8009960 <__libc_init_array+0xc>
 8009982:	f855 3b04 	ldr.w	r3, [r5], #4
 8009986:	4798      	blx	r3
 8009988:	3601      	adds	r6, #1
 800998a:	e7f2      	b.n	8009972 <__libc_init_array+0x1e>
 800998c:	0800a7a8 	.word	0x0800a7a8
 8009990:	0800a7a8 	.word	0x0800a7a8
 8009994:	0800a7a8 	.word	0x0800a7a8
 8009998:	0800a7ac 	.word	0x0800a7ac

0800999c <__retarget_lock_acquire_recursive>:
 800999c:	4770      	bx	lr

0800999e <__retarget_lock_release_recursive>:
 800999e:	4770      	bx	lr

080099a0 <memcpy>:
 80099a0:	440a      	add	r2, r1
 80099a2:	4291      	cmp	r1, r2
 80099a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099a8:	d100      	bne.n	80099ac <memcpy+0xc>
 80099aa:	4770      	bx	lr
 80099ac:	b510      	push	{r4, lr}
 80099ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099b6:	4291      	cmp	r1, r2
 80099b8:	d1f9      	bne.n	80099ae <memcpy+0xe>
 80099ba:	bd10      	pop	{r4, pc}

080099bc <_free_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4605      	mov	r5, r0
 80099c0:	2900      	cmp	r1, #0
 80099c2:	d041      	beq.n	8009a48 <_free_r+0x8c>
 80099c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c8:	1f0c      	subs	r4, r1, #4
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfb8      	it	lt
 80099ce:	18e4      	addlt	r4, r4, r3
 80099d0:	f000 f8e0 	bl	8009b94 <__malloc_lock>
 80099d4:	4a1d      	ldr	r2, [pc, #116]	@ (8009a4c <_free_r+0x90>)
 80099d6:	6813      	ldr	r3, [r2, #0]
 80099d8:	b933      	cbnz	r3, 80099e8 <_free_r+0x2c>
 80099da:	6063      	str	r3, [r4, #4]
 80099dc:	6014      	str	r4, [r2, #0]
 80099de:	4628      	mov	r0, r5
 80099e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e4:	f000 b8dc 	b.w	8009ba0 <__malloc_unlock>
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	d908      	bls.n	80099fe <_free_r+0x42>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	1821      	adds	r1, r4, r0
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf01      	itttt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	1809      	addeq	r1, r1, r0
 80099fa:	6021      	streq	r1, [r4, #0]
 80099fc:	e7ed      	b.n	80099da <_free_r+0x1e>
 80099fe:	461a      	mov	r2, r3
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	b10b      	cbz	r3, 8009a08 <_free_r+0x4c>
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	d9fa      	bls.n	80099fe <_free_r+0x42>
 8009a08:	6811      	ldr	r1, [r2, #0]
 8009a0a:	1850      	adds	r0, r2, r1
 8009a0c:	42a0      	cmp	r0, r4
 8009a0e:	d10b      	bne.n	8009a28 <_free_r+0x6c>
 8009a10:	6820      	ldr	r0, [r4, #0]
 8009a12:	4401      	add	r1, r0
 8009a14:	1850      	adds	r0, r2, r1
 8009a16:	4283      	cmp	r3, r0
 8009a18:	6011      	str	r1, [r2, #0]
 8009a1a:	d1e0      	bne.n	80099de <_free_r+0x22>
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	6053      	str	r3, [r2, #4]
 8009a22:	4408      	add	r0, r1
 8009a24:	6010      	str	r0, [r2, #0]
 8009a26:	e7da      	b.n	80099de <_free_r+0x22>
 8009a28:	d902      	bls.n	8009a30 <_free_r+0x74>
 8009a2a:	230c      	movs	r3, #12
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	e7d6      	b.n	80099de <_free_r+0x22>
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	1821      	adds	r1, r4, r0
 8009a34:	428b      	cmp	r3, r1
 8009a36:	bf04      	itt	eq
 8009a38:	6819      	ldreq	r1, [r3, #0]
 8009a3a:	685b      	ldreq	r3, [r3, #4]
 8009a3c:	6063      	str	r3, [r4, #4]
 8009a3e:	bf04      	itt	eq
 8009a40:	1809      	addeq	r1, r1, r0
 8009a42:	6021      	streq	r1, [r4, #0]
 8009a44:	6054      	str	r4, [r2, #4]
 8009a46:	e7ca      	b.n	80099de <_free_r+0x22>
 8009a48:	bd38      	pop	{r3, r4, r5, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000c00 	.word	0x20000c00

08009a50 <sbrk_aligned>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	4e0f      	ldr	r6, [pc, #60]	@ (8009a90 <sbrk_aligned+0x40>)
 8009a54:	460c      	mov	r4, r1
 8009a56:	6831      	ldr	r1, [r6, #0]
 8009a58:	4605      	mov	r5, r0
 8009a5a:	b911      	cbnz	r1, 8009a62 <sbrk_aligned+0x12>
 8009a5c:	f000 fba4 	bl	800a1a8 <_sbrk_r>
 8009a60:	6030      	str	r0, [r6, #0]
 8009a62:	4621      	mov	r1, r4
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 fb9f 	bl	800a1a8 <_sbrk_r>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d103      	bne.n	8009a76 <sbrk_aligned+0x26>
 8009a6e:	f04f 34ff 	mov.w	r4, #4294967295
 8009a72:	4620      	mov	r0, r4
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	1cc4      	adds	r4, r0, #3
 8009a78:	f024 0403 	bic.w	r4, r4, #3
 8009a7c:	42a0      	cmp	r0, r4
 8009a7e:	d0f8      	beq.n	8009a72 <sbrk_aligned+0x22>
 8009a80:	1a21      	subs	r1, r4, r0
 8009a82:	4628      	mov	r0, r5
 8009a84:	f000 fb90 	bl	800a1a8 <_sbrk_r>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d1f2      	bne.n	8009a72 <sbrk_aligned+0x22>
 8009a8c:	e7ef      	b.n	8009a6e <sbrk_aligned+0x1e>
 8009a8e:	bf00      	nop
 8009a90:	20000bfc 	.word	0x20000bfc

08009a94 <_malloc_r>:
 8009a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a98:	1ccd      	adds	r5, r1, #3
 8009a9a:	f025 0503 	bic.w	r5, r5, #3
 8009a9e:	3508      	adds	r5, #8
 8009aa0:	2d0c      	cmp	r5, #12
 8009aa2:	bf38      	it	cc
 8009aa4:	250c      	movcc	r5, #12
 8009aa6:	2d00      	cmp	r5, #0
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	db01      	blt.n	8009ab0 <_malloc_r+0x1c>
 8009aac:	42a9      	cmp	r1, r5
 8009aae:	d904      	bls.n	8009aba <_malloc_r+0x26>
 8009ab0:	230c      	movs	r3, #12
 8009ab2:	6033      	str	r3, [r6, #0]
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b90 <_malloc_r+0xfc>
 8009abe:	f000 f869 	bl	8009b94 <__malloc_lock>
 8009ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac6:	461c      	mov	r4, r3
 8009ac8:	bb44      	cbnz	r4, 8009b1c <_malloc_r+0x88>
 8009aca:	4629      	mov	r1, r5
 8009acc:	4630      	mov	r0, r6
 8009ace:	f7ff ffbf 	bl	8009a50 <sbrk_aligned>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	d158      	bne.n	8009b8a <_malloc_r+0xf6>
 8009ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8009adc:	4627      	mov	r7, r4
 8009ade:	2f00      	cmp	r7, #0
 8009ae0:	d143      	bne.n	8009b6a <_malloc_r+0xd6>
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	d04b      	beq.n	8009b7e <_malloc_r+0xea>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4630      	mov	r0, r6
 8009aec:	eb04 0903 	add.w	r9, r4, r3
 8009af0:	f000 fb5a 	bl	800a1a8 <_sbrk_r>
 8009af4:	4581      	cmp	r9, r0
 8009af6:	d142      	bne.n	8009b7e <_malloc_r+0xea>
 8009af8:	6821      	ldr	r1, [r4, #0]
 8009afa:	1a6d      	subs	r5, r5, r1
 8009afc:	4629      	mov	r1, r5
 8009afe:	4630      	mov	r0, r6
 8009b00:	f7ff ffa6 	bl	8009a50 <sbrk_aligned>
 8009b04:	3001      	adds	r0, #1
 8009b06:	d03a      	beq.n	8009b7e <_malloc_r+0xea>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	442b      	add	r3, r5
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	bb62      	cbnz	r2, 8009b70 <_malloc_r+0xdc>
 8009b16:	f8c8 7000 	str.w	r7, [r8]
 8009b1a:	e00f      	b.n	8009b3c <_malloc_r+0xa8>
 8009b1c:	6822      	ldr	r2, [r4, #0]
 8009b1e:	1b52      	subs	r2, r2, r5
 8009b20:	d420      	bmi.n	8009b64 <_malloc_r+0xd0>
 8009b22:	2a0b      	cmp	r2, #11
 8009b24:	d917      	bls.n	8009b56 <_malloc_r+0xc2>
 8009b26:	1961      	adds	r1, r4, r5
 8009b28:	42a3      	cmp	r3, r4
 8009b2a:	6025      	str	r5, [r4, #0]
 8009b2c:	bf18      	it	ne
 8009b2e:	6059      	strne	r1, [r3, #4]
 8009b30:	6863      	ldr	r3, [r4, #4]
 8009b32:	bf08      	it	eq
 8009b34:	f8c8 1000 	streq.w	r1, [r8]
 8009b38:	5162      	str	r2, [r4, r5]
 8009b3a:	604b      	str	r3, [r1, #4]
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f000 f82f 	bl	8009ba0 <__malloc_unlock>
 8009b42:	f104 000b 	add.w	r0, r4, #11
 8009b46:	1d23      	adds	r3, r4, #4
 8009b48:	f020 0007 	bic.w	r0, r0, #7
 8009b4c:	1ac2      	subs	r2, r0, r3
 8009b4e:	bf1c      	itt	ne
 8009b50:	1a1b      	subne	r3, r3, r0
 8009b52:	50a3      	strne	r3, [r4, r2]
 8009b54:	e7af      	b.n	8009ab6 <_malloc_r+0x22>
 8009b56:	6862      	ldr	r2, [r4, #4]
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	bf0c      	ite	eq
 8009b5c:	f8c8 2000 	streq.w	r2, [r8]
 8009b60:	605a      	strne	r2, [r3, #4]
 8009b62:	e7eb      	b.n	8009b3c <_malloc_r+0xa8>
 8009b64:	4623      	mov	r3, r4
 8009b66:	6864      	ldr	r4, [r4, #4]
 8009b68:	e7ae      	b.n	8009ac8 <_malloc_r+0x34>
 8009b6a:	463c      	mov	r4, r7
 8009b6c:	687f      	ldr	r7, [r7, #4]
 8009b6e:	e7b6      	b.n	8009ade <_malloc_r+0x4a>
 8009b70:	461a      	mov	r2, r3
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	d1fb      	bne.n	8009b70 <_malloc_r+0xdc>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	6053      	str	r3, [r2, #4]
 8009b7c:	e7de      	b.n	8009b3c <_malloc_r+0xa8>
 8009b7e:	230c      	movs	r3, #12
 8009b80:	6033      	str	r3, [r6, #0]
 8009b82:	4630      	mov	r0, r6
 8009b84:	f000 f80c 	bl	8009ba0 <__malloc_unlock>
 8009b88:	e794      	b.n	8009ab4 <_malloc_r+0x20>
 8009b8a:	6005      	str	r5, [r0, #0]
 8009b8c:	e7d6      	b.n	8009b3c <_malloc_r+0xa8>
 8009b8e:	bf00      	nop
 8009b90:	20000c00 	.word	0x20000c00

08009b94 <__malloc_lock>:
 8009b94:	4801      	ldr	r0, [pc, #4]	@ (8009b9c <__malloc_lock+0x8>)
 8009b96:	f7ff bf01 	b.w	800999c <__retarget_lock_acquire_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	20000bf8 	.word	0x20000bf8

08009ba0 <__malloc_unlock>:
 8009ba0:	4801      	ldr	r0, [pc, #4]	@ (8009ba8 <__malloc_unlock+0x8>)
 8009ba2:	f7ff befc 	b.w	800999e <__retarget_lock_release_recursive>
 8009ba6:	bf00      	nop
 8009ba8:	20000bf8 	.word	0x20000bf8

08009bac <__ssputs_r>:
 8009bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb0:	688e      	ldr	r6, [r1, #8]
 8009bb2:	461f      	mov	r7, r3
 8009bb4:	42be      	cmp	r6, r7
 8009bb6:	680b      	ldr	r3, [r1, #0]
 8009bb8:	4682      	mov	sl, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	4690      	mov	r8, r2
 8009bbe:	d82d      	bhi.n	8009c1c <__ssputs_r+0x70>
 8009bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009bc8:	d026      	beq.n	8009c18 <__ssputs_r+0x6c>
 8009bca:	6965      	ldr	r5, [r4, #20]
 8009bcc:	6909      	ldr	r1, [r1, #16]
 8009bce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bd2:	eba3 0901 	sub.w	r9, r3, r1
 8009bd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bda:	1c7b      	adds	r3, r7, #1
 8009bdc:	444b      	add	r3, r9
 8009bde:	106d      	asrs	r5, r5, #1
 8009be0:	429d      	cmp	r5, r3
 8009be2:	bf38      	it	cc
 8009be4:	461d      	movcc	r5, r3
 8009be6:	0553      	lsls	r3, r2, #21
 8009be8:	d527      	bpl.n	8009c3a <__ssputs_r+0x8e>
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7ff ff52 	bl	8009a94 <_malloc_r>
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	b360      	cbz	r0, 8009c4e <__ssputs_r+0xa2>
 8009bf4:	6921      	ldr	r1, [r4, #16]
 8009bf6:	464a      	mov	r2, r9
 8009bf8:	f7ff fed2 	bl	80099a0 <memcpy>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	6126      	str	r6, [r4, #16]
 8009c0a:	6165      	str	r5, [r4, #20]
 8009c0c:	444e      	add	r6, r9
 8009c0e:	eba5 0509 	sub.w	r5, r5, r9
 8009c12:	6026      	str	r6, [r4, #0]
 8009c14:	60a5      	str	r5, [r4, #8]
 8009c16:	463e      	mov	r6, r7
 8009c18:	42be      	cmp	r6, r7
 8009c1a:	d900      	bls.n	8009c1e <__ssputs_r+0x72>
 8009c1c:	463e      	mov	r6, r7
 8009c1e:	6820      	ldr	r0, [r4, #0]
 8009c20:	4632      	mov	r2, r6
 8009c22:	4641      	mov	r1, r8
 8009c24:	f000 faa6 	bl	800a174 <memmove>
 8009c28:	68a3      	ldr	r3, [r4, #8]
 8009c2a:	1b9b      	subs	r3, r3, r6
 8009c2c:	60a3      	str	r3, [r4, #8]
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	4433      	add	r3, r6
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	2000      	movs	r0, #0
 8009c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	f000 fac4 	bl	800a1c8 <_realloc_r>
 8009c40:	4606      	mov	r6, r0
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d1e0      	bne.n	8009c08 <__ssputs_r+0x5c>
 8009c46:	6921      	ldr	r1, [r4, #16]
 8009c48:	4650      	mov	r0, sl
 8009c4a:	f7ff feb7 	bl	80099bc <_free_r>
 8009c4e:	230c      	movs	r3, #12
 8009c50:	f8ca 3000 	str.w	r3, [sl]
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c5a:	81a3      	strh	r3, [r4, #12]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	e7e9      	b.n	8009c36 <__ssputs_r+0x8a>
	...

08009c64 <_svfiprintf_r>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	4698      	mov	r8, r3
 8009c6a:	898b      	ldrh	r3, [r1, #12]
 8009c6c:	061b      	lsls	r3, r3, #24
 8009c6e:	b09d      	sub	sp, #116	@ 0x74
 8009c70:	4607      	mov	r7, r0
 8009c72:	460d      	mov	r5, r1
 8009c74:	4614      	mov	r4, r2
 8009c76:	d510      	bpl.n	8009c9a <_svfiprintf_r+0x36>
 8009c78:	690b      	ldr	r3, [r1, #16]
 8009c7a:	b973      	cbnz	r3, 8009c9a <_svfiprintf_r+0x36>
 8009c7c:	2140      	movs	r1, #64	@ 0x40
 8009c7e:	f7ff ff09 	bl	8009a94 <_malloc_r>
 8009c82:	6028      	str	r0, [r5, #0]
 8009c84:	6128      	str	r0, [r5, #16]
 8009c86:	b930      	cbnz	r0, 8009c96 <_svfiprintf_r+0x32>
 8009c88:	230c      	movs	r3, #12
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	b01d      	add	sp, #116	@ 0x74
 8009c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c96:	2340      	movs	r3, #64	@ 0x40
 8009c98:	616b      	str	r3, [r5, #20]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c9e:	2320      	movs	r3, #32
 8009ca0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ca8:	2330      	movs	r3, #48	@ 0x30
 8009caa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e48 <_svfiprintf_r+0x1e4>
 8009cae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cb2:	f04f 0901 	mov.w	r9, #1
 8009cb6:	4623      	mov	r3, r4
 8009cb8:	469a      	mov	sl, r3
 8009cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cbe:	b10a      	cbz	r2, 8009cc4 <_svfiprintf_r+0x60>
 8009cc0:	2a25      	cmp	r2, #37	@ 0x25
 8009cc2:	d1f9      	bne.n	8009cb8 <_svfiprintf_r+0x54>
 8009cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8009cc8:	d00b      	beq.n	8009ce2 <_svfiprintf_r+0x7e>
 8009cca:	465b      	mov	r3, fp
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	f7ff ff6b 	bl	8009bac <__ssputs_r>
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	f000 80a7 	beq.w	8009e2a <_svfiprintf_r+0x1c6>
 8009cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cde:	445a      	add	r2, fp
 8009ce0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 809f 	beq.w	8009e2a <_svfiprintf_r+0x1c6>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf6:	f10a 0a01 	add.w	sl, sl, #1
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	9307      	str	r3, [sp, #28]
 8009cfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d02:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d04:	4654      	mov	r4, sl
 8009d06:	2205      	movs	r2, #5
 8009d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d0c:	484e      	ldr	r0, [pc, #312]	@ (8009e48 <_svfiprintf_r+0x1e4>)
 8009d0e:	f7f6 fa8f 	bl	8000230 <memchr>
 8009d12:	9a04      	ldr	r2, [sp, #16]
 8009d14:	b9d8      	cbnz	r0, 8009d4e <_svfiprintf_r+0xea>
 8009d16:	06d0      	lsls	r0, r2, #27
 8009d18:	bf44      	itt	mi
 8009d1a:	2320      	movmi	r3, #32
 8009d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d20:	0711      	lsls	r1, r2, #28
 8009d22:	bf44      	itt	mi
 8009d24:	232b      	movmi	r3, #43	@ 0x2b
 8009d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d30:	d015      	beq.n	8009d5e <_svfiprintf_r+0xfa>
 8009d32:	9a07      	ldr	r2, [sp, #28]
 8009d34:	4654      	mov	r4, sl
 8009d36:	2000      	movs	r0, #0
 8009d38:	f04f 0c0a 	mov.w	ip, #10
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d42:	3b30      	subs	r3, #48	@ 0x30
 8009d44:	2b09      	cmp	r3, #9
 8009d46:	d94b      	bls.n	8009de0 <_svfiprintf_r+0x17c>
 8009d48:	b1b0      	cbz	r0, 8009d78 <_svfiprintf_r+0x114>
 8009d4a:	9207      	str	r2, [sp, #28]
 8009d4c:	e014      	b.n	8009d78 <_svfiprintf_r+0x114>
 8009d4e:	eba0 0308 	sub.w	r3, r0, r8
 8009d52:	fa09 f303 	lsl.w	r3, r9, r3
 8009d56:	4313      	orrs	r3, r2
 8009d58:	9304      	str	r3, [sp, #16]
 8009d5a:	46a2      	mov	sl, r4
 8009d5c:	e7d2      	b.n	8009d04 <_svfiprintf_r+0xa0>
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	1d19      	adds	r1, r3, #4
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	9103      	str	r1, [sp, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bfbb      	ittet	lt
 8009d6a:	425b      	neglt	r3, r3
 8009d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d70:	9307      	strge	r3, [sp, #28]
 8009d72:	9307      	strlt	r3, [sp, #28]
 8009d74:	bfb8      	it	lt
 8009d76:	9204      	strlt	r2, [sp, #16]
 8009d78:	7823      	ldrb	r3, [r4, #0]
 8009d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d7c:	d10a      	bne.n	8009d94 <_svfiprintf_r+0x130>
 8009d7e:	7863      	ldrb	r3, [r4, #1]
 8009d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d82:	d132      	bne.n	8009dea <_svfiprintf_r+0x186>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	1d1a      	adds	r2, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9203      	str	r2, [sp, #12]
 8009d8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d90:	3402      	adds	r4, #2
 8009d92:	9305      	str	r3, [sp, #20]
 8009d94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e58 <_svfiprintf_r+0x1f4>
 8009d98:	7821      	ldrb	r1, [r4, #0]
 8009d9a:	2203      	movs	r2, #3
 8009d9c:	4650      	mov	r0, sl
 8009d9e:	f7f6 fa47 	bl	8000230 <memchr>
 8009da2:	b138      	cbz	r0, 8009db4 <_svfiprintf_r+0x150>
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	eba0 000a 	sub.w	r0, r0, sl
 8009daa:	2240      	movs	r2, #64	@ 0x40
 8009dac:	4082      	lsls	r2, r0
 8009dae:	4313      	orrs	r3, r2
 8009db0:	3401      	adds	r4, #1
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db8:	4824      	ldr	r0, [pc, #144]	@ (8009e4c <_svfiprintf_r+0x1e8>)
 8009dba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dbe:	2206      	movs	r2, #6
 8009dc0:	f7f6 fa36 	bl	8000230 <memchr>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d036      	beq.n	8009e36 <_svfiprintf_r+0x1d2>
 8009dc8:	4b21      	ldr	r3, [pc, #132]	@ (8009e50 <_svfiprintf_r+0x1ec>)
 8009dca:	bb1b      	cbnz	r3, 8009e14 <_svfiprintf_r+0x1b0>
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	3307      	adds	r3, #7
 8009dd0:	f023 0307 	bic.w	r3, r3, #7
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	9303      	str	r3, [sp, #12]
 8009dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dda:	4433      	add	r3, r6
 8009ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dde:	e76a      	b.n	8009cb6 <_svfiprintf_r+0x52>
 8009de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009de4:	460c      	mov	r4, r1
 8009de6:	2001      	movs	r0, #1
 8009de8:	e7a8      	b.n	8009d3c <_svfiprintf_r+0xd8>
 8009dea:	2300      	movs	r3, #0
 8009dec:	3401      	adds	r4, #1
 8009dee:	9305      	str	r3, [sp, #20]
 8009df0:	4619      	mov	r1, r3
 8009df2:	f04f 0c0a 	mov.w	ip, #10
 8009df6:	4620      	mov	r0, r4
 8009df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dfc:	3a30      	subs	r2, #48	@ 0x30
 8009dfe:	2a09      	cmp	r2, #9
 8009e00:	d903      	bls.n	8009e0a <_svfiprintf_r+0x1a6>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0c6      	beq.n	8009d94 <_svfiprintf_r+0x130>
 8009e06:	9105      	str	r1, [sp, #20]
 8009e08:	e7c4      	b.n	8009d94 <_svfiprintf_r+0x130>
 8009e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e0e:	4604      	mov	r4, r0
 8009e10:	2301      	movs	r3, #1
 8009e12:	e7f0      	b.n	8009df6 <_svfiprintf_r+0x192>
 8009e14:	ab03      	add	r3, sp, #12
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	462a      	mov	r2, r5
 8009e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e54 <_svfiprintf_r+0x1f0>)
 8009e1c:	a904      	add	r1, sp, #16
 8009e1e:	4638      	mov	r0, r7
 8009e20:	f3af 8000 	nop.w
 8009e24:	1c42      	adds	r2, r0, #1
 8009e26:	4606      	mov	r6, r0
 8009e28:	d1d6      	bne.n	8009dd8 <_svfiprintf_r+0x174>
 8009e2a:	89ab      	ldrh	r3, [r5, #12]
 8009e2c:	065b      	lsls	r3, r3, #25
 8009e2e:	f53f af2d 	bmi.w	8009c8c <_svfiprintf_r+0x28>
 8009e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e34:	e72c      	b.n	8009c90 <_svfiprintf_r+0x2c>
 8009e36:	ab03      	add	r3, sp, #12
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	4b05      	ldr	r3, [pc, #20]	@ (8009e54 <_svfiprintf_r+0x1f0>)
 8009e3e:	a904      	add	r1, sp, #16
 8009e40:	4638      	mov	r0, r7
 8009e42:	f000 f879 	bl	8009f38 <_printf_i>
 8009e46:	e7ed      	b.n	8009e24 <_svfiprintf_r+0x1c0>
 8009e48:	0800a76c 	.word	0x0800a76c
 8009e4c:	0800a776 	.word	0x0800a776
 8009e50:	00000000 	.word	0x00000000
 8009e54:	08009bad 	.word	0x08009bad
 8009e58:	0800a772 	.word	0x0800a772

08009e5c <_printf_common>:
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	4616      	mov	r6, r2
 8009e62:	4698      	mov	r8, r3
 8009e64:	688a      	ldr	r2, [r1, #8]
 8009e66:	690b      	ldr	r3, [r1, #16]
 8009e68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	bfb8      	it	lt
 8009e70:	4613      	movlt	r3, r2
 8009e72:	6033      	str	r3, [r6, #0]
 8009e74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e78:	4607      	mov	r7, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	b10a      	cbz	r2, 8009e82 <_printf_common+0x26>
 8009e7e:	3301      	adds	r3, #1
 8009e80:	6033      	str	r3, [r6, #0]
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	0699      	lsls	r1, r3, #26
 8009e86:	bf42      	ittt	mi
 8009e88:	6833      	ldrmi	r3, [r6, #0]
 8009e8a:	3302      	addmi	r3, #2
 8009e8c:	6033      	strmi	r3, [r6, #0]
 8009e8e:	6825      	ldr	r5, [r4, #0]
 8009e90:	f015 0506 	ands.w	r5, r5, #6
 8009e94:	d106      	bne.n	8009ea4 <_printf_common+0x48>
 8009e96:	f104 0a19 	add.w	sl, r4, #25
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	6832      	ldr	r2, [r6, #0]
 8009e9e:	1a9b      	subs	r3, r3, r2
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	dc26      	bgt.n	8009ef2 <_printf_common+0x96>
 8009ea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	3b00      	subs	r3, #0
 8009eac:	bf18      	it	ne
 8009eae:	2301      	movne	r3, #1
 8009eb0:	0692      	lsls	r2, r2, #26
 8009eb2:	d42b      	bmi.n	8009f0c <_printf_common+0xb0>
 8009eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009eb8:	4641      	mov	r1, r8
 8009eba:	4638      	mov	r0, r7
 8009ebc:	47c8      	blx	r9
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d01e      	beq.n	8009f00 <_printf_common+0xa4>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	f003 0306 	and.w	r3, r3, #6
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	bf02      	ittt	eq
 8009ece:	68e5      	ldreq	r5, [r4, #12]
 8009ed0:	6833      	ldreq	r3, [r6, #0]
 8009ed2:	1aed      	subeq	r5, r5, r3
 8009ed4:	68a3      	ldr	r3, [r4, #8]
 8009ed6:	bf0c      	ite	eq
 8009ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009edc:	2500      	movne	r5, #0
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	bfc4      	itt	gt
 8009ee2:	1a9b      	subgt	r3, r3, r2
 8009ee4:	18ed      	addgt	r5, r5, r3
 8009ee6:	2600      	movs	r6, #0
 8009ee8:	341a      	adds	r4, #26
 8009eea:	42b5      	cmp	r5, r6
 8009eec:	d11a      	bne.n	8009f24 <_printf_common+0xc8>
 8009eee:	2000      	movs	r0, #0
 8009ef0:	e008      	b.n	8009f04 <_printf_common+0xa8>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4652      	mov	r2, sl
 8009ef6:	4641      	mov	r1, r8
 8009ef8:	4638      	mov	r0, r7
 8009efa:	47c8      	blx	r9
 8009efc:	3001      	adds	r0, #1
 8009efe:	d103      	bne.n	8009f08 <_printf_common+0xac>
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295
 8009f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f08:	3501      	adds	r5, #1
 8009f0a:	e7c6      	b.n	8009e9a <_printf_common+0x3e>
 8009f0c:	18e1      	adds	r1, r4, r3
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	2030      	movs	r0, #48	@ 0x30
 8009f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f16:	4422      	add	r2, r4
 8009f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f20:	3302      	adds	r3, #2
 8009f22:	e7c7      	b.n	8009eb4 <_printf_common+0x58>
 8009f24:	2301      	movs	r3, #1
 8009f26:	4622      	mov	r2, r4
 8009f28:	4641      	mov	r1, r8
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	47c8      	blx	r9
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d0e6      	beq.n	8009f00 <_printf_common+0xa4>
 8009f32:	3601      	adds	r6, #1
 8009f34:	e7d9      	b.n	8009eea <_printf_common+0x8e>
	...

08009f38 <_printf_i>:
 8009f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3c:	7e0f      	ldrb	r7, [r1, #24]
 8009f3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f40:	2f78      	cmp	r7, #120	@ 0x78
 8009f42:	4691      	mov	r9, r2
 8009f44:	4680      	mov	r8, r0
 8009f46:	460c      	mov	r4, r1
 8009f48:	469a      	mov	sl, r3
 8009f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f4e:	d807      	bhi.n	8009f60 <_printf_i+0x28>
 8009f50:	2f62      	cmp	r7, #98	@ 0x62
 8009f52:	d80a      	bhi.n	8009f6a <_printf_i+0x32>
 8009f54:	2f00      	cmp	r7, #0
 8009f56:	f000 80d1 	beq.w	800a0fc <_printf_i+0x1c4>
 8009f5a:	2f58      	cmp	r7, #88	@ 0x58
 8009f5c:	f000 80b8 	beq.w	800a0d0 <_printf_i+0x198>
 8009f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f68:	e03a      	b.n	8009fe0 <_printf_i+0xa8>
 8009f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f6e:	2b15      	cmp	r3, #21
 8009f70:	d8f6      	bhi.n	8009f60 <_printf_i+0x28>
 8009f72:	a101      	add	r1, pc, #4	@ (adr r1, 8009f78 <_printf_i+0x40>)
 8009f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f78:	08009fd1 	.word	0x08009fd1
 8009f7c:	08009fe5 	.word	0x08009fe5
 8009f80:	08009f61 	.word	0x08009f61
 8009f84:	08009f61 	.word	0x08009f61
 8009f88:	08009f61 	.word	0x08009f61
 8009f8c:	08009f61 	.word	0x08009f61
 8009f90:	08009fe5 	.word	0x08009fe5
 8009f94:	08009f61 	.word	0x08009f61
 8009f98:	08009f61 	.word	0x08009f61
 8009f9c:	08009f61 	.word	0x08009f61
 8009fa0:	08009f61 	.word	0x08009f61
 8009fa4:	0800a0e3 	.word	0x0800a0e3
 8009fa8:	0800a00f 	.word	0x0800a00f
 8009fac:	0800a09d 	.word	0x0800a09d
 8009fb0:	08009f61 	.word	0x08009f61
 8009fb4:	08009f61 	.word	0x08009f61
 8009fb8:	0800a105 	.word	0x0800a105
 8009fbc:	08009f61 	.word	0x08009f61
 8009fc0:	0800a00f 	.word	0x0800a00f
 8009fc4:	08009f61 	.word	0x08009f61
 8009fc8:	08009f61 	.word	0x08009f61
 8009fcc:	0800a0a5 	.word	0x0800a0a5
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	1d1a      	adds	r2, r3, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6032      	str	r2, [r6, #0]
 8009fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e09c      	b.n	800a11e <_printf_i+0x1e6>
 8009fe4:	6833      	ldr	r3, [r6, #0]
 8009fe6:	6820      	ldr	r0, [r4, #0]
 8009fe8:	1d19      	adds	r1, r3, #4
 8009fea:	6031      	str	r1, [r6, #0]
 8009fec:	0606      	lsls	r6, r0, #24
 8009fee:	d501      	bpl.n	8009ff4 <_printf_i+0xbc>
 8009ff0:	681d      	ldr	r5, [r3, #0]
 8009ff2:	e003      	b.n	8009ffc <_printf_i+0xc4>
 8009ff4:	0645      	lsls	r5, r0, #25
 8009ff6:	d5fb      	bpl.n	8009ff0 <_printf_i+0xb8>
 8009ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	da03      	bge.n	800a008 <_printf_i+0xd0>
 800a000:	232d      	movs	r3, #45	@ 0x2d
 800a002:	426d      	negs	r5, r5
 800a004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a008:	4858      	ldr	r0, [pc, #352]	@ (800a16c <_printf_i+0x234>)
 800a00a:	230a      	movs	r3, #10
 800a00c:	e011      	b.n	800a032 <_printf_i+0xfa>
 800a00e:	6821      	ldr	r1, [r4, #0]
 800a010:	6833      	ldr	r3, [r6, #0]
 800a012:	0608      	lsls	r0, r1, #24
 800a014:	f853 5b04 	ldr.w	r5, [r3], #4
 800a018:	d402      	bmi.n	800a020 <_printf_i+0xe8>
 800a01a:	0649      	lsls	r1, r1, #25
 800a01c:	bf48      	it	mi
 800a01e:	b2ad      	uxthmi	r5, r5
 800a020:	2f6f      	cmp	r7, #111	@ 0x6f
 800a022:	4852      	ldr	r0, [pc, #328]	@ (800a16c <_printf_i+0x234>)
 800a024:	6033      	str	r3, [r6, #0]
 800a026:	bf14      	ite	ne
 800a028:	230a      	movne	r3, #10
 800a02a:	2308      	moveq	r3, #8
 800a02c:	2100      	movs	r1, #0
 800a02e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a032:	6866      	ldr	r6, [r4, #4]
 800a034:	60a6      	str	r6, [r4, #8]
 800a036:	2e00      	cmp	r6, #0
 800a038:	db05      	blt.n	800a046 <_printf_i+0x10e>
 800a03a:	6821      	ldr	r1, [r4, #0]
 800a03c:	432e      	orrs	r6, r5
 800a03e:	f021 0104 	bic.w	r1, r1, #4
 800a042:	6021      	str	r1, [r4, #0]
 800a044:	d04b      	beq.n	800a0de <_printf_i+0x1a6>
 800a046:	4616      	mov	r6, r2
 800a048:	fbb5 f1f3 	udiv	r1, r5, r3
 800a04c:	fb03 5711 	mls	r7, r3, r1, r5
 800a050:	5dc7      	ldrb	r7, [r0, r7]
 800a052:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a056:	462f      	mov	r7, r5
 800a058:	42bb      	cmp	r3, r7
 800a05a:	460d      	mov	r5, r1
 800a05c:	d9f4      	bls.n	800a048 <_printf_i+0x110>
 800a05e:	2b08      	cmp	r3, #8
 800a060:	d10b      	bne.n	800a07a <_printf_i+0x142>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	07df      	lsls	r7, r3, #31
 800a066:	d508      	bpl.n	800a07a <_printf_i+0x142>
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	6861      	ldr	r1, [r4, #4]
 800a06c:	4299      	cmp	r1, r3
 800a06e:	bfde      	ittt	le
 800a070:	2330      	movle	r3, #48	@ 0x30
 800a072:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a076:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a07a:	1b92      	subs	r2, r2, r6
 800a07c:	6122      	str	r2, [r4, #16]
 800a07e:	f8cd a000 	str.w	sl, [sp]
 800a082:	464b      	mov	r3, r9
 800a084:	aa03      	add	r2, sp, #12
 800a086:	4621      	mov	r1, r4
 800a088:	4640      	mov	r0, r8
 800a08a:	f7ff fee7 	bl	8009e5c <_printf_common>
 800a08e:	3001      	adds	r0, #1
 800a090:	d14a      	bne.n	800a128 <_printf_i+0x1f0>
 800a092:	f04f 30ff 	mov.w	r0, #4294967295
 800a096:	b004      	add	sp, #16
 800a098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	f043 0320 	orr.w	r3, r3, #32
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	4832      	ldr	r0, [pc, #200]	@ (800a170 <_printf_i+0x238>)
 800a0a6:	2778      	movs	r7, #120	@ 0x78
 800a0a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	6831      	ldr	r1, [r6, #0]
 800a0b0:	061f      	lsls	r7, r3, #24
 800a0b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0b6:	d402      	bmi.n	800a0be <_printf_i+0x186>
 800a0b8:	065f      	lsls	r7, r3, #25
 800a0ba:	bf48      	it	mi
 800a0bc:	b2ad      	uxthmi	r5, r5
 800a0be:	6031      	str	r1, [r6, #0]
 800a0c0:	07d9      	lsls	r1, r3, #31
 800a0c2:	bf44      	itt	mi
 800a0c4:	f043 0320 	orrmi.w	r3, r3, #32
 800a0c8:	6023      	strmi	r3, [r4, #0]
 800a0ca:	b11d      	cbz	r5, 800a0d4 <_printf_i+0x19c>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	e7ad      	b.n	800a02c <_printf_i+0xf4>
 800a0d0:	4826      	ldr	r0, [pc, #152]	@ (800a16c <_printf_i+0x234>)
 800a0d2:	e7e9      	b.n	800a0a8 <_printf_i+0x170>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	f023 0320 	bic.w	r3, r3, #32
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	e7f6      	b.n	800a0cc <_printf_i+0x194>
 800a0de:	4616      	mov	r6, r2
 800a0e0:	e7bd      	b.n	800a05e <_printf_i+0x126>
 800a0e2:	6833      	ldr	r3, [r6, #0]
 800a0e4:	6825      	ldr	r5, [r4, #0]
 800a0e6:	6961      	ldr	r1, [r4, #20]
 800a0e8:	1d18      	adds	r0, r3, #4
 800a0ea:	6030      	str	r0, [r6, #0]
 800a0ec:	062e      	lsls	r6, r5, #24
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	d501      	bpl.n	800a0f6 <_printf_i+0x1be>
 800a0f2:	6019      	str	r1, [r3, #0]
 800a0f4:	e002      	b.n	800a0fc <_printf_i+0x1c4>
 800a0f6:	0668      	lsls	r0, r5, #25
 800a0f8:	d5fb      	bpl.n	800a0f2 <_printf_i+0x1ba>
 800a0fa:	8019      	strh	r1, [r3, #0]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	4616      	mov	r6, r2
 800a102:	e7bc      	b.n	800a07e <_printf_i+0x146>
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	1d1a      	adds	r2, r3, #4
 800a108:	6032      	str	r2, [r6, #0]
 800a10a:	681e      	ldr	r6, [r3, #0]
 800a10c:	6862      	ldr	r2, [r4, #4]
 800a10e:	2100      	movs	r1, #0
 800a110:	4630      	mov	r0, r6
 800a112:	f7f6 f88d 	bl	8000230 <memchr>
 800a116:	b108      	cbz	r0, 800a11c <_printf_i+0x1e4>
 800a118:	1b80      	subs	r0, r0, r6
 800a11a:	6060      	str	r0, [r4, #4]
 800a11c:	6863      	ldr	r3, [r4, #4]
 800a11e:	6123      	str	r3, [r4, #16]
 800a120:	2300      	movs	r3, #0
 800a122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a126:	e7aa      	b.n	800a07e <_printf_i+0x146>
 800a128:	6923      	ldr	r3, [r4, #16]
 800a12a:	4632      	mov	r2, r6
 800a12c:	4649      	mov	r1, r9
 800a12e:	4640      	mov	r0, r8
 800a130:	47d0      	blx	sl
 800a132:	3001      	adds	r0, #1
 800a134:	d0ad      	beq.n	800a092 <_printf_i+0x15a>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	079b      	lsls	r3, r3, #30
 800a13a:	d413      	bmi.n	800a164 <_printf_i+0x22c>
 800a13c:	68e0      	ldr	r0, [r4, #12]
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	4298      	cmp	r0, r3
 800a142:	bfb8      	it	lt
 800a144:	4618      	movlt	r0, r3
 800a146:	e7a6      	b.n	800a096 <_printf_i+0x15e>
 800a148:	2301      	movs	r3, #1
 800a14a:	4632      	mov	r2, r6
 800a14c:	4649      	mov	r1, r9
 800a14e:	4640      	mov	r0, r8
 800a150:	47d0      	blx	sl
 800a152:	3001      	adds	r0, #1
 800a154:	d09d      	beq.n	800a092 <_printf_i+0x15a>
 800a156:	3501      	adds	r5, #1
 800a158:	68e3      	ldr	r3, [r4, #12]
 800a15a:	9903      	ldr	r1, [sp, #12]
 800a15c:	1a5b      	subs	r3, r3, r1
 800a15e:	42ab      	cmp	r3, r5
 800a160:	dcf2      	bgt.n	800a148 <_printf_i+0x210>
 800a162:	e7eb      	b.n	800a13c <_printf_i+0x204>
 800a164:	2500      	movs	r5, #0
 800a166:	f104 0619 	add.w	r6, r4, #25
 800a16a:	e7f5      	b.n	800a158 <_printf_i+0x220>
 800a16c:	0800a77d 	.word	0x0800a77d
 800a170:	0800a78e 	.word	0x0800a78e

0800a174 <memmove>:
 800a174:	4288      	cmp	r0, r1
 800a176:	b510      	push	{r4, lr}
 800a178:	eb01 0402 	add.w	r4, r1, r2
 800a17c:	d902      	bls.n	800a184 <memmove+0x10>
 800a17e:	4284      	cmp	r4, r0
 800a180:	4623      	mov	r3, r4
 800a182:	d807      	bhi.n	800a194 <memmove+0x20>
 800a184:	1e43      	subs	r3, r0, #1
 800a186:	42a1      	cmp	r1, r4
 800a188:	d008      	beq.n	800a19c <memmove+0x28>
 800a18a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a18e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a192:	e7f8      	b.n	800a186 <memmove+0x12>
 800a194:	4402      	add	r2, r0
 800a196:	4601      	mov	r1, r0
 800a198:	428a      	cmp	r2, r1
 800a19a:	d100      	bne.n	800a19e <memmove+0x2a>
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1a6:	e7f7      	b.n	800a198 <memmove+0x24>

0800a1a8 <_sbrk_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	4d06      	ldr	r5, [pc, #24]	@ (800a1c4 <_sbrk_r+0x1c>)
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4608      	mov	r0, r1
 800a1b2:	602b      	str	r3, [r5, #0]
 800a1b4:	f7f7 fe06 	bl	8001dc4 <_sbrk>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_sbrk_r+0x1a>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_sbrk_r+0x1a>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	20000bf4 	.word	0x20000bf4

0800a1c8 <_realloc_r>:
 800a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	4614      	mov	r4, r2
 800a1d0:	460d      	mov	r5, r1
 800a1d2:	b921      	cbnz	r1, 800a1de <_realloc_r+0x16>
 800a1d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d8:	4611      	mov	r1, r2
 800a1da:	f7ff bc5b 	b.w	8009a94 <_malloc_r>
 800a1de:	b92a      	cbnz	r2, 800a1ec <_realloc_r+0x24>
 800a1e0:	f7ff fbec 	bl	80099bc <_free_r>
 800a1e4:	4625      	mov	r5, r4
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ec:	f000 f81a 	bl	800a224 <_malloc_usable_size_r>
 800a1f0:	4284      	cmp	r4, r0
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	d802      	bhi.n	800a1fc <_realloc_r+0x34>
 800a1f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1fa:	d8f4      	bhi.n	800a1e6 <_realloc_r+0x1e>
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	4638      	mov	r0, r7
 800a200:	f7ff fc48 	bl	8009a94 <_malloc_r>
 800a204:	4680      	mov	r8, r0
 800a206:	b908      	cbnz	r0, 800a20c <_realloc_r+0x44>
 800a208:	4645      	mov	r5, r8
 800a20a:	e7ec      	b.n	800a1e6 <_realloc_r+0x1e>
 800a20c:	42b4      	cmp	r4, r6
 800a20e:	4622      	mov	r2, r4
 800a210:	4629      	mov	r1, r5
 800a212:	bf28      	it	cs
 800a214:	4632      	movcs	r2, r6
 800a216:	f7ff fbc3 	bl	80099a0 <memcpy>
 800a21a:	4629      	mov	r1, r5
 800a21c:	4638      	mov	r0, r7
 800a21e:	f7ff fbcd 	bl	80099bc <_free_r>
 800a222:	e7f1      	b.n	800a208 <_realloc_r+0x40>

0800a224 <_malloc_usable_size_r>:
 800a224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a228:	1f18      	subs	r0, r3, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	bfbc      	itt	lt
 800a22e:	580b      	ldrlt	r3, [r1, r0]
 800a230:	18c0      	addlt	r0, r0, r3
 800a232:	4770      	bx	lr

0800a234 <_init>:
 800a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a236:	bf00      	nop
 800a238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23a:	bc08      	pop	{r3}
 800a23c:	469e      	mov	lr, r3
 800a23e:	4770      	bx	lr

0800a240 <_fini>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	bf00      	nop
 800a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a246:	bc08      	pop	{r3}
 800a248:	469e      	mov	lr, r3
 800a24a:	4770      	bx	lr
